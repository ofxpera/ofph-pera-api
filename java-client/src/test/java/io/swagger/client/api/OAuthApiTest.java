/*
 * OFxPERA API
 * Philippines Open Finance API Implementation for PERA
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.*;
import org.threeten.bp.OffsetDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import java.util.List;
import java.util.ArrayList;

/**
 * API tests for OAuthApi
 */
@Disabled
public class OAuthApiTest {

    private final OAuthApi api = new OAuthApi();

    /**
     * Authorization endpoint for Admin-initiated onboarding
     *
     * OpenID Connect authorization endpoint that initiates the authorization flow
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizeOAuthTest() throws ApiException {
        String clientId = null;
        String responseType = null;
        List<String> scope = null;
        String redirectUri = null;
        String state = null;
        UUID xIdempotencyKey = null;
        OffsetDateTime xFapiAuthDate = null;
        OffsetDateTime xFapiCustomerLastLoggedTime = null;
        String codeChallenge = null;
        String codeChallengeMethod = null;
        String prompt = null;
        String nonce = null;
        api.authorizeOAuth(clientId, responseType, scope, redirectUri, state, xIdempotencyKey, xFapiAuthDate, xFapiCustomerLastLoggedTime, codeChallenge, codeChallengeMethod, prompt, nonce);
        // TODO: test validations
    }

    /**
     * Token endpoint
     *
     * OAuth 2.0 token endpoint for obtaining access tokens
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOAuthTokenTest() throws ApiException {
        String grantType = null;
        String code = null;
        String redirectUri = null;
        String clientId = null;
        String refreshToken = null;
        String clientAssertionType = null;
        String clientAssertion = null;
        String participantId = null;
        Integer xV = null;
        OffsetDateTime xFapiAuthDate = null;
        String xFapiCustomerIpAddress = null;
        String xClientHeaders = null;
        String xClientUserAgent = null;
        UUID xIdempotencyKey = null;
        OffsetDateTime xFapiCustomerLastLoggedTime = null;
        UUID xFapiInteractionId = null;
        TokenResponse response = api.getOAuthToken(grantType, code, redirectUri, clientId, refreshToken, clientAssertionType, clientAssertion, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId);
        // TODO: test validations
    }

    /**
     * Optional OpenID Connect UserInfo Endpoint
     *
     * OpenID Connect UserInfo Endpoint that returns information about the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserInfoTest() throws ApiException {
        String authorization = null;
        String participantId = null;
        Integer xV = null;
        OffsetDateTime xFapiAuthDate = null;
        String xFapiCustomerIpAddress = null;
        String xClientHeaders = null;
        String xClientUserAgent = null;
        UUID xIdempotencyKey = null;
        OffsetDateTime xFapiCustomerLastLoggedTime = null;
        UUID xFapiInteractionId = null;
        InlineResponse2001 response = api.getUserInfo(authorization, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId);
        // TODO: test validations
    }

    /**
     * Optional token introspection
     *
     * Endpoint for validating and retrieving metadata about an access token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void introspectTokenTest() throws ApiException {
        String token = null;
        String authorization = null;
        String participantId = null;
        Integer xV = null;
        OffsetDateTime xFapiAuthDate = null;
        String xFapiCustomerIpAddress = null;
        String xClientHeaders = null;
        String xClientUserAgent = null;
        UUID xIdempotencyKey = null;
        OffsetDateTime xFapiCustomerLastLoggedTime = null;
        UUID xFapiInteractionId = null;
        InlineResponse200 response = api.introspectToken(token, authorization, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId);
        // TODO: test validations
    }
}
