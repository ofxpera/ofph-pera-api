/*
 * OFxPERA API
 * Philippines Open Finance API Implementation for PERA
 *
 * OpenAPI spec version: 0.0.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.*;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.threeten.bp.OffsetDateTime;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

/**
 * API tests for ConsentApi
 */
@Disabled
public class ConsentApiTest {

    private final ConsentApi api = new ConsentApi();

    /**
     * Bulk update customer's consent arrangements
     *
     * Update multiple consent arrangements for a specific customer in a single request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bulkUpdateCustomerConsentsTest() throws ApiException {
        ArrangementsBulkupdateBody body = null;
        String participantId = null;
        Integer xV = null;
        OffsetDateTime xFapiAuthDate = null;
        String xFapiCustomerIpAddress = null;
        String xClientHeaders = null;
        String xClientUserAgent = null;
        UUID xIdempotencyKey = null;
        OffsetDateTime xFapiCustomerLastLoggedTime = null;
        String customerId = null;
        UUID xFapiInteractionId = null;
        InlineResponse2004 response = api.bulkUpdateCustomerConsents(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, customerId, xFapiInteractionId);
        // TODO: test validations
    }

    /**
     * Create bulk consent
     *
     * Create multiple consent arrangements in a single request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBulkConsentTest() throws ApiException {
        BulkConsentRequest body = null;
        String participantId = null;
        Integer xV = null;
        OffsetDateTime xFapiAuthDate = null;
        String xFapiCustomerIpAddress = null;
        String xClientHeaders = null;
        String xClientUserAgent = null;
        UUID xIdempotencyKey = null;
        OffsetDateTime xFapiCustomerLastLoggedTime = null;
        UUID xFapiInteractionId = null;
        BulkConsentResponse response = api.createBulkConsent(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId);
        // TODO: test validations
    }

    /**
     * Create consent arrangement
     *
     * Create a new consent arrangement
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConsentArrangementTest() throws ApiException {
        ConsentArrangementRequest body = null;
        String participantId = null;
        Integer xV = null;
        OffsetDateTime xFapiAuthDate = null;
        String xFapiCustomerIpAddress = null;
        String xClientHeaders = null;
        String xClientUserAgent = null;
        UUID xIdempotencyKey = null;
        OffsetDateTime xFapiCustomerLastLoggedTime = null;
        UUID xFapiInteractionId = null;
        ConsentArrangementResponse response = api.createConsentArrangement(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId);
        // TODO: test validations
    }

    /**
     * Extend consent duration
     *
     * Extend the duration of a consent arrangement
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extendConsentDurationTest() throws ApiException {
        ConsentExtensionRequest body = null;
        String participantId = null;
        Integer xV = null;
        OffsetDateTime xFapiAuthDate = null;
        String xFapiCustomerIpAddress = null;
        String xClientHeaders = null;
        String xClientUserAgent = null;
        UUID xIdempotencyKey = null;
        OffsetDateTime xFapiCustomerLastLoggedTime = null;
        String arrangementId = null;
        UUID xFapiInteractionId = null;
        ConsentArrangementResponse response = api.extendConsentDuration(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, arrangementId, xFapiInteractionId);
        // TODO: test validations
    }

    /**
     * Get consent arrangement
     *
     * Retrieve details of a specific consent arrangement
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConsentArrangementTest() throws ApiException {
        String arrangementId = null;
        String participantId = null;
        Integer xV = null;
        OffsetDateTime xFapiAuthDate = null;
        String xFapiCustomerIpAddress = null;
        String xClientHeaders = null;
        String xClientUserAgent = null;
        UUID xIdempotencyKey = null;
        OffsetDateTime xFapiCustomerLastLoggedTime = null;
        UUID xFapiInteractionId = null;
        ConsentArrangementResponse response = api.getConsentArrangement(arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId);
        // TODO: test validations
    }

    /**
     * Get consent history
     *
     * Retrieve the history of a consent arrangement
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConsentHistoryTest() throws ApiException {
        String arrangementId = null;
        String participantId = null;
        Integer xV = null;
        OffsetDateTime xFapiAuthDate = null;
        String xFapiCustomerIpAddress = null;
        String xClientHeaders = null;
        String xClientUserAgent = null;
        UUID xIdempotencyKey = null;
        OffsetDateTime xFapiCustomerLastLoggedTime = null;
        UUID xFapiInteractionId = null;
        ConsentHistory response = api.getConsentHistory(arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId);
        // TODO: test validations
    }

    /**
     * Get customer consent dashboard
     *
     * Retrieve the consent dashboard for a customer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomerConsentDashboardTest() throws ApiException {
        String customerId = null;
        String participantId = null;
        Integer xV = null;
        OffsetDateTime xFapiAuthDate = null;
        String xFapiCustomerIpAddress = null;
        String xClientHeaders = null;
        String xClientUserAgent = null;
        UUID xIdempotencyKey = null;
        OffsetDateTime xFapiCustomerLastLoggedTime = null;
        UUID xFapiInteractionId = null;
        ConsentDashboard response = api.getCustomerConsentDashboard(customerId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId);
        // TODO: test validations
    }

    /**
     * Get customer consents
     *
     * Retrieve all consents for a customer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomerConsentsTest() throws ApiException {
        String customerId = null;
        String participantId = null;
        Integer xV = null;
        OffsetDateTime xFapiAuthDate = null;
        String xFapiCustomerIpAddress = null;
        String xClientHeaders = null;
        String xClientUserAgent = null;
        UUID xIdempotencyKey = null;
        OffsetDateTime xFapiCustomerLastLoggedTime = null;
        String status = null;
        String dataHolderId = null;
        String purpose = null;
        UUID xFapiInteractionId = null;
        InlineResponse2003 response = api.getCustomerConsents(customerId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, status, dataHolderId, purpose, xFapiInteractionId);
        // TODO: test validations
    }

    /**
     * List consent arrangements
     *
     * Retrieve a list of consent arrangements
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConsentArrangementsTest() throws ApiException {
        String participantId = null;
        Integer xV = null;
        OffsetDateTime xFapiAuthDate = null;
        String xFapiCustomerIpAddress = null;
        String xClientHeaders = null;
        String xClientUserAgent = null;
        UUID xIdempotencyKey = null;
        OffsetDateTime xFapiCustomerLastLoggedTime = null;
        String status = null;
        OffsetDateTime fromDate = null;
        OffsetDateTime toDate = null;
        UUID xFapiInteractionId = null;
        List<ConsentArrangementResponse> response = api.listConsentArrangements(participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, status, fromDate, toDate, xFapiInteractionId);
        // TODO: test validations
    }

    /**
     * List consent templates
     *
     * Retrieve a list of available consent templates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConsentTemplatesTest() throws ApiException {
        String participantId = null;
        Integer xV = null;
        OffsetDateTime xFapiAuthDate = null;
        String xFapiCustomerIpAddress = null;
        String xClientHeaders = null;
        String xClientUserAgent = null;
        UUID xIdempotencyKey = null;
        OffsetDateTime xFapiCustomerLastLoggedTime = null;
        String category = null;
        String purpose = null;
        UUID xFapiInteractionId = null;
        List<ConsentTemplate> response = api.listConsentTemplates(participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, category, purpose, xFapiInteractionId);
        // TODO: test validations
    }

    /**
     * Revoke consent arrangement
     *
     * Revoke a consent arrangement
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeConsentArrangementTest() throws ApiException {
        String arrangementId = null;
        String participantId = null;
        Integer xV = null;
        OffsetDateTime xFapiAuthDate = null;
        String xFapiCustomerIpAddress = null;
        String xClientHeaders = null;
        String xClientUserAgent = null;
        UUID xIdempotencyKey = null;
        OffsetDateTime xFapiCustomerLastLoggedTime = null;
        UUID xFapiInteractionId = null;
        api.revokeConsentArrangement(arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId);
        // TODO: test validations
    }

    /**
     * Update consent status
     *
     * Update the status of a consent arrangement
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConsentStatusTest() throws ApiException {
        ConsentStatusUpdate body = null;
        String participantId = null;
        Integer xV = null;
        OffsetDateTime xFapiAuthDate = null;
        String xFapiCustomerIpAddress = null;
        String xClientHeaders = null;
        String xClientUserAgent = null;
        UUID xIdempotencyKey = null;
        OffsetDateTime xFapiCustomerLastLoggedTime = null;
        String arrangementId = null;
        UUID xFapiInteractionId = null;
        ConsentArrangementResponse response = api.updateConsentStatus(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, arrangementId, xFapiInteractionId);
        // TODO: test validations
    }
}
