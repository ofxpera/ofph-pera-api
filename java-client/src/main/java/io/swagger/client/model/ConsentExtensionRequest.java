/*
 * OFxPERA API
 * Philippines Open Finance API Implementation for PERA
 *
 * OpenAPI spec version: 0.0.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ConsentArrangementRequestAdditionalTerms;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * ConsentExtensionRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-03-24T23:12:52.341191218Z[GMT]")

public class ConsentExtensionRequest {
  @SerializedName("new_end_date")
  private OffsetDateTime newEndDate = null;

  @SerializedName("reason")
  private String reason = null;

  @SerializedName("additional_terms")
  private List<ConsentArrangementRequestAdditionalTerms> additionalTerms = null;

  public ConsentExtensionRequest newEndDate(OffsetDateTime newEndDate) {
    this.newEndDate = newEndDate;
    return this;
  }

   /**
   * New end date for the consent arrangement
   * @return newEndDate
  **/
  @Schema(required = true, description = "New end date for the consent arrangement")
  public OffsetDateTime getNewEndDate() {
    return newEndDate;
  }

  public void setNewEndDate(OffsetDateTime newEndDate) {
    this.newEndDate = newEndDate;
  }

  public ConsentExtensionRequest reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * Reason for extending the consent
   * @return reason
  **/
  @Schema(description = "Reason for extending the consent")
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }

  public ConsentExtensionRequest additionalTerms(List<ConsentArrangementRequestAdditionalTerms> additionalTerms) {
    this.additionalTerms = additionalTerms;
    return this;
  }

  public ConsentExtensionRequest addAdditionalTermsItem(ConsentArrangementRequestAdditionalTerms additionalTermsItem) {
    if (this.additionalTerms == null) {
      this.additionalTerms = new ArrayList<ConsentArrangementRequestAdditionalTerms>();
    }
    this.additionalTerms.add(additionalTermsItem);
    return this;
  }

   /**
   * Get additionalTerms
   * @return additionalTerms
  **/
  @Schema(description = "")
  public List<ConsentArrangementRequestAdditionalTerms> getAdditionalTerms() {
    return additionalTerms;
  }

  public void setAdditionalTerms(List<ConsentArrangementRequestAdditionalTerms> additionalTerms) {
    this.additionalTerms = additionalTerms;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsentExtensionRequest consentExtensionRequest = (ConsentExtensionRequest) o;
    return Objects.equals(this.newEndDate, consentExtensionRequest.newEndDate) &&
        Objects.equals(this.reason, consentExtensionRequest.reason) &&
        Objects.equals(this.additionalTerms, consentExtensionRequest.additionalTerms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(newEndDate, reason, additionalTerms);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsentExtensionRequest {\n");
    
    sb.append("    newEndDate: ").append(toIndentedString(newEndDate)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    additionalTerms: ").append(toIndentedString(additionalTerms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
