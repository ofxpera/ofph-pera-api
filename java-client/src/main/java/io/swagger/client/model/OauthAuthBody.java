/*
 * OFxPERA API
 * Philippines Open Finance API Implementation for PERA
 *
 * OpenAPI spec version: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.EndorsementDetails;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * OauthAuthBody
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-03-03T23:36:15.658195047Z[GMT]")

public class OauthAuthBody {
  @SerializedName("participant_id")
  private String participantId = null;

  @SerializedName("endorsement_details")
  private EndorsementDetails endorsementDetails = null;

  @SerializedName("authorization_code")
  private String authorizationCode = null;

  /**
   * Must be set to \&quot;code\&quot; for authorization code flow
   */
  @JsonAdapter(ResponseTypeEnum.Adapter.class)
  public enum ResponseTypeEnum {
    @SerializedName("code")
    CODE("code");

    private String value;

    ResponseTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ResponseTypeEnum fromValue(String input) {
      for (ResponseTypeEnum b : ResponseTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ResponseTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResponseTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ResponseTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ResponseTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("response_type")
  private ResponseTypeEnum responseType = null;

  /**
   * Gets or Sets scope
   */
  @JsonAdapter(ScopeEnum.Adapter.class)
  public enum ScopeEnum {
    @SerializedName("openid")
    OPENID("openid"),
    @SerializedName("profile")
    PROFILE("profile"),
    @SerializedName("email")
    EMAIL("email"),
    @SerializedName("address")
    ADDRESS("address"),
    @SerializedName("phone")
    PHONE("phone");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ScopeEnum fromValue(String input) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ScopeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ScopeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("scope")
  private List<ScopeEnum> scope = null;

  @SerializedName("token_endpoint")
  private String tokenEndpoint = null;

  @SerializedName("code_challenge")
  private String codeChallenge = null;

  /**
   * Code challenge method for PKCE
   */
  @JsonAdapter(CodeChallengeMethodEnum.Adapter.class)
  public enum CodeChallengeMethodEnum {
    @SerializedName("S256")
    S256("S256");

    private String value;

    CodeChallengeMethodEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static CodeChallengeMethodEnum fromValue(String input) {
      for (CodeChallengeMethodEnum b : CodeChallengeMethodEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<CodeChallengeMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodeChallengeMethodEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public CodeChallengeMethodEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return CodeChallengeMethodEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("code_challenge_method")
  private CodeChallengeMethodEnum codeChallengeMethod = null;

  @SerializedName("state")
  private String state = null;

  @SerializedName("prompt")
  private String prompt = null;

  @SerializedName("nonce")
  private String nonce = null;

  public OauthAuthBody participantId(String participantId) {
    this.participantId = participantId;
    return this;
  }

   /**
   * Participant identifier of the FI issued during registration
   * @return participantId
  **/
  @Schema(required = true, description = "Participant identifier of the FI issued during registration")
  public String getParticipantId() {
    return participantId;
  }

  public void setParticipantId(String participantId) {
    this.participantId = participantId;
  }

  public OauthAuthBody endorsementDetails(EndorsementDetails endorsementDetails) {
    this.endorsementDetails = endorsementDetails;
    return this;
  }

   /**
   * Get endorsementDetails
   * @return endorsementDetails
  **/
  @Schema(description = "")
  public EndorsementDetails getEndorsementDetails() {
    return endorsementDetails;
  }

  public void setEndorsementDetails(EndorsementDetails endorsementDetails) {
    this.endorsementDetails = endorsementDetails;
  }

  public OauthAuthBody authorizationCode(String authorizationCode) {
    this.authorizationCode = authorizationCode;
    return this;
  }

   /**
   * Authorization code
   * @return authorizationCode
  **/
  @Schema(description = "Authorization code")
  public String getAuthorizationCode() {
    return authorizationCode;
  }

  public void setAuthorizationCode(String authorizationCode) {
    this.authorizationCode = authorizationCode;
  }

  public OauthAuthBody responseType(ResponseTypeEnum responseType) {
    this.responseType = responseType;
    return this;
  }

   /**
   * Must be set to \&quot;code\&quot; for authorization code flow
   * @return responseType
  **/
  @Schema(required = true, description = "Must be set to \"code\" for authorization code flow")
  public ResponseTypeEnum getResponseType() {
    return responseType;
  }

  public void setResponseType(ResponseTypeEnum responseType) {
    this.responseType = responseType;
  }

  public OauthAuthBody scope(List<ScopeEnum> scope) {
    this.scope = scope;
    return this;
  }

  public OauthAuthBody addScopeItem(ScopeEnum scopeItem) {
    if (this.scope == null) {
      this.scope = new ArrayList<ScopeEnum>();
    }
    this.scope.add(scopeItem);
    return this;
  }

   /**
   * Space-separated list of requested scope values, OFxPERA requires openid to be included to maintain compatibility with OIDC.
   * @return scope
  **/
  @Schema(description = "Space-separated list of requested scope values, OFxPERA requires openid to be included to maintain compatibility with OIDC.")
  public List<ScopeEnum> getScope() {
    return scope;
  }

  public void setScope(List<ScopeEnum> scope) {
    this.scope = scope;
  }

  public OauthAuthBody tokenEndpoint(String tokenEndpoint) {
    this.tokenEndpoint = tokenEndpoint;
    return this;
  }

   /**
   * URI of the token endpoint for retrieving access tokens
   * @return tokenEndpoint
  **/
  @Schema(description = "URI of the token endpoint for retrieving access tokens")
  public String getTokenEndpoint() {
    return tokenEndpoint;
  }

  public void setTokenEndpoint(String tokenEndpoint) {
    this.tokenEndpoint = tokenEndpoint;
  }

  public OauthAuthBody codeChallenge(String codeChallenge) {
    this.codeChallenge = codeChallenge;
    return this;
  }

   /**
   * Code challenge for PKCE
   * @return codeChallenge
  **/
  @Schema(description = "Code challenge for PKCE")
  public String getCodeChallenge() {
    return codeChallenge;
  }

  public void setCodeChallenge(String codeChallenge) {
    this.codeChallenge = codeChallenge;
  }

  public OauthAuthBody codeChallengeMethod(CodeChallengeMethodEnum codeChallengeMethod) {
    this.codeChallengeMethod = codeChallengeMethod;
    return this;
  }

   /**
   * Code challenge method for PKCE
   * @return codeChallengeMethod
  **/
  @Schema(description = "Code challenge method for PKCE")
  public CodeChallengeMethodEnum getCodeChallengeMethod() {
    return codeChallengeMethod;
  }

  public void setCodeChallengeMethod(CodeChallengeMethodEnum codeChallengeMethod) {
    this.codeChallengeMethod = codeChallengeMethod;
  }

  public OauthAuthBody state(String state) {
    this.state = state;
    return this;
  }

   /**
   * Opaque value to maintain state between request and callback
   * @return state
  **/
  @Schema(description = "Opaque value to maintain state between request and callback")
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }

  public OauthAuthBody prompt(String prompt) {
    this.prompt = prompt;
    return this;
  }

   /**
   * Prompt for the authorization request
   * @return prompt
  **/
  @Schema(description = "Prompt for the authorization request")
  public String getPrompt() {
    return prompt;
  }

  public void setPrompt(String prompt) {
    this.prompt = prompt;
  }

  public OauthAuthBody nonce(String nonce) {
    this.nonce = nonce;
    return this;
  }

   /**
   * Random value used to prevent replay attacks
   * @return nonce
  **/
  @Schema(description = "Random value used to prevent replay attacks")
  public String getNonce() {
    return nonce;
  }

  public void setNonce(String nonce) {
    this.nonce = nonce;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OauthAuthBody oauthAuthBody = (OauthAuthBody) o;
    return Objects.equals(this.participantId, oauthAuthBody.participantId) &&
        Objects.equals(this.endorsementDetails, oauthAuthBody.endorsementDetails) &&
        Objects.equals(this.authorizationCode, oauthAuthBody.authorizationCode) &&
        Objects.equals(this.responseType, oauthAuthBody.responseType) &&
        Objects.equals(this.scope, oauthAuthBody.scope) &&
        Objects.equals(this.tokenEndpoint, oauthAuthBody.tokenEndpoint) &&
        Objects.equals(this.codeChallenge, oauthAuthBody.codeChallenge) &&
        Objects.equals(this.codeChallengeMethod, oauthAuthBody.codeChallengeMethod) &&
        Objects.equals(this.state, oauthAuthBody.state) &&
        Objects.equals(this.prompt, oauthAuthBody.prompt) &&
        Objects.equals(this.nonce, oauthAuthBody.nonce);
  }

  @Override
  public int hashCode() {
    return Objects.hash(participantId, endorsementDetails, authorizationCode, responseType, scope, tokenEndpoint, codeChallenge, codeChallengeMethod, state, prompt, nonce);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OauthAuthBody {\n");
    
    sb.append("    participantId: ").append(toIndentedString(participantId)).append("\n");
    sb.append("    endorsementDetails: ").append(toIndentedString(endorsementDetails)).append("\n");
    sb.append("    authorizationCode: ").append(toIndentedString(authorizationCode)).append("\n");
    sb.append("    responseType: ").append(toIndentedString(responseType)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    tokenEndpoint: ").append(toIndentedString(tokenEndpoint)).append("\n");
    sb.append("    codeChallenge: ").append(toIndentedString(codeChallenge)).append("\n");
    sb.append("    codeChallengeMethod: ").append(toIndentedString(codeChallengeMethod)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    prompt: ").append(toIndentedString(prompt)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
