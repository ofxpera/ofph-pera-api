/*
 * OFxPERA API
 * Philippines Open Finance API Implementation for PERA
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * ConsentHistoryEvents
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-03-24T23:12:52.341191218Z[GMT]")

public class ConsentHistoryEvents {
  /**
   * Gets or Sets eventType
   */
  @JsonAdapter(EventTypeEnum.Adapter.class)
  public enum EventTypeEnum {
    @SerializedName("created")
    CREATED("created"),
    @SerializedName("updated")
    UPDATED("updated"),
    @SerializedName("suspended")
    SUSPENDED("suspended"),
    @SerializedName("resumed")
    RESUMED("resumed"),
    @SerializedName("revoked")
    REVOKED("revoked"),
    @SerializedName("expired")
    EXPIRED("expired"),
    @SerializedName("extended")
    EXTENDED("extended");

    private String value;

    EventTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static EventTypeEnum fromValue(String input) {
      for (EventTypeEnum b : EventTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<EventTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public EventTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return EventTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("event_type")
  private EventTypeEnum eventType = null;

  @SerializedName("timestamp")
  private OffsetDateTime timestamp = null;

  @SerializedName("actor")
  private String actor = null;

  @SerializedName("details")
  private Object details = null;

  @SerializedName("previous_state")
  private Object previousState = null;

  @SerializedName("new_state")
  private Object newState = null;

  public ConsentHistoryEvents eventType(EventTypeEnum eventType) {
    this.eventType = eventType;
    return this;
  }

   /**
   * Get eventType
   * @return eventType
  **/
  @Schema(required = true, description = "")
  public EventTypeEnum getEventType() {
    return eventType;
  }

  public void setEventType(EventTypeEnum eventType) {
    this.eventType = eventType;
  }

  public ConsentHistoryEvents timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @Schema(required = true, description = "")
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }

  public ConsentHistoryEvents actor(String actor) {
    this.actor = actor;
    return this;
  }

   /**
   * The entity that performed the action (e.g., user_id, system)
   * @return actor
  **/
  @Schema(required = true, description = "The entity that performed the action (e.g., user_id, system)")
  public String getActor() {
    return actor;
  }

  public void setActor(String actor) {
    this.actor = actor;
  }

  public ConsentHistoryEvents details(Object details) {
    this.details = details;
    return this;
  }

   /**
   * Additional event-specific details
   * @return details
  **/
  @Schema(description = "Additional event-specific details")
  public Object getDetails() {
    return details;
  }

  public void setDetails(Object details) {
    this.details = details;
  }

  public ConsentHistoryEvents previousState(Object previousState) {
    this.previousState = previousState;
    return this;
  }

   /**
   * State before the change
   * @return previousState
  **/
  @Schema(description = "State before the change")
  public Object getPreviousState() {
    return previousState;
  }

  public void setPreviousState(Object previousState) {
    this.previousState = previousState;
  }

  public ConsentHistoryEvents newState(Object newState) {
    this.newState = newState;
    return this;
  }

   /**
   * State after the change
   * @return newState
  **/
  @Schema(description = "State after the change")
  public Object getNewState() {
    return newState;
  }

  public void setNewState(Object newState) {
    this.newState = newState;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsentHistoryEvents consentHistoryEvents = (ConsentHistoryEvents) o;
    return Objects.equals(this.eventType, consentHistoryEvents.eventType) &&
        Objects.equals(this.timestamp, consentHistoryEvents.timestamp) &&
        Objects.equals(this.actor, consentHistoryEvents.actor) &&
        Objects.equals(this.details, consentHistoryEvents.details) &&
        Objects.equals(this.previousState, consentHistoryEvents.previousState) &&
        Objects.equals(this.newState, consentHistoryEvents.newState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventType, timestamp, actor, details, previousState, newState);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsentHistoryEvents {\n");
    
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    actor: ").append(toIndentedString(actor)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    previousState: ").append(toIndentedString(previousState)).append("\n");
    sb.append("    newState: ").append(toIndentedString(newState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
