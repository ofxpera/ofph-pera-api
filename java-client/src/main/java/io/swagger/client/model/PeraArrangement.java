/*
 * OFxPERA API
 * Philippines Open Finance API Implementation for PERA
 *
 * OpenAPI spec version: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.PeraAccount;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * PeraArrangement
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-03-03T23:36:15.658195047Z[GMT]")

public class PeraArrangement {
  @SerializedName("id")
  private String id = null;

  @SerializedName("admin_id")
  private String adminId = null;

  @SerializedName("customer_id")
  private String customerId = null;

  @SerializedName("sub")
  private String sub = null;

  @SerializedName("consent_id")
  private String consentId = null;

  /**
   * Current status of the PERA arrangement
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    @SerializedName("ACTIVE")
    ACTIVE("ACTIVE"),
    @SerializedName("SUSPENDED")
    SUSPENDED("SUSPENDED"),
    @SerializedName("CLOSED")
    CLOSED("CLOSED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("creation_date")
  private OffsetDateTime creationDate = null;

  @SerializedName("account")
  private PeraAccount account = null;

  public PeraArrangement id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Generated by the PERA admin, this is the unique identifier for the PERA arrangement
   * @return id
  **/
  @Schema(required = true, description = "Generated by the PERA admin, this is the unique identifier for the PERA arrangement")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public PeraArrangement adminId(String adminId) {
    this.adminId = adminId;
    return this;
  }

   /**
   * Participant Identifier of the PERA Administrator managing this arrangement
   * @return adminId
  **/
  @Schema(required = true, description = "Participant Identifier of the PERA Administrator managing this arrangement")
  public String getAdminId() {
    return adminId;
  }

  public void setAdminId(String adminId) {
    this.adminId = adminId;
  }

  public PeraArrangement customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

   /**
   * PERA Administrator&#x27;s unique identifier of the customer who owns the PERA arrangement
   * @return customerId
  **/
  @Schema(required = true, description = "PERA Administrator's unique identifier of the customer who owns the PERA arrangement")
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }

  public PeraArrangement sub(String sub) {
    this.sub = sub;
    return this;
  }

   /**
   * Subject – FI&#x27;s unique identifier for the End-User
   * @return sub
  **/
  @Schema(required = true, description = "Subject – FI's unique identifier for the End-User")
  public String getSub() {
    return sub;
  }

  public void setSub(String sub) {
    this.sub = sub;
  }

  public PeraArrangement consentId(String consentId) {
    this.consentId = consentId;
    return this;
  }

   /**
   * Unique identifier of the consent provided by the Customer to the FI
   * @return consentId
  **/
  @Schema(required = true, description = "Unique identifier of the consent provided by the Customer to the FI")
  public String getConsentId() {
    return consentId;
  }

  public void setConsentId(String consentId) {
    this.consentId = consentId;
  }

  public PeraArrangement status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Current status of the PERA arrangement
   * @return status
  **/
  @Schema(required = true, description = "Current status of the PERA arrangement")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public PeraArrangement creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

   /**
   * Date and time when the PERA arrangement was created
   * @return creationDate
  **/
  @Schema(required = true, description = "Date and time when the PERA arrangement was created")
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }

  public PeraArrangement account(PeraAccount account) {
    this.account = account;
    return this;
  }

   /**
   * Get account
   * @return account
  **/
  @Schema(description = "")
  public PeraAccount getAccount() {
    return account;
  }

  public void setAccount(PeraAccount account) {
    this.account = account;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PeraArrangement peraArrangement = (PeraArrangement) o;
    return Objects.equals(this.id, peraArrangement.id) &&
        Objects.equals(this.adminId, peraArrangement.adminId) &&
        Objects.equals(this.customerId, peraArrangement.customerId) &&
        Objects.equals(this.sub, peraArrangement.sub) &&
        Objects.equals(this.consentId, peraArrangement.consentId) &&
        Objects.equals(this.status, peraArrangement.status) &&
        Objects.equals(this.creationDate, peraArrangement.creationDate) &&
        Objects.equals(this.account, peraArrangement.account);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, adminId, customerId, sub, consentId, status, creationDate, account);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PeraArrangement {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    adminId: ").append(toIndentedString(adminId)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    sub: ").append(toIndentedString(sub)).append("\n");
    sb.append("    consentId: ").append(toIndentedString(consentId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
