/*
 * OFxPERA API
 * Philippines Open Finance API Implementation for PERA
 *
 * OpenAPI spec version: 1.0.3-Draft
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.InlineResponse201;
import io.swagger.client.model.PeraArrangement;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PeraApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public PeraApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PeraApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for getArrangementStatus
     * @param arrangementId The ID of the PERA Arrangement (required)
     * @param authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;signedJWT&gt;&#x27;. the token is a signed JWT issued by the Financial Institution.  JWT carries the following payload.  ** JWT Header ** - &#x60;alg&#x60; (string) &#x60;*required&#x60; - Must be &#x60;RS256&#x60;. The algorithm used to sign the JWT  - &#x60;type&#x60; (string) &#x60;*required&#x60; - Must be &#x60;JWT&#x60;. The type of the token - &#x60;kid&#x60; (string) &#x60;*required&#x60; - The Key ID used to identify the signing key.  ** JWT Claims **  - &#x60;jti&#x60; (string) &#x60;*Required&#x60;: Unique identifier for the JWT, usually UUID, used to prevent    replay attacks         - &#x60;sub&#x60; (string) &#x60;*required&#x60;: Participant Identifier of the Financial Institution.  - &#x60;aud&#x60; (string) &#x60;*required&#x60;: must be &#x27;get-ofxpera-arrangement&#x27; - &#x60;iat&#x60; (integer)&#x60;*Required&#x60;: Issued-at time (UNIX timestamp) - &#x60;exp&#x60; (integer)&#x60;*Required&#x60;: Expiration time (UNIX timestamp) - &#x60;arrangement-id&#x60; (string) &#x60;*required&#x60;: The unique identifier for the Consent Arrangement  (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getArrangementStatusCall(String arrangementId, String authorization, Integer xV, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ofxpera/arrangements/{arrangement_id}"
            .replaceAll("\\{" + "arrangement_id" + "\\}", apiClient.escapeString(arrangementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xV != null)
        localVarHeaderParams.put("x-v", apiClient.parameterToString(xV));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/jose", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SignedJWT" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getArrangementStatusValidateBeforeCall(String arrangementId, String authorization, Integer xV, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'arrangementId' is set
        if (arrangementId == null) {
            throw new ApiException("Missing the required parameter 'arrangementId' when calling getArrangementStatus(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getArrangementStatus(Async)");
        }
        // verify the required parameter 'xV' is set
        if (xV == null) {
            throw new ApiException("Missing the required parameter 'xV' when calling getArrangementStatus(Async)");
        }
        // verify the required parameter 'xFapiInteractionId' is set
        if (xFapiInteractionId == null) {
            throw new ApiException("Missing the required parameter 'xFapiInteractionId' when calling getArrangementStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getArrangementStatusCall(arrangementId, authorization, xV, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * [PHASE 1] Get the status of a PERA arrangement
     * API that allows FIs to retrieve the status of one or more PERA Arrangements
     * @param arrangementId The ID of the PERA Arrangement (required)
     * @param authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;signedJWT&gt;&#x27;. the token is a signed JWT issued by the Financial Institution.  JWT carries the following payload.  ** JWT Header ** - &#x60;alg&#x60; (string) &#x60;*required&#x60; - Must be &#x60;RS256&#x60;. The algorithm used to sign the JWT  - &#x60;type&#x60; (string) &#x60;*required&#x60; - Must be &#x60;JWT&#x60;. The type of the token - &#x60;kid&#x60; (string) &#x60;*required&#x60; - The Key ID used to identify the signing key.  ** JWT Claims **  - &#x60;jti&#x60; (string) &#x60;*Required&#x60;: Unique identifier for the JWT, usually UUID, used to prevent    replay attacks         - &#x60;sub&#x60; (string) &#x60;*required&#x60;: Participant Identifier of the Financial Institution.  - &#x60;aud&#x60; (string) &#x60;*required&#x60;: must be &#x27;get-ofxpera-arrangement&#x27; - &#x60;iat&#x60; (integer)&#x60;*Required&#x60;: Issued-at time (UNIX timestamp) - &#x60;exp&#x60; (integer)&#x60;*Required&#x60;: Expiration time (UNIX timestamp) - &#x60;arrangement-id&#x60; (string) &#x60;*required&#x60;: The unique identifier for the Consent Arrangement  (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (required)
     * @return PeraArrangement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PeraArrangement getArrangementStatus(String arrangementId, String authorization, Integer xV, UUID xFapiInteractionId) throws ApiException {
        ApiResponse<PeraArrangement> resp = getArrangementStatusWithHttpInfo(arrangementId, authorization, xV, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * [PHASE 1] Get the status of a PERA arrangement
     * API that allows FIs to retrieve the status of one or more PERA Arrangements
     * @param arrangementId The ID of the PERA Arrangement (required)
     * @param authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;signedJWT&gt;&#x27;. the token is a signed JWT issued by the Financial Institution.  JWT carries the following payload.  ** JWT Header ** - &#x60;alg&#x60; (string) &#x60;*required&#x60; - Must be &#x60;RS256&#x60;. The algorithm used to sign the JWT  - &#x60;type&#x60; (string) &#x60;*required&#x60; - Must be &#x60;JWT&#x60;. The type of the token - &#x60;kid&#x60; (string) &#x60;*required&#x60; - The Key ID used to identify the signing key.  ** JWT Claims **  - &#x60;jti&#x60; (string) &#x60;*Required&#x60;: Unique identifier for the JWT, usually UUID, used to prevent    replay attacks         - &#x60;sub&#x60; (string) &#x60;*required&#x60;: Participant Identifier of the Financial Institution.  - &#x60;aud&#x60; (string) &#x60;*required&#x60;: must be &#x27;get-ofxpera-arrangement&#x27; - &#x60;iat&#x60; (integer)&#x60;*Required&#x60;: Issued-at time (UNIX timestamp) - &#x60;exp&#x60; (integer)&#x60;*Required&#x60;: Expiration time (UNIX timestamp) - &#x60;arrangement-id&#x60; (string) &#x60;*required&#x60;: The unique identifier for the Consent Arrangement  (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (required)
     * @return ApiResponse&lt;PeraArrangement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PeraArrangement> getArrangementStatusWithHttpInfo(String arrangementId, String authorization, Integer xV, UUID xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = getArrangementStatusValidateBeforeCall(arrangementId, authorization, xV, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<PeraArrangement>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [PHASE 1] Get the status of a PERA arrangement (asynchronously)
     * API that allows FIs to retrieve the status of one or more PERA Arrangements
     * @param arrangementId The ID of the PERA Arrangement (required)
     * @param authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;signedJWT&gt;&#x27;. the token is a signed JWT issued by the Financial Institution.  JWT carries the following payload.  ** JWT Header ** - &#x60;alg&#x60; (string) &#x60;*required&#x60; - Must be &#x60;RS256&#x60;. The algorithm used to sign the JWT  - &#x60;type&#x60; (string) &#x60;*required&#x60; - Must be &#x60;JWT&#x60;. The type of the token - &#x60;kid&#x60; (string) &#x60;*required&#x60; - The Key ID used to identify the signing key.  ** JWT Claims **  - &#x60;jti&#x60; (string) &#x60;*Required&#x60;: Unique identifier for the JWT, usually UUID, used to prevent    replay attacks         - &#x60;sub&#x60; (string) &#x60;*required&#x60;: Participant Identifier of the Financial Institution.  - &#x60;aud&#x60; (string) &#x60;*required&#x60;: must be &#x27;get-ofxpera-arrangement&#x27; - &#x60;iat&#x60; (integer)&#x60;*Required&#x60;: Issued-at time (UNIX timestamp) - &#x60;exp&#x60; (integer)&#x60;*Required&#x60;: Expiration time (UNIX timestamp) - &#x60;arrangement-id&#x60; (string) &#x60;*required&#x60;: The unique identifier for the Consent Arrangement  (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getArrangementStatusAsync(String arrangementId, String authorization, Integer xV, UUID xFapiInteractionId, final ApiCallback<PeraArrangement> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getArrangementStatusValidateBeforeCall(arrangementId, authorization, xV, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PeraArrangement>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for peraArrangementRegistration
     * @param body Entire JSON payload must be signed with &#x60;JWS (JSON web Signature)&#x60; and encrypted using &#x60;JWE (JSON Web Encryption)&#x60;. JWT carries the following payload. (required)
     * @param authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;signedJWT&gt;&#x27;. the token is a signed JWT issued by the PERA Admin.  JWT carries the following payload.  ** JWT Header ** - &#x60;alg&#x60; (string) &#x60;*required&#x60; - Must be &#x60;RS256&#x60;. The algorithm used to sign the JWT  - &#x60;type&#x60; (string) &#x60;*required&#x60; - Must be &#x60;JWT&#x60;. The type of the token - &#x60;kid&#x60; (string) &#x60;*required&#x60; - The Key ID used to identify the signing key.  ** JWT Claims **  - &#x60;jti&#x60; (string) &#x60;*Required&#x60;: Unique identifier for the JWT, usually UUID, used to prevent replay attacks  - &#x60;sub&#x60; (string) &#x60;*required&#x60;: The client id used in authorization request. - &#x60;iss&#x60; (string) &#x60;*required&#x60;: The client id used in authorization request.  - &#x60;aud&#x60; (string) &#x60;*required&#x60;: Audience (the authorization server token URL).  - &#x60;iat&#x60; (integer)&#x60;*Required&#x60;: Issued-at time (UNIX timestamp) - &#x60;exp&#x60; (integer)&#x60;*Required&#x60;: Expiration time (UNIX timestamp)  (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call peraArrangementRegistrationCall(PeraArrangement body, String authorization, Integer xV, UUID xFapiInteractionId, UUID xIdempotencyKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ofxpera/arrangements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xV != null)
        localVarHeaderParams.put("x-v", apiClient.parameterToString(xV));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (xIdempotencyKey != null)
        localVarHeaderParams.put("x-idempotency-key", apiClient.parameterToString(xIdempotencyKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/jose", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/jose"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SignedJWT" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call peraArrangementRegistrationValidateBeforeCall(PeraArrangement body, String authorization, Integer xV, UUID xFapiInteractionId, UUID xIdempotencyKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling peraArrangementRegistration(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling peraArrangementRegistration(Async)");
        }
        // verify the required parameter 'xV' is set
        if (xV == null) {
            throw new ApiException("Missing the required parameter 'xV' when calling peraArrangementRegistration(Async)");
        }
        // verify the required parameter 'xFapiInteractionId' is set
        if (xFapiInteractionId == null) {
            throw new ApiException("Missing the required parameter 'xFapiInteractionId' when calling peraArrangementRegistration(Async)");
        }
        // verify the required parameter 'xIdempotencyKey' is set
        if (xIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xIdempotencyKey' when calling peraArrangementRegistration(Async)");
        }
        
        com.squareup.okhttp.Call call = peraArrangementRegistrationCall(body, authorization, xV, xFapiInteractionId, xIdempotencyKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * [PHASE 1] Registers the result of a PERA account opening
     * API that allows PERA Admins to notify the Financial Institution about the result of a PERA account opening
     * @param body Entire JSON payload must be signed with &#x60;JWS (JSON web Signature)&#x60; and encrypted using &#x60;JWE (JSON Web Encryption)&#x60;. JWT carries the following payload. (required)
     * @param authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;signedJWT&gt;&#x27;. the token is a signed JWT issued by the PERA Admin.  JWT carries the following payload.  ** JWT Header ** - &#x60;alg&#x60; (string) &#x60;*required&#x60; - Must be &#x60;RS256&#x60;. The algorithm used to sign the JWT  - &#x60;type&#x60; (string) &#x60;*required&#x60; - Must be &#x60;JWT&#x60;. The type of the token - &#x60;kid&#x60; (string) &#x60;*required&#x60; - The Key ID used to identify the signing key.  ** JWT Claims **  - &#x60;jti&#x60; (string) &#x60;*Required&#x60;: Unique identifier for the JWT, usually UUID, used to prevent replay attacks  - &#x60;sub&#x60; (string) &#x60;*required&#x60;: The client id used in authorization request. - &#x60;iss&#x60; (string) &#x60;*required&#x60;: The client id used in authorization request.  - &#x60;aud&#x60; (string) &#x60;*required&#x60;: Audience (the authorization server token URL).  - &#x60;iat&#x60; (integer)&#x60;*Required&#x60;: Issued-at time (UNIX timestamp) - &#x60;exp&#x60; (integer)&#x60;*Required&#x60;: Expiration time (UNIX timestamp)  (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @return InlineResponse201
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse201 peraArrangementRegistration(PeraArrangement body, String authorization, Integer xV, UUID xFapiInteractionId, UUID xIdempotencyKey) throws ApiException {
        ApiResponse<InlineResponse201> resp = peraArrangementRegistrationWithHttpInfo(body, authorization, xV, xFapiInteractionId, xIdempotencyKey);
        return resp.getData();
    }

    /**
     * [PHASE 1] Registers the result of a PERA account opening
     * API that allows PERA Admins to notify the Financial Institution about the result of a PERA account opening
     * @param body Entire JSON payload must be signed with &#x60;JWS (JSON web Signature)&#x60; and encrypted using &#x60;JWE (JSON Web Encryption)&#x60;. JWT carries the following payload. (required)
     * @param authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;signedJWT&gt;&#x27;. the token is a signed JWT issued by the PERA Admin.  JWT carries the following payload.  ** JWT Header ** - &#x60;alg&#x60; (string) &#x60;*required&#x60; - Must be &#x60;RS256&#x60;. The algorithm used to sign the JWT  - &#x60;type&#x60; (string) &#x60;*required&#x60; - Must be &#x60;JWT&#x60;. The type of the token - &#x60;kid&#x60; (string) &#x60;*required&#x60; - The Key ID used to identify the signing key.  ** JWT Claims **  - &#x60;jti&#x60; (string) &#x60;*Required&#x60;: Unique identifier for the JWT, usually UUID, used to prevent replay attacks  - &#x60;sub&#x60; (string) &#x60;*required&#x60;: The client id used in authorization request. - &#x60;iss&#x60; (string) &#x60;*required&#x60;: The client id used in authorization request.  - &#x60;aud&#x60; (string) &#x60;*required&#x60;: Audience (the authorization server token URL).  - &#x60;iat&#x60; (integer)&#x60;*Required&#x60;: Issued-at time (UNIX timestamp) - &#x60;exp&#x60; (integer)&#x60;*Required&#x60;: Expiration time (UNIX timestamp)  (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @return ApiResponse&lt;InlineResponse201&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse201> peraArrangementRegistrationWithHttpInfo(PeraArrangement body, String authorization, Integer xV, UUID xFapiInteractionId, UUID xIdempotencyKey) throws ApiException {
        com.squareup.okhttp.Call call = peraArrangementRegistrationValidateBeforeCall(body, authorization, xV, xFapiInteractionId, xIdempotencyKey, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse201>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [PHASE 1] Registers the result of a PERA account opening (asynchronously)
     * API that allows PERA Admins to notify the Financial Institution about the result of a PERA account opening
     * @param body Entire JSON payload must be signed with &#x60;JWS (JSON web Signature)&#x60; and encrypted using &#x60;JWE (JSON Web Encryption)&#x60;. JWT carries the following payload. (required)
     * @param authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;signedJWT&gt;&#x27;. the token is a signed JWT issued by the PERA Admin.  JWT carries the following payload.  ** JWT Header ** - &#x60;alg&#x60; (string) &#x60;*required&#x60; - Must be &#x60;RS256&#x60;. The algorithm used to sign the JWT  - &#x60;type&#x60; (string) &#x60;*required&#x60; - Must be &#x60;JWT&#x60;. The type of the token - &#x60;kid&#x60; (string) &#x60;*required&#x60; - The Key ID used to identify the signing key.  ** JWT Claims **  - &#x60;jti&#x60; (string) &#x60;*Required&#x60;: Unique identifier for the JWT, usually UUID, used to prevent replay attacks  - &#x60;sub&#x60; (string) &#x60;*required&#x60;: The client id used in authorization request. - &#x60;iss&#x60; (string) &#x60;*required&#x60;: The client id used in authorization request.  - &#x60;aud&#x60; (string) &#x60;*required&#x60;: Audience (the authorization server token URL).  - &#x60;iat&#x60; (integer)&#x60;*Required&#x60;: Issued-at time (UNIX timestamp) - &#x60;exp&#x60; (integer)&#x60;*Required&#x60;: Expiration time (UNIX timestamp)  (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call peraArrangementRegistrationAsync(PeraArrangement body, String authorization, Integer xV, UUID xFapiInteractionId, UUID xIdempotencyKey, final ApiCallback<InlineResponse201> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = peraArrangementRegistrationValidateBeforeCall(body, authorization, xV, xFapiInteractionId, xIdempotencyKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse201>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
