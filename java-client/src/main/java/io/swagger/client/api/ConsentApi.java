/*
 * OFxPERA API
 * Philippines Open Finance API Implementation for PERA
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ArrangementsBulkupdateBody;
import io.swagger.client.model.BulkConsentRequest;
import io.swagger.client.model.BulkConsentResponse;
import io.swagger.client.model.ConsentArrangementRequest;
import io.swagger.client.model.ConsentArrangementResponse;
import io.swagger.client.model.ConsentDashboard;
import io.swagger.client.model.ConsentExtensionRequest;
import io.swagger.client.model.ConsentHistory;
import io.swagger.client.model.ConsentStatusUpdate;
import io.swagger.client.model.ConsentTemplate;
import io.swagger.client.model.Error;
import io.swagger.client.model.InlineResponse2003;
import io.swagger.client.model.InlineResponse2004;
import org.threeten.bp.OffsetDateTime;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConsentApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public ConsentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConsentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for bulkUpdateCustomerConsents
     * @param body  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param customerId The customer&#x27;s unique identifier (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bulkUpdateCustomerConsentsCall(ArrangementsBulkupdateBody body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String customerId, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/consent/customers/{customer_id}/arrangements/bulk-update"
            .replaceAll("\\{" + "customer_id" + "\\}", apiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (participantId != null)
        localVarHeaderParams.put("participant-id", apiClient.parameterToString(participantId));
        if (xV != null)
        localVarHeaderParams.put("x-v", apiClient.parameterToString(xV));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (xFapiAuthDate != null)
        localVarHeaderParams.put("x-fapi-auth-date", apiClient.parameterToString(xFapiAuthDate));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xClientHeaders != null)
        localVarHeaderParams.put("x-client-headers", apiClient.parameterToString(xClientHeaders));
        if (xClientUserAgent != null)
        localVarHeaderParams.put("x-client-user-agent", apiClient.parameterToString(xClientUserAgent));
        if (xIdempotencyKey != null)
        localVarHeaderParams.put("x-idempotency-key", apiClient.parameterToString(xIdempotencyKey));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SignedJWT" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bulkUpdateCustomerConsentsValidateBeforeCall(ArrangementsBulkupdateBody body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String customerId, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling bulkUpdateCustomerConsents(Async)");
        }
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling bulkUpdateCustomerConsents(Async)");
        }
        // verify the required parameter 'xV' is set
        if (xV == null) {
            throw new ApiException("Missing the required parameter 'xV' when calling bulkUpdateCustomerConsents(Async)");
        }
        // verify the required parameter 'xFapiAuthDate' is set
        if (xFapiAuthDate == null) {
            throw new ApiException("Missing the required parameter 'xFapiAuthDate' when calling bulkUpdateCustomerConsents(Async)");
        }
        // verify the required parameter 'xFapiCustomerIpAddress' is set
        if (xFapiCustomerIpAddress == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerIpAddress' when calling bulkUpdateCustomerConsents(Async)");
        }
        // verify the required parameter 'xClientHeaders' is set
        if (xClientHeaders == null) {
            throw new ApiException("Missing the required parameter 'xClientHeaders' when calling bulkUpdateCustomerConsents(Async)");
        }
        // verify the required parameter 'xClientUserAgent' is set
        if (xClientUserAgent == null) {
            throw new ApiException("Missing the required parameter 'xClientUserAgent' when calling bulkUpdateCustomerConsents(Async)");
        }
        // verify the required parameter 'xIdempotencyKey' is set
        if (xIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xIdempotencyKey' when calling bulkUpdateCustomerConsents(Async)");
        }
        // verify the required parameter 'xFapiCustomerLastLoggedTime' is set
        if (xFapiCustomerLastLoggedTime == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerLastLoggedTime' when calling bulkUpdateCustomerConsents(Async)");
        }
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling bulkUpdateCustomerConsents(Async)");
        }
        
        com.squareup.okhttp.Call call = bulkUpdateCustomerConsentsCall(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, customerId, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Bulk update customer&#x27;s consent arrangements
     * Update multiple consent arrangements for a specific customer in a single request. Based on: - Australia CDR Bulk Consumer Update - Korea MyData Consent Management 
     * @param body  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param customerId The customer&#x27;s unique identifier (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return InlineResponse2004
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2004 bulkUpdateCustomerConsents(ArrangementsBulkupdateBody body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String customerId, UUID xFapiInteractionId) throws ApiException {
        ApiResponse<InlineResponse2004> resp = bulkUpdateCustomerConsentsWithHttpInfo(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, customerId, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Bulk update customer&#x27;s consent arrangements
     * Update multiple consent arrangements for a specific customer in a single request. Based on: - Australia CDR Bulk Consumer Update - Korea MyData Consent Management 
     * @param body  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param customerId The customer&#x27;s unique identifier (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2004> bulkUpdateCustomerConsentsWithHttpInfo(ArrangementsBulkupdateBody body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String customerId, UUID xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = bulkUpdateCustomerConsentsValidateBeforeCall(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, customerId, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk update customer&#x27;s consent arrangements (asynchronously)
     * Update multiple consent arrangements for a specific customer in a single request. Based on: - Australia CDR Bulk Consumer Update - Korea MyData Consent Management 
     * @param body  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param customerId The customer&#x27;s unique identifier (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bulkUpdateCustomerConsentsAsync(ArrangementsBulkupdateBody body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String customerId, UUID xFapiInteractionId, final ApiCallback<InlineResponse2004> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bulkUpdateCustomerConsentsValidateBeforeCall(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, customerId, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createBulkConsent
     * @param body  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBulkConsentCall(BulkConsentRequest body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/consent/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (participantId != null)
        localVarHeaderParams.put("participant-id", apiClient.parameterToString(participantId));
        if (xV != null)
        localVarHeaderParams.put("x-v", apiClient.parameterToString(xV));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (xFapiAuthDate != null)
        localVarHeaderParams.put("x-fapi-auth-date", apiClient.parameterToString(xFapiAuthDate));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xClientHeaders != null)
        localVarHeaderParams.put("x-client-headers", apiClient.parameterToString(xClientHeaders));
        if (xClientUserAgent != null)
        localVarHeaderParams.put("x-client-user-agent", apiClient.parameterToString(xClientUserAgent));
        if (xIdempotencyKey != null)
        localVarHeaderParams.put("x-idempotency-key", apiClient.parameterToString(xIdempotencyKey));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SignedJWT" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBulkConsentValidateBeforeCall(BulkConsentRequest body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createBulkConsent(Async)");
        }
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling createBulkConsent(Async)");
        }
        // verify the required parameter 'xV' is set
        if (xV == null) {
            throw new ApiException("Missing the required parameter 'xV' when calling createBulkConsent(Async)");
        }
        // verify the required parameter 'xFapiAuthDate' is set
        if (xFapiAuthDate == null) {
            throw new ApiException("Missing the required parameter 'xFapiAuthDate' when calling createBulkConsent(Async)");
        }
        // verify the required parameter 'xFapiCustomerIpAddress' is set
        if (xFapiCustomerIpAddress == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerIpAddress' when calling createBulkConsent(Async)");
        }
        // verify the required parameter 'xClientHeaders' is set
        if (xClientHeaders == null) {
            throw new ApiException("Missing the required parameter 'xClientHeaders' when calling createBulkConsent(Async)");
        }
        // verify the required parameter 'xClientUserAgent' is set
        if (xClientUserAgent == null) {
            throw new ApiException("Missing the required parameter 'xClientUserAgent' when calling createBulkConsent(Async)");
        }
        // verify the required parameter 'xIdempotencyKey' is set
        if (xIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xIdempotencyKey' when calling createBulkConsent(Async)");
        }
        // verify the required parameter 'xFapiCustomerLastLoggedTime' is set
        if (xFapiCustomerLastLoggedTime == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerLastLoggedTime' when calling createBulkConsent(Async)");
        }
        
        com.squareup.okhttp.Call call = createBulkConsentCall(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create bulk consent arrangements
     * Create multiple consent arrangements in a single request. Based on: - Korea MyData Bulk Consent API - Singapore SGFinDex Multi-Institution Consent 
     * @param body  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return BulkConsentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BulkConsentResponse createBulkConsent(BulkConsentRequest body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId) throws ApiException {
        ApiResponse<BulkConsentResponse> resp = createBulkConsentWithHttpInfo(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Create bulk consent arrangements
     * Create multiple consent arrangements in a single request. Based on: - Korea MyData Bulk Consent API - Singapore SGFinDex Multi-Institution Consent 
     * @param body  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ApiResponse&lt;BulkConsentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BulkConsentResponse> createBulkConsentWithHttpInfo(BulkConsentRequest body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = createBulkConsentValidateBeforeCall(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<BulkConsentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create bulk consent arrangements (asynchronously)
     * Create multiple consent arrangements in a single request. Based on: - Korea MyData Bulk Consent API - Singapore SGFinDex Multi-Institution Consent 
     * @param body  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBulkConsentAsync(BulkConsentRequest body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ApiCallback<BulkConsentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBulkConsentValidateBeforeCall(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BulkConsentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createConsentArrangement
     * @param body  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createConsentArrangementCall(ConsentArrangementRequest body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/consent/arrangements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (participantId != null)
        localVarHeaderParams.put("participant-id", apiClient.parameterToString(participantId));
        if (xV != null)
        localVarHeaderParams.put("x-v", apiClient.parameterToString(xV));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (xFapiAuthDate != null)
        localVarHeaderParams.put("x-fapi-auth-date", apiClient.parameterToString(xFapiAuthDate));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xClientHeaders != null)
        localVarHeaderParams.put("x-client-headers", apiClient.parameterToString(xClientHeaders));
        if (xClientUserAgent != null)
        localVarHeaderParams.put("x-client-user-agent", apiClient.parameterToString(xClientUserAgent));
        if (xIdempotencyKey != null)
        localVarHeaderParams.put("x-idempotency-key", apiClient.parameterToString(xIdempotencyKey));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SignedJWT" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createConsentArrangementValidateBeforeCall(ConsentArrangementRequest body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createConsentArrangement(Async)");
        }
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling createConsentArrangement(Async)");
        }
        // verify the required parameter 'xV' is set
        if (xV == null) {
            throw new ApiException("Missing the required parameter 'xV' when calling createConsentArrangement(Async)");
        }
        // verify the required parameter 'xFapiAuthDate' is set
        if (xFapiAuthDate == null) {
            throw new ApiException("Missing the required parameter 'xFapiAuthDate' when calling createConsentArrangement(Async)");
        }
        // verify the required parameter 'xFapiCustomerIpAddress' is set
        if (xFapiCustomerIpAddress == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerIpAddress' when calling createConsentArrangement(Async)");
        }
        // verify the required parameter 'xClientHeaders' is set
        if (xClientHeaders == null) {
            throw new ApiException("Missing the required parameter 'xClientHeaders' when calling createConsentArrangement(Async)");
        }
        // verify the required parameter 'xClientUserAgent' is set
        if (xClientUserAgent == null) {
            throw new ApiException("Missing the required parameter 'xClientUserAgent' when calling createConsentArrangement(Async)");
        }
        // verify the required parameter 'xIdempotencyKey' is set
        if (xIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xIdempotencyKey' when calling createConsentArrangement(Async)");
        }
        // verify the required parameter 'xFapiCustomerLastLoggedTime' is set
        if (xFapiCustomerLastLoggedTime == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerLastLoggedTime' when calling createConsentArrangement(Async)");
        }
        
        com.squareup.okhttp.Call call = createConsentArrangementCall(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a consent arrangement
     * Create a new consent arrangement between a data holder and data recipient. Based on: - UK Open Banking Consent API v3.1.10 - Australia CDR Consent Management Standards v1.14.0 - Singapore SGFinDex Consent Framework 
     * @param body  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ConsentArrangementResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConsentArrangementResponse createConsentArrangement(ConsentArrangementRequest body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId) throws ApiException {
        ApiResponse<ConsentArrangementResponse> resp = createConsentArrangementWithHttpInfo(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Create a consent arrangement
     * Create a new consent arrangement between a data holder and data recipient. Based on: - UK Open Banking Consent API v3.1.10 - Australia CDR Consent Management Standards v1.14.0 - Singapore SGFinDex Consent Framework 
     * @param body  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ApiResponse&lt;ConsentArrangementResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConsentArrangementResponse> createConsentArrangementWithHttpInfo(ConsentArrangementRequest body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = createConsentArrangementValidateBeforeCall(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<ConsentArrangementResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a consent arrangement (asynchronously)
     * Create a new consent arrangement between a data holder and data recipient. Based on: - UK Open Banking Consent API v3.1.10 - Australia CDR Consent Management Standards v1.14.0 - Singapore SGFinDex Consent Framework 
     * @param body  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createConsentArrangementAsync(ConsentArrangementRequest body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ApiCallback<ConsentArrangementResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createConsentArrangementValidateBeforeCall(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConsentArrangementResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for extendConsentDuration
     * @param body  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param arrangementId The ID of the consent arrangement (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call extendConsentDurationCall(ConsentExtensionRequest body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String arrangementId, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/consent/arrangements/{arrangement_id}/extend"
            .replaceAll("\\{" + "arrangement_id" + "\\}", apiClient.escapeString(arrangementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (participantId != null)
        localVarHeaderParams.put("participant-id", apiClient.parameterToString(participantId));
        if (xV != null)
        localVarHeaderParams.put("x-v", apiClient.parameterToString(xV));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (xFapiAuthDate != null)
        localVarHeaderParams.put("x-fapi-auth-date", apiClient.parameterToString(xFapiAuthDate));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xClientHeaders != null)
        localVarHeaderParams.put("x-client-headers", apiClient.parameterToString(xClientHeaders));
        if (xClientUserAgent != null)
        localVarHeaderParams.put("x-client-user-agent", apiClient.parameterToString(xClientUserAgent));
        if (xIdempotencyKey != null)
        localVarHeaderParams.put("x-idempotency-key", apiClient.parameterToString(xIdempotencyKey));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call extendConsentDurationValidateBeforeCall(ConsentExtensionRequest body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String arrangementId, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling extendConsentDuration(Async)");
        }
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling extendConsentDuration(Async)");
        }
        // verify the required parameter 'xV' is set
        if (xV == null) {
            throw new ApiException("Missing the required parameter 'xV' when calling extendConsentDuration(Async)");
        }
        // verify the required parameter 'xFapiAuthDate' is set
        if (xFapiAuthDate == null) {
            throw new ApiException("Missing the required parameter 'xFapiAuthDate' when calling extendConsentDuration(Async)");
        }
        // verify the required parameter 'xFapiCustomerIpAddress' is set
        if (xFapiCustomerIpAddress == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerIpAddress' when calling extendConsentDuration(Async)");
        }
        // verify the required parameter 'xClientHeaders' is set
        if (xClientHeaders == null) {
            throw new ApiException("Missing the required parameter 'xClientHeaders' when calling extendConsentDuration(Async)");
        }
        // verify the required parameter 'xClientUserAgent' is set
        if (xClientUserAgent == null) {
            throw new ApiException("Missing the required parameter 'xClientUserAgent' when calling extendConsentDuration(Async)");
        }
        // verify the required parameter 'xIdempotencyKey' is set
        if (xIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xIdempotencyKey' when calling extendConsentDuration(Async)");
        }
        // verify the required parameter 'xFapiCustomerLastLoggedTime' is set
        if (xFapiCustomerLastLoggedTime == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerLastLoggedTime' when calling extendConsentDuration(Async)");
        }
        // verify the required parameter 'arrangementId' is set
        if (arrangementId == null) {
            throw new ApiException("Missing the required parameter 'arrangementId' when calling extendConsentDuration(Async)");
        }
        
        com.squareup.okhttp.Call call = extendConsentDurationCall(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, arrangementId, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Extend consent arrangement duration
     * Extend the duration of an existing consent arrangement. Based on: - Australia CDR Consent Amendment - UK Open Banking Re-authentication 
     * @param body  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param arrangementId The ID of the consent arrangement (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ConsentArrangementResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConsentArrangementResponse extendConsentDuration(ConsentExtensionRequest body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String arrangementId, UUID xFapiInteractionId) throws ApiException {
        ApiResponse<ConsentArrangementResponse> resp = extendConsentDurationWithHttpInfo(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, arrangementId, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Extend consent arrangement duration
     * Extend the duration of an existing consent arrangement. Based on: - Australia CDR Consent Amendment - UK Open Banking Re-authentication 
     * @param body  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param arrangementId The ID of the consent arrangement (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ApiResponse&lt;ConsentArrangementResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConsentArrangementResponse> extendConsentDurationWithHttpInfo(ConsentExtensionRequest body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String arrangementId, UUID xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = extendConsentDurationValidateBeforeCall(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, arrangementId, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<ConsentArrangementResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extend consent arrangement duration (asynchronously)
     * Extend the duration of an existing consent arrangement. Based on: - Australia CDR Consent Amendment - UK Open Banking Re-authentication 
     * @param body  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param arrangementId The ID of the consent arrangement (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call extendConsentDurationAsync(ConsentExtensionRequest body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String arrangementId, UUID xFapiInteractionId, final ApiCallback<ConsentArrangementResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = extendConsentDurationValidateBeforeCall(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, arrangementId, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConsentArrangementResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConsentArrangement
     * @param arrangementId The ID of the consent arrangement (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConsentArrangementCall(String arrangementId, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/consent/arrangements/{arrangement_id}"
            .replaceAll("\\{" + "arrangement_id" + "\\}", apiClient.escapeString(arrangementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (participantId != null)
        localVarHeaderParams.put("participant-id", apiClient.parameterToString(participantId));
        if (xV != null)
        localVarHeaderParams.put("x-v", apiClient.parameterToString(xV));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (xFapiAuthDate != null)
        localVarHeaderParams.put("x-fapi-auth-date", apiClient.parameterToString(xFapiAuthDate));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xClientHeaders != null)
        localVarHeaderParams.put("x-client-headers", apiClient.parameterToString(xClientHeaders));
        if (xClientUserAgent != null)
        localVarHeaderParams.put("x-client-user-agent", apiClient.parameterToString(xClientUserAgent));
        if (xIdempotencyKey != null)
        localVarHeaderParams.put("x-idempotency-key", apiClient.parameterToString(xIdempotencyKey));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SignedJWT" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConsentArrangementValidateBeforeCall(String arrangementId, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'arrangementId' is set
        if (arrangementId == null) {
            throw new ApiException("Missing the required parameter 'arrangementId' when calling getConsentArrangement(Async)");
        }
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling getConsentArrangement(Async)");
        }
        // verify the required parameter 'xV' is set
        if (xV == null) {
            throw new ApiException("Missing the required parameter 'xV' when calling getConsentArrangement(Async)");
        }
        // verify the required parameter 'xFapiAuthDate' is set
        if (xFapiAuthDate == null) {
            throw new ApiException("Missing the required parameter 'xFapiAuthDate' when calling getConsentArrangement(Async)");
        }
        // verify the required parameter 'xFapiCustomerIpAddress' is set
        if (xFapiCustomerIpAddress == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerIpAddress' when calling getConsentArrangement(Async)");
        }
        // verify the required parameter 'xClientHeaders' is set
        if (xClientHeaders == null) {
            throw new ApiException("Missing the required parameter 'xClientHeaders' when calling getConsentArrangement(Async)");
        }
        // verify the required parameter 'xClientUserAgent' is set
        if (xClientUserAgent == null) {
            throw new ApiException("Missing the required parameter 'xClientUserAgent' when calling getConsentArrangement(Async)");
        }
        // verify the required parameter 'xIdempotencyKey' is set
        if (xIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xIdempotencyKey' when calling getConsentArrangement(Async)");
        }
        // verify the required parameter 'xFapiCustomerLastLoggedTime' is set
        if (xFapiCustomerLastLoggedTime == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerLastLoggedTime' when calling getConsentArrangement(Async)");
        }
        
        com.squareup.okhttp.Call call = getConsentArrangementCall(arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get consent arrangement details
     * Retrieve details of a specific consent arrangement. Based on: - UK Open Banking Account Access Consents API - Australia CDR Get Consent API 
     * @param arrangementId The ID of the consent arrangement (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ConsentArrangementResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConsentArrangementResponse getConsentArrangement(String arrangementId, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId) throws ApiException {
        ApiResponse<ConsentArrangementResponse> resp = getConsentArrangementWithHttpInfo(arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Get consent arrangement details
     * Retrieve details of a specific consent arrangement. Based on: - UK Open Banking Account Access Consents API - Australia CDR Get Consent API 
     * @param arrangementId The ID of the consent arrangement (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ApiResponse&lt;ConsentArrangementResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConsentArrangementResponse> getConsentArrangementWithHttpInfo(String arrangementId, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = getConsentArrangementValidateBeforeCall(arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<ConsentArrangementResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get consent arrangement details (asynchronously)
     * Retrieve details of a specific consent arrangement. Based on: - UK Open Banking Account Access Consents API - Australia CDR Get Consent API 
     * @param arrangementId The ID of the consent arrangement (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConsentArrangementAsync(String arrangementId, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ApiCallback<ConsentArrangementResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConsentArrangementValidateBeforeCall(arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConsentArrangementResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConsentHistory
     * @param arrangementId The ID of the consent arrangement (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConsentHistoryCall(String arrangementId, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/consent/arrangements/{arrangement_id}/history"
            .replaceAll("\\{" + "arrangement_id" + "\\}", apiClient.escapeString(arrangementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (participantId != null)
        localVarHeaderParams.put("participant-id", apiClient.parameterToString(participantId));
        if (xV != null)
        localVarHeaderParams.put("x-v", apiClient.parameterToString(xV));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (xFapiAuthDate != null)
        localVarHeaderParams.put("x-fapi-auth-date", apiClient.parameterToString(xFapiAuthDate));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xClientHeaders != null)
        localVarHeaderParams.put("x-client-headers", apiClient.parameterToString(xClientHeaders));
        if (xClientUserAgent != null)
        localVarHeaderParams.put("x-client-user-agent", apiClient.parameterToString(xClientUserAgent));
        if (xIdempotencyKey != null)
        localVarHeaderParams.put("x-idempotency-key", apiClient.parameterToString(xIdempotencyKey));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SignedJWT" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConsentHistoryValidateBeforeCall(String arrangementId, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'arrangementId' is set
        if (arrangementId == null) {
            throw new ApiException("Missing the required parameter 'arrangementId' when calling getConsentHistory(Async)");
        }
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling getConsentHistory(Async)");
        }
        // verify the required parameter 'xV' is set
        if (xV == null) {
            throw new ApiException("Missing the required parameter 'xV' when calling getConsentHistory(Async)");
        }
        // verify the required parameter 'xFapiAuthDate' is set
        if (xFapiAuthDate == null) {
            throw new ApiException("Missing the required parameter 'xFapiAuthDate' when calling getConsentHistory(Async)");
        }
        // verify the required parameter 'xFapiCustomerIpAddress' is set
        if (xFapiCustomerIpAddress == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerIpAddress' when calling getConsentHistory(Async)");
        }
        // verify the required parameter 'xClientHeaders' is set
        if (xClientHeaders == null) {
            throw new ApiException("Missing the required parameter 'xClientHeaders' when calling getConsentHistory(Async)");
        }
        // verify the required parameter 'xClientUserAgent' is set
        if (xClientUserAgent == null) {
            throw new ApiException("Missing the required parameter 'xClientUserAgent' when calling getConsentHistory(Async)");
        }
        // verify the required parameter 'xIdempotencyKey' is set
        if (xIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xIdempotencyKey' when calling getConsentHistory(Async)");
        }
        // verify the required parameter 'xFapiCustomerLastLoggedTime' is set
        if (xFapiCustomerLastLoggedTime == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerLastLoggedTime' when calling getConsentHistory(Async)");
        }
        
        com.squareup.okhttp.Call call = getConsentHistoryCall(arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get consent arrangement history
     * Retrieve the full history of changes to a consent arrangement. Based on: - Australia CDR Consent History API - UK Open Banking Consent Audit Requirements 
     * @param arrangementId The ID of the consent arrangement (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ConsentHistory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConsentHistory getConsentHistory(String arrangementId, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId) throws ApiException {
        ApiResponse<ConsentHistory> resp = getConsentHistoryWithHttpInfo(arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Get consent arrangement history
     * Retrieve the full history of changes to a consent arrangement. Based on: - Australia CDR Consent History API - UK Open Banking Consent Audit Requirements 
     * @param arrangementId The ID of the consent arrangement (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ApiResponse&lt;ConsentHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConsentHistory> getConsentHistoryWithHttpInfo(String arrangementId, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = getConsentHistoryValidateBeforeCall(arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<ConsentHistory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get consent arrangement history (asynchronously)
     * Retrieve the full history of changes to a consent arrangement. Based on: - Australia CDR Consent History API - UK Open Banking Consent Audit Requirements 
     * @param arrangementId The ID of the consent arrangement (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConsentHistoryAsync(String arrangementId, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ApiCallback<ConsentHistory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConsentHistoryValidateBeforeCall(arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConsentHistory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomerConsentDashboard
     * @param customerId The customer&#x27;s unique identifier (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomerConsentDashboardCall(String customerId, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/consent/customers/{customer_id}/dashboard"
            .replaceAll("\\{" + "customer_id" + "\\}", apiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (participantId != null)
        localVarHeaderParams.put("participant-id", apiClient.parameterToString(participantId));
        if (xV != null)
        localVarHeaderParams.put("x-v", apiClient.parameterToString(xV));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (xFapiAuthDate != null)
        localVarHeaderParams.put("x-fapi-auth-date", apiClient.parameterToString(xFapiAuthDate));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xClientHeaders != null)
        localVarHeaderParams.put("x-client-headers", apiClient.parameterToString(xClientHeaders));
        if (xClientUserAgent != null)
        localVarHeaderParams.put("x-client-user-agent", apiClient.parameterToString(xClientUserAgent));
        if (xIdempotencyKey != null)
        localVarHeaderParams.put("x-idempotency-key", apiClient.parameterToString(xIdempotencyKey));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SignedJWT" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomerConsentDashboardValidateBeforeCall(String customerId, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCustomerConsentDashboard(Async)");
        }
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling getCustomerConsentDashboard(Async)");
        }
        // verify the required parameter 'xV' is set
        if (xV == null) {
            throw new ApiException("Missing the required parameter 'xV' when calling getCustomerConsentDashboard(Async)");
        }
        // verify the required parameter 'xFapiAuthDate' is set
        if (xFapiAuthDate == null) {
            throw new ApiException("Missing the required parameter 'xFapiAuthDate' when calling getCustomerConsentDashboard(Async)");
        }
        // verify the required parameter 'xFapiCustomerIpAddress' is set
        if (xFapiCustomerIpAddress == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerIpAddress' when calling getCustomerConsentDashboard(Async)");
        }
        // verify the required parameter 'xClientHeaders' is set
        if (xClientHeaders == null) {
            throw new ApiException("Missing the required parameter 'xClientHeaders' when calling getCustomerConsentDashboard(Async)");
        }
        // verify the required parameter 'xClientUserAgent' is set
        if (xClientUserAgent == null) {
            throw new ApiException("Missing the required parameter 'xClientUserAgent' when calling getCustomerConsentDashboard(Async)");
        }
        // verify the required parameter 'xIdempotencyKey' is set
        if (xIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xIdempotencyKey' when calling getCustomerConsentDashboard(Async)");
        }
        // verify the required parameter 'xFapiCustomerLastLoggedTime' is set
        if (xFapiCustomerLastLoggedTime == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerLastLoggedTime' when calling getCustomerConsentDashboard(Async)");
        }
        
        com.squareup.okhttp.Call call = getCustomerConsentDashboardCall(customerId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get customer&#x27;s consent dashboard
     * Retrieve a comprehensive view of customer&#x27;s consent arrangements and data sharing. Based on: - Australia CDR Consumer Dashboard - UK Open Banking Consent Dashboard - Singapore SGFinDex Customer Portal 
     * @param customerId The customer&#x27;s unique identifier (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ConsentDashboard
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConsentDashboard getCustomerConsentDashboard(String customerId, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId) throws ApiException {
        ApiResponse<ConsentDashboard> resp = getCustomerConsentDashboardWithHttpInfo(customerId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Get customer&#x27;s consent dashboard
     * Retrieve a comprehensive view of customer&#x27;s consent arrangements and data sharing. Based on: - Australia CDR Consumer Dashboard - UK Open Banking Consent Dashboard - Singapore SGFinDex Customer Portal 
     * @param customerId The customer&#x27;s unique identifier (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ApiResponse&lt;ConsentDashboard&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConsentDashboard> getCustomerConsentDashboardWithHttpInfo(String customerId, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = getCustomerConsentDashboardValidateBeforeCall(customerId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<ConsentDashboard>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get customer&#x27;s consent dashboard (asynchronously)
     * Retrieve a comprehensive view of customer&#x27;s consent arrangements and data sharing. Based on: - Australia CDR Consumer Dashboard - UK Open Banking Consent Dashboard - Singapore SGFinDex Customer Portal 
     * @param customerId The customer&#x27;s unique identifier (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomerConsentDashboardAsync(String customerId, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ApiCallback<ConsentDashboard> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomerConsentDashboardValidateBeforeCall(customerId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConsentDashboard>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomerConsents
     * @param customerId The customer&#x27;s unique identifier (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param status Filter consents by status (optional)
     * @param dataHolderId Filter by specific data holder/institution (optional)
     * @param purpose Filter by consent purpose (optional)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomerConsentsCall(String customerId, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String status, String dataHolderId, String purpose, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/consent/customers/{customer_id}/arrangements"
            .replaceAll("\\{" + "customer_id" + "\\}", apiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (dataHolderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("data_holder_id", dataHolderId));
        if (purpose != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("purpose", purpose));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (participantId != null)
        localVarHeaderParams.put("participant-id", apiClient.parameterToString(participantId));
        if (xV != null)
        localVarHeaderParams.put("x-v", apiClient.parameterToString(xV));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (xFapiAuthDate != null)
        localVarHeaderParams.put("x-fapi-auth-date", apiClient.parameterToString(xFapiAuthDate));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xClientHeaders != null)
        localVarHeaderParams.put("x-client-headers", apiClient.parameterToString(xClientHeaders));
        if (xClientUserAgent != null)
        localVarHeaderParams.put("x-client-user-agent", apiClient.parameterToString(xClientUserAgent));
        if (xIdempotencyKey != null)
        localVarHeaderParams.put("x-idempotency-key", apiClient.parameterToString(xIdempotencyKey));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SignedJWT" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomerConsentsValidateBeforeCall(String customerId, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String status, String dataHolderId, String purpose, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCustomerConsents(Async)");
        }
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling getCustomerConsents(Async)");
        }
        // verify the required parameter 'xV' is set
        if (xV == null) {
            throw new ApiException("Missing the required parameter 'xV' when calling getCustomerConsents(Async)");
        }
        // verify the required parameter 'xFapiAuthDate' is set
        if (xFapiAuthDate == null) {
            throw new ApiException("Missing the required parameter 'xFapiAuthDate' when calling getCustomerConsents(Async)");
        }
        // verify the required parameter 'xFapiCustomerIpAddress' is set
        if (xFapiCustomerIpAddress == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerIpAddress' when calling getCustomerConsents(Async)");
        }
        // verify the required parameter 'xClientHeaders' is set
        if (xClientHeaders == null) {
            throw new ApiException("Missing the required parameter 'xClientHeaders' when calling getCustomerConsents(Async)");
        }
        // verify the required parameter 'xClientUserAgent' is set
        if (xClientUserAgent == null) {
            throw new ApiException("Missing the required parameter 'xClientUserAgent' when calling getCustomerConsents(Async)");
        }
        // verify the required parameter 'xIdempotencyKey' is set
        if (xIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xIdempotencyKey' when calling getCustomerConsents(Async)");
        }
        // verify the required parameter 'xFapiCustomerLastLoggedTime' is set
        if (xFapiCustomerLastLoggedTime == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerLastLoggedTime' when calling getCustomerConsents(Async)");
        }
        
        com.squareup.okhttp.Call call = getCustomerConsentsCall(customerId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, status, dataHolderId, purpose, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get customer&#x27;s consent arrangements
     * Retrieve all consent arrangements for a specific customer. Based on: - UK Open Banking Customer Consent Management - Australia CDR Consumer Dashboard APIs - Singapore SGFinDex Customer Consent View 
     * @param customerId The customer&#x27;s unique identifier (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param status Filter consents by status (optional)
     * @param dataHolderId Filter by specific data holder/institution (optional)
     * @param purpose Filter by consent purpose (optional)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2003 getCustomerConsents(String customerId, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String status, String dataHolderId, String purpose, UUID xFapiInteractionId) throws ApiException {
        ApiResponse<InlineResponse2003> resp = getCustomerConsentsWithHttpInfo(customerId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, status, dataHolderId, purpose, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Get customer&#x27;s consent arrangements
     * Retrieve all consent arrangements for a specific customer. Based on: - UK Open Banking Customer Consent Management - Australia CDR Consumer Dashboard APIs - Singapore SGFinDex Customer Consent View 
     * @param customerId The customer&#x27;s unique identifier (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param status Filter consents by status (optional)
     * @param dataHolderId Filter by specific data holder/institution (optional)
     * @param purpose Filter by consent purpose (optional)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2003> getCustomerConsentsWithHttpInfo(String customerId, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String status, String dataHolderId, String purpose, UUID xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = getCustomerConsentsValidateBeforeCall(customerId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, status, dataHolderId, purpose, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get customer&#x27;s consent arrangements (asynchronously)
     * Retrieve all consent arrangements for a specific customer. Based on: - UK Open Banking Customer Consent Management - Australia CDR Consumer Dashboard APIs - Singapore SGFinDex Customer Consent View 
     * @param customerId The customer&#x27;s unique identifier (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param status Filter consents by status (optional)
     * @param dataHolderId Filter by specific data holder/institution (optional)
     * @param purpose Filter by consent purpose (optional)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomerConsentsAsync(String customerId, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String status, String dataHolderId, String purpose, UUID xFapiInteractionId, final ApiCallback<InlineResponse2003> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomerConsentsValidateBeforeCall(customerId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, status, dataHolderId, purpose, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listConsentArrangements
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param status Filter consents by status (optional)
     * @param fromDate Filter consents created after this date (optional)
     * @param toDate Filter consents created before this date (optional)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listConsentArrangementsCall(String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String status, OffsetDateTime fromDate, OffsetDateTime toDate, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/consent/arrangements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (fromDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from_date", fromDate));
        if (toDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to_date", toDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (participantId != null)
        localVarHeaderParams.put("participant-id", apiClient.parameterToString(participantId));
        if (xV != null)
        localVarHeaderParams.put("x-v", apiClient.parameterToString(xV));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (xFapiAuthDate != null)
        localVarHeaderParams.put("x-fapi-auth-date", apiClient.parameterToString(xFapiAuthDate));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xClientHeaders != null)
        localVarHeaderParams.put("x-client-headers", apiClient.parameterToString(xClientHeaders));
        if (xClientUserAgent != null)
        localVarHeaderParams.put("x-client-user-agent", apiClient.parameterToString(xClientUserAgent));
        if (xIdempotencyKey != null)
        localVarHeaderParams.put("x-idempotency-key", apiClient.parameterToString(xIdempotencyKey));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SignedJWT" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listConsentArrangementsValidateBeforeCall(String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String status, OffsetDateTime fromDate, OffsetDateTime toDate, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling listConsentArrangements(Async)");
        }
        // verify the required parameter 'xV' is set
        if (xV == null) {
            throw new ApiException("Missing the required parameter 'xV' when calling listConsentArrangements(Async)");
        }
        // verify the required parameter 'xFapiAuthDate' is set
        if (xFapiAuthDate == null) {
            throw new ApiException("Missing the required parameter 'xFapiAuthDate' when calling listConsentArrangements(Async)");
        }
        // verify the required parameter 'xFapiCustomerIpAddress' is set
        if (xFapiCustomerIpAddress == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerIpAddress' when calling listConsentArrangements(Async)");
        }
        // verify the required parameter 'xClientHeaders' is set
        if (xClientHeaders == null) {
            throw new ApiException("Missing the required parameter 'xClientHeaders' when calling listConsentArrangements(Async)");
        }
        // verify the required parameter 'xClientUserAgent' is set
        if (xClientUserAgent == null) {
            throw new ApiException("Missing the required parameter 'xClientUserAgent' when calling listConsentArrangements(Async)");
        }
        // verify the required parameter 'xIdempotencyKey' is set
        if (xIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xIdempotencyKey' when calling listConsentArrangements(Async)");
        }
        // verify the required parameter 'xFapiCustomerLastLoggedTime' is set
        if (xFapiCustomerLastLoggedTime == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerLastLoggedTime' when calling listConsentArrangements(Async)");
        }
        
        com.squareup.okhttp.Call call = listConsentArrangementsCall(participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, status, fromDate, toDate, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List consent arrangements
     * Retrieve a list of active consent arrangements for the authenticated user. Based on: - UK Open Banking Account Access Consents API - Australia CDR Get Consent API 
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param status Filter consents by status (optional)
     * @param fromDate Filter consents created after this date (optional)
     * @param toDate Filter consents created before this date (optional)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return List&lt;ConsentArrangementResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ConsentArrangementResponse> listConsentArrangements(String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String status, OffsetDateTime fromDate, OffsetDateTime toDate, UUID xFapiInteractionId) throws ApiException {
        ApiResponse<List<ConsentArrangementResponse>> resp = listConsentArrangementsWithHttpInfo(participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, status, fromDate, toDate, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * List consent arrangements
     * Retrieve a list of active consent arrangements for the authenticated user. Based on: - UK Open Banking Account Access Consents API - Australia CDR Get Consent API 
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param status Filter consents by status (optional)
     * @param fromDate Filter consents created after this date (optional)
     * @param toDate Filter consents created before this date (optional)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ApiResponse&lt;List&lt;ConsentArrangementResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ConsentArrangementResponse>> listConsentArrangementsWithHttpInfo(String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String status, OffsetDateTime fromDate, OffsetDateTime toDate, UUID xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = listConsentArrangementsValidateBeforeCall(participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, status, fromDate, toDate, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<List<ConsentArrangementResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List consent arrangements (asynchronously)
     * Retrieve a list of active consent arrangements for the authenticated user. Based on: - UK Open Banking Account Access Consents API - Australia CDR Get Consent API 
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param status Filter consents by status (optional)
     * @param fromDate Filter consents created after this date (optional)
     * @param toDate Filter consents created before this date (optional)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listConsentArrangementsAsync(String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String status, OffsetDateTime fromDate, OffsetDateTime toDate, UUID xFapiInteractionId, final ApiCallback<List<ConsentArrangementResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listConsentArrangementsValidateBeforeCall(participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, status, fromDate, toDate, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ConsentArrangementResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listConsentTemplates
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param category Filter templates by category (optional)
     * @param purpose Filter templates by purpose (optional)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listConsentTemplatesCall(String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String category, String purpose, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/consent/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (category != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("category", category));
        if (purpose != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("purpose", purpose));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (participantId != null)
        localVarHeaderParams.put("participant-id", apiClient.parameterToString(participantId));
        if (xV != null)
        localVarHeaderParams.put("x-v", apiClient.parameterToString(xV));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (xFapiAuthDate != null)
        localVarHeaderParams.put("x-fapi-auth-date", apiClient.parameterToString(xFapiAuthDate));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xClientHeaders != null)
        localVarHeaderParams.put("x-client-headers", apiClient.parameterToString(xClientHeaders));
        if (xClientUserAgent != null)
        localVarHeaderParams.put("x-client-user-agent", apiClient.parameterToString(xClientUserAgent));
        if (xIdempotencyKey != null)
        localVarHeaderParams.put("x-idempotency-key", apiClient.parameterToString(xIdempotencyKey));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SignedJWT" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listConsentTemplatesValidateBeforeCall(String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String category, String purpose, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling listConsentTemplates(Async)");
        }
        // verify the required parameter 'xV' is set
        if (xV == null) {
            throw new ApiException("Missing the required parameter 'xV' when calling listConsentTemplates(Async)");
        }
        // verify the required parameter 'xFapiAuthDate' is set
        if (xFapiAuthDate == null) {
            throw new ApiException("Missing the required parameter 'xFapiAuthDate' when calling listConsentTemplates(Async)");
        }
        // verify the required parameter 'xFapiCustomerIpAddress' is set
        if (xFapiCustomerIpAddress == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerIpAddress' when calling listConsentTemplates(Async)");
        }
        // verify the required parameter 'xClientHeaders' is set
        if (xClientHeaders == null) {
            throw new ApiException("Missing the required parameter 'xClientHeaders' when calling listConsentTemplates(Async)");
        }
        // verify the required parameter 'xClientUserAgent' is set
        if (xClientUserAgent == null) {
            throw new ApiException("Missing the required parameter 'xClientUserAgent' when calling listConsentTemplates(Async)");
        }
        // verify the required parameter 'xIdempotencyKey' is set
        if (xIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xIdempotencyKey' when calling listConsentTemplates(Async)");
        }
        // verify the required parameter 'xFapiCustomerLastLoggedTime' is set
        if (xFapiCustomerLastLoggedTime == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerLastLoggedTime' when calling listConsentTemplates(Async)");
        }
        
        com.squareup.okhttp.Call call = listConsentTemplatesCall(participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, category, purpose, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List available consent templates
     * Retrieve available consent templates that can be used to create new arrangements. Based on: - Australia CDR Consent Taxonomy - UK Open Banking Standard Permissions 
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param category Filter templates by category (optional)
     * @param purpose Filter templates by purpose (optional)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return List&lt;ConsentTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ConsentTemplate> listConsentTemplates(String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String category, String purpose, UUID xFapiInteractionId) throws ApiException {
        ApiResponse<List<ConsentTemplate>> resp = listConsentTemplatesWithHttpInfo(participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, category, purpose, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * List available consent templates
     * Retrieve available consent templates that can be used to create new arrangements. Based on: - Australia CDR Consent Taxonomy - UK Open Banking Standard Permissions 
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param category Filter templates by category (optional)
     * @param purpose Filter templates by purpose (optional)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ApiResponse&lt;List&lt;ConsentTemplate&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ConsentTemplate>> listConsentTemplatesWithHttpInfo(String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String category, String purpose, UUID xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = listConsentTemplatesValidateBeforeCall(participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, category, purpose, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<List<ConsentTemplate>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List available consent templates (asynchronously)
     * Retrieve available consent templates that can be used to create new arrangements. Based on: - Australia CDR Consent Taxonomy - UK Open Banking Standard Permissions 
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param category Filter templates by category (optional)
     * @param purpose Filter templates by purpose (optional)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listConsentTemplatesAsync(String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String category, String purpose, UUID xFapiInteractionId, final ApiCallback<List<ConsentTemplate>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listConsentTemplatesValidateBeforeCall(participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, category, purpose, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ConsentTemplate>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for revokeConsentArrangement
     * @param arrangementId The ID of the consent arrangement to revoke (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call revokeConsentArrangementCall(String arrangementId, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/consent/arrangements/{arrangement_id}"
            .replaceAll("\\{" + "arrangement_id" + "\\}", apiClient.escapeString(arrangementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (participantId != null)
        localVarHeaderParams.put("participant-id", apiClient.parameterToString(participantId));
        if (xV != null)
        localVarHeaderParams.put("x-v", apiClient.parameterToString(xV));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (xFapiAuthDate != null)
        localVarHeaderParams.put("x-fapi-auth-date", apiClient.parameterToString(xFapiAuthDate));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xClientHeaders != null)
        localVarHeaderParams.put("x-client-headers", apiClient.parameterToString(xClientHeaders));
        if (xClientUserAgent != null)
        localVarHeaderParams.put("x-client-user-agent", apiClient.parameterToString(xClientUserAgent));
        if (xIdempotencyKey != null)
        localVarHeaderParams.put("x-idempotency-key", apiClient.parameterToString(xIdempotencyKey));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SignedJWT" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call revokeConsentArrangementValidateBeforeCall(String arrangementId, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'arrangementId' is set
        if (arrangementId == null) {
            throw new ApiException("Missing the required parameter 'arrangementId' when calling revokeConsentArrangement(Async)");
        }
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling revokeConsentArrangement(Async)");
        }
        // verify the required parameter 'xV' is set
        if (xV == null) {
            throw new ApiException("Missing the required parameter 'xV' when calling revokeConsentArrangement(Async)");
        }
        // verify the required parameter 'xFapiAuthDate' is set
        if (xFapiAuthDate == null) {
            throw new ApiException("Missing the required parameter 'xFapiAuthDate' when calling revokeConsentArrangement(Async)");
        }
        // verify the required parameter 'xFapiCustomerIpAddress' is set
        if (xFapiCustomerIpAddress == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerIpAddress' when calling revokeConsentArrangement(Async)");
        }
        // verify the required parameter 'xClientHeaders' is set
        if (xClientHeaders == null) {
            throw new ApiException("Missing the required parameter 'xClientHeaders' when calling revokeConsentArrangement(Async)");
        }
        // verify the required parameter 'xClientUserAgent' is set
        if (xClientUserAgent == null) {
            throw new ApiException("Missing the required parameter 'xClientUserAgent' when calling revokeConsentArrangement(Async)");
        }
        // verify the required parameter 'xIdempotencyKey' is set
        if (xIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xIdempotencyKey' when calling revokeConsentArrangement(Async)");
        }
        // verify the required parameter 'xFapiCustomerLastLoggedTime' is set
        if (xFapiCustomerLastLoggedTime == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerLastLoggedTime' when calling revokeConsentArrangement(Async)");
        }
        
        com.squareup.okhttp.Call call = revokeConsentArrangementCall(arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Revoke consent arrangement
     * Revoke an existing consent arrangement. Based on: - UK Open Banking Account Access Consents API - Australia CDR Revoke Consent API - Korea MyData Consent Revocation API 
     * @param arrangementId The ID of the consent arrangement to revoke (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void revokeConsentArrangement(String arrangementId, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId) throws ApiException {
        revokeConsentArrangementWithHttpInfo(arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId);
    }

    /**
     * Revoke consent arrangement
     * Revoke an existing consent arrangement. Based on: - UK Open Banking Account Access Consents API - Australia CDR Revoke Consent API - Korea MyData Consent Revocation API 
     * @param arrangementId The ID of the consent arrangement to revoke (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> revokeConsentArrangementWithHttpInfo(String arrangementId, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = revokeConsentArrangementValidateBeforeCall(arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Revoke consent arrangement (asynchronously)
     * Revoke an existing consent arrangement. Based on: - UK Open Banking Account Access Consents API - Australia CDR Revoke Consent API - Korea MyData Consent Revocation API 
     * @param arrangementId The ID of the consent arrangement to revoke (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call revokeConsentArrangementAsync(String arrangementId, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = revokeConsentArrangementValidateBeforeCall(arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateConsentStatus
     * @param body  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param arrangementId The ID of the consent arrangement (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateConsentStatusCall(ConsentStatusUpdate body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String arrangementId, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/consent/arrangements/{arrangement_id}"
            .replaceAll("\\{" + "arrangement_id" + "\\}", apiClient.escapeString(arrangementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (participantId != null)
        localVarHeaderParams.put("participant-id", apiClient.parameterToString(participantId));
        if (xV != null)
        localVarHeaderParams.put("x-v", apiClient.parameterToString(xV));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (xFapiAuthDate != null)
        localVarHeaderParams.put("x-fapi-auth-date", apiClient.parameterToString(xFapiAuthDate));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xClientHeaders != null)
        localVarHeaderParams.put("x-client-headers", apiClient.parameterToString(xClientHeaders));
        if (xClientUserAgent != null)
        localVarHeaderParams.put("x-client-user-agent", apiClient.parameterToString(xClientUserAgent));
        if (xIdempotencyKey != null)
        localVarHeaderParams.put("x-idempotency-key", apiClient.parameterToString(xIdempotencyKey));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SignedJWT" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateConsentStatusValidateBeforeCall(ConsentStatusUpdate body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String arrangementId, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateConsentStatus(Async)");
        }
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling updateConsentStatus(Async)");
        }
        // verify the required parameter 'xV' is set
        if (xV == null) {
            throw new ApiException("Missing the required parameter 'xV' when calling updateConsentStatus(Async)");
        }
        // verify the required parameter 'xFapiAuthDate' is set
        if (xFapiAuthDate == null) {
            throw new ApiException("Missing the required parameter 'xFapiAuthDate' when calling updateConsentStatus(Async)");
        }
        // verify the required parameter 'xFapiCustomerIpAddress' is set
        if (xFapiCustomerIpAddress == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerIpAddress' when calling updateConsentStatus(Async)");
        }
        // verify the required parameter 'xClientHeaders' is set
        if (xClientHeaders == null) {
            throw new ApiException("Missing the required parameter 'xClientHeaders' when calling updateConsentStatus(Async)");
        }
        // verify the required parameter 'xClientUserAgent' is set
        if (xClientUserAgent == null) {
            throw new ApiException("Missing the required parameter 'xClientUserAgent' when calling updateConsentStatus(Async)");
        }
        // verify the required parameter 'xIdempotencyKey' is set
        if (xIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xIdempotencyKey' when calling updateConsentStatus(Async)");
        }
        // verify the required parameter 'xFapiCustomerLastLoggedTime' is set
        if (xFapiCustomerLastLoggedTime == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerLastLoggedTime' when calling updateConsentStatus(Async)");
        }
        // verify the required parameter 'arrangementId' is set
        if (arrangementId == null) {
            throw new ApiException("Missing the required parameter 'arrangementId' when calling updateConsentStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = updateConsentStatusCall(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, arrangementId, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update consent arrangement status
     * Update the status of a consent arrangement (e.g., suspend, resume). Based on: - UK Open Banking Account Access Consents API - Australia CDR Update Consent API 
     * @param body  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param arrangementId The ID of the consent arrangement (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ConsentArrangementResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConsentArrangementResponse updateConsentStatus(ConsentStatusUpdate body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String arrangementId, UUID xFapiInteractionId) throws ApiException {
        ApiResponse<ConsentArrangementResponse> resp = updateConsentStatusWithHttpInfo(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, arrangementId, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Update consent arrangement status
     * Update the status of a consent arrangement (e.g., suspend, resume). Based on: - UK Open Banking Account Access Consents API - Australia CDR Update Consent API 
     * @param body  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param arrangementId The ID of the consent arrangement (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ApiResponse&lt;ConsentArrangementResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConsentArrangementResponse> updateConsentStatusWithHttpInfo(ConsentStatusUpdate body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String arrangementId, UUID xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = updateConsentStatusValidateBeforeCall(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, arrangementId, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<ConsentArrangementResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update consent arrangement status (asynchronously)
     * Update the status of a consent arrangement (e.g., suspend, resume). Based on: - UK Open Banking Account Access Consents API - Australia CDR Update Consent API 
     * @param body  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param arrangementId The ID of the consent arrangement (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateConsentStatusAsync(ConsentStatusUpdate body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, String arrangementId, UUID xFapiInteractionId, final ApiCallback<ConsentArrangementResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateConsentStatusValidateBeforeCall(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, arrangementId, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConsentArrangementResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
