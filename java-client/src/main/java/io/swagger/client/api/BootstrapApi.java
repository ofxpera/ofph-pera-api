/*
 * OFxPERA API
 * Philippines Open Finance API Implementation for PERA
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ClientRegistrationResponse;
import io.swagger.client.model.Error;
import io.swagger.client.model.ParticipantConfig;
import io.swagger.client.model.PeraProduct;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BootstrapApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public BootstrapApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BootstrapApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for getParticipant
     * @param participantId Participant identifier issued during participant registration (required)
     * @param requestingParticipantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParticipantCall(String participantId, String requestingParticipantId, Integer xV, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ofxpera/participants/{participant_id}"
            .replaceAll("\\{" + "participant_id" + "\\}", apiClient.escapeString(participantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requestingParticipantId != null)
        localVarHeaderParams.put("participant-id", apiClient.parameterToString(requestingParticipantId));
        if (xV != null)
        localVarHeaderParams.put("x-v", apiClient.parameterToString(xV));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SignedJWT" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getParticipantValidateBeforeCall(String participantId, String requestingParticipantId, Integer xV, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling getParticipant(Async)");
        }
        // verify the required parameter 'requestingParticipantId' is set
        if (requestingParticipantId == null) {
            throw new ApiException("Missing the required parameter 'requestingParticipantId' when calling getParticipant(Async)");
        }
        // verify the required parameter 'xV' is set
        if (xV == null) {
            throw new ApiException("Missing the required parameter 'xV' when calling getParticipant(Async)");
        }
        
        com.squareup.okhttp.Call call = getParticipantCall(participantId, requestingParticipantId, xV, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * [PHASE 2] Get an OFxPERA Participant&#x27;s registration information
     * API for retrieving registration information for a specific OFxPERA Participant
     * @param participantId Participant identifier issued during participant registration (required)
     * @param requestingParticipantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ParticipantConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ParticipantConfig getParticipant(String participantId, String requestingParticipantId, Integer xV, UUID xFapiInteractionId) throws ApiException {
        ApiResponse<ParticipantConfig> resp = getParticipantWithHttpInfo(participantId, requestingParticipantId, xV, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * [PHASE 2] Get an OFxPERA Participant&#x27;s registration information
     * API for retrieving registration information for a specific OFxPERA Participant
     * @param participantId Participant identifier issued during participant registration (required)
     * @param requestingParticipantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ApiResponse&lt;ParticipantConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ParticipantConfig> getParticipantWithHttpInfo(String participantId, String requestingParticipantId, Integer xV, UUID xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = getParticipantValidateBeforeCall(participantId, requestingParticipantId, xV, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<ParticipantConfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [PHASE 2] Get an OFxPERA Participant&#x27;s registration information (asynchronously)
     * API for retrieving registration information for a specific OFxPERA Participant
     * @param participantId Participant identifier issued during participant registration (required)
     * @param requestingParticipantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getParticipantAsync(String participantId, String requestingParticipantId, Integer xV, UUID xFapiInteractionId, final ApiCallback<ParticipantConfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParticipantValidateBeforeCall(participantId, requestingParticipantId, xV, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ParticipantConfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listParticipants
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listParticipantsCall(String participantId, Integer xV, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ofxpera/participants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (participantId != null)
        localVarHeaderParams.put("participant-id", apiClient.parameterToString(participantId));
        if (xV != null)
        localVarHeaderParams.put("x-v", apiClient.parameterToString(xV));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SignedJWT" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listParticipantsValidateBeforeCall(String participantId, Integer xV, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling listParticipants(Async)");
        }
        // verify the required parameter 'xV' is set
        if (xV == null) {
            throw new ApiException("Missing the required parameter 'xV' when calling listParticipants(Async)");
        }
        
        com.squareup.okhttp.Call call = listParticipantsCall(participantId, xV, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * [PHASE 1] Get a list of registered OFxPERA Participants
     * API for retrieving all registered OFxPERA Participants
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return List&lt;ParticipantConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ParticipantConfig> listParticipants(String participantId, Integer xV, UUID xFapiInteractionId) throws ApiException {
        ApiResponse<List<ParticipantConfig>> resp = listParticipantsWithHttpInfo(participantId, xV, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * [PHASE 1] Get a list of registered OFxPERA Participants
     * API for retrieving all registered OFxPERA Participants
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ApiResponse&lt;List&lt;ParticipantConfig&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ParticipantConfig>> listParticipantsWithHttpInfo(String participantId, Integer xV, UUID xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = listParticipantsValidateBeforeCall(participantId, xV, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<List<ParticipantConfig>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [PHASE 1] Get a list of registered OFxPERA Participants (asynchronously)
     * API for retrieving all registered OFxPERA Participants
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listParticipantsAsync(String participantId, Integer xV, UUID xFapiInteractionId, final ApiCallback<List<ParticipantConfig>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listParticipantsValidateBeforeCall(participantId, xV, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ParticipantConfig>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listProductByParticipant
     * @param participantId Participant identifier issued during participant registration (required)
     * @param requestingParticipantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listProductByParticipantCall(String participantId, String requestingParticipantId, Integer xV, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ofxpera/products/{participant_id}"
            .replaceAll("\\{" + "participant_id" + "\\}", apiClient.escapeString(participantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requestingParticipantId != null)
        localVarHeaderParams.put("participant-id", apiClient.parameterToString(requestingParticipantId));
        if (xV != null)
        localVarHeaderParams.put("x-v", apiClient.parameterToString(xV));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SignedJWT" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listProductByParticipantValidateBeforeCall(String participantId, String requestingParticipantId, Integer xV, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling listProductByParticipant(Async)");
        }
        // verify the required parameter 'requestingParticipantId' is set
        if (requestingParticipantId == null) {
            throw new ApiException("Missing the required parameter 'requestingParticipantId' when calling listProductByParticipant(Async)");
        }
        // verify the required parameter 'xV' is set
        if (xV == null) {
            throw new ApiException("Missing the required parameter 'xV' when calling listProductByParticipant(Async)");
        }
        
        com.squareup.okhttp.Call call = listProductByParticipantCall(participantId, requestingParticipantId, xV, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * [PHASE 1] Get a list of PERA products associated with PERA Admin
     * API for retrieving all registered products associated with the PERA Admin.
     * @param participantId Participant identifier issued during participant registration (required)
     * @param requestingParticipantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return List&lt;PeraProduct&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PeraProduct> listProductByParticipant(String participantId, String requestingParticipantId, Integer xV, UUID xFapiInteractionId) throws ApiException {
        ApiResponse<List<PeraProduct>> resp = listProductByParticipantWithHttpInfo(participantId, requestingParticipantId, xV, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * [PHASE 1] Get a list of PERA products associated with PERA Admin
     * API for retrieving all registered products associated with the PERA Admin.
     * @param participantId Participant identifier issued during participant registration (required)
     * @param requestingParticipantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ApiResponse&lt;List&lt;PeraProduct&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PeraProduct>> listProductByParticipantWithHttpInfo(String participantId, String requestingParticipantId, Integer xV, UUID xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = listProductByParticipantValidateBeforeCall(participantId, requestingParticipantId, xV, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<List<PeraProduct>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [PHASE 1] Get a list of PERA products associated with PERA Admin (asynchronously)
     * API for retrieving all registered products associated with the PERA Admin.
     * @param participantId Participant identifier issued during participant registration (required)
     * @param requestingParticipantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listProductByParticipantAsync(String participantId, String requestingParticipantId, Integer xV, UUID xFapiInteractionId, final ApiCallback<List<PeraProduct>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listProductByParticipantValidateBeforeCall(participantId, requestingParticipantId, xV, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PeraProduct>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for registerParticipant
     * @param body  (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registerParticipantCall(ParticipantConfig body, Integer xV, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ofxpera/participants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xV != null)
        localVarHeaderParams.put("x-v", apiClient.parameterToString(xV));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SignedJWT" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registerParticipantValidateBeforeCall(ParticipantConfig body, Integer xV, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling registerParticipant(Async)");
        }
        // verify the required parameter 'xV' is set
        if (xV == null) {
            throw new ApiException("Missing the required parameter 'xV' when calling registerParticipant(Async)");
        }
        
        com.squareup.okhttp.Call call = registerParticipantCall(body, xV, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * [PHASE 2] Register an OFxPERA Participant
     * API for registering an OFxPERA Participant following FAPI Dynamic Client Registration requirements
     * @param body  (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ClientRegistrationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClientRegistrationResponse registerParticipant(ParticipantConfig body, Integer xV, UUID xFapiInteractionId) throws ApiException {
        ApiResponse<ClientRegistrationResponse> resp = registerParticipantWithHttpInfo(body, xV, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * [PHASE 2] Register an OFxPERA Participant
     * API for registering an OFxPERA Participant following FAPI Dynamic Client Registration requirements
     * @param body  (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ApiResponse&lt;ClientRegistrationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClientRegistrationResponse> registerParticipantWithHttpInfo(ParticipantConfig body, Integer xV, UUID xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = registerParticipantValidateBeforeCall(body, xV, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<ClientRegistrationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [PHASE 2] Register an OFxPERA Participant (asynchronously)
     * API for registering an OFxPERA Participant following FAPI Dynamic Client Registration requirements
     * @param body  (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registerParticipantAsync(ParticipantConfig body, Integer xV, UUID xFapiInteractionId, final ApiCallback<ClientRegistrationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerParticipantValidateBeforeCall(body, xV, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClientRegistrationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for registerProduct
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registerProductCall(String participantId, Integer xV, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ofxpera/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (participantId != null)
        localVarHeaderParams.put("participant-id", apiClient.parameterToString(participantId));
        if (xV != null)
        localVarHeaderParams.put("x-v", apiClient.parameterToString(xV));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SignedJWT" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registerProductValidateBeforeCall(String participantId, Integer xV, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling registerProduct(Async)");
        }
        // verify the required parameter 'xV' is set
        if (xV == null) {
            throw new ApiException("Missing the required parameter 'xV' when calling registerProduct(Async)");
        }
        
        com.squareup.okhttp.Call call = registerProductCall(participantId, xV, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * [PHASE 2] Register a PERA Admin Product
     * API that allows PERA Admin to register a PERA product.
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return PeraProduct
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PeraProduct registerProduct(String participantId, Integer xV, UUID xFapiInteractionId) throws ApiException {
        ApiResponse<PeraProduct> resp = registerProductWithHttpInfo(participantId, xV, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * [PHASE 2] Register a PERA Admin Product
     * API that allows PERA Admin to register a PERA product.
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ApiResponse&lt;PeraProduct&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PeraProduct> registerProductWithHttpInfo(String participantId, Integer xV, UUID xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = registerProductValidateBeforeCall(participantId, xV, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<PeraProduct>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [PHASE 2] Register a PERA Admin Product (asynchronously)
     * API that allows PERA Admin to register a PERA product.
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registerProductAsync(String participantId, Integer xV, UUID xFapiInteractionId, final ApiCallback<PeraProduct> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerProductValidateBeforeCall(participantId, xV, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PeraProduct>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateParticipant
     * @param body  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateParticipantCall(ParticipantConfig body, String participantId, Integer xV, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ofxpera/participants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (participantId != null)
        localVarHeaderParams.put("participant-id", apiClient.parameterToString(participantId));
        if (xV != null)
        localVarHeaderParams.put("x-v", apiClient.parameterToString(xV));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SignedJWT" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateParticipantValidateBeforeCall(ParticipantConfig body, String participantId, Integer xV, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateParticipant(Async)");
        }
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling updateParticipant(Async)");
        }
        // verify the required parameter 'xV' is set
        if (xV == null) {
            throw new ApiException("Missing the required parameter 'xV' when calling updateParticipant(Async)");
        }
        
        com.squareup.okhttp.Call call = updateParticipantCall(body, participantId, xV, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * [PHASE 2] Update an OFxPERA Participant
     * API for updating the URIs and status of an OFxPERA Participant
     * @param body  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ClientRegistrationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClientRegistrationResponse updateParticipant(ParticipantConfig body, String participantId, Integer xV, UUID xFapiInteractionId) throws ApiException {
        ApiResponse<ClientRegistrationResponse> resp = updateParticipantWithHttpInfo(body, participantId, xV, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * [PHASE 2] Update an OFxPERA Participant
     * API for updating the URIs and status of an OFxPERA Participant
     * @param body  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ApiResponse&lt;ClientRegistrationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClientRegistrationResponse> updateParticipantWithHttpInfo(ParticipantConfig body, String participantId, Integer xV, UUID xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = updateParticipantValidateBeforeCall(body, participantId, xV, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<ClientRegistrationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [PHASE 2] Update an OFxPERA Participant (asynchronously)
     * API for updating the URIs and status of an OFxPERA Participant
     * @param body  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateParticipantAsync(ParticipantConfig body, String participantId, Integer xV, UUID xFapiInteractionId, final ApiCallback<ClientRegistrationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateParticipantValidateBeforeCall(body, participantId, xV, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClientRegistrationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateProduct
     * @param productId Product identifier issued during product registration (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateProductCall(String productId, String participantId, Integer xV, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ofxpera/products/{product_id}"
            .replaceAll("\\{" + "product_id" + "\\}", apiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (participantId != null)
        localVarHeaderParams.put("participant-id", apiClient.parameterToString(participantId));
        if (xV != null)
        localVarHeaderParams.put("x-v", apiClient.parameterToString(xV));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SignedJWT" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateProductValidateBeforeCall(String productId, String participantId, Integer xV, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling updateProduct(Async)");
        }
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling updateProduct(Async)");
        }
        // verify the required parameter 'xV' is set
        if (xV == null) {
            throw new ApiException("Missing the required parameter 'xV' when calling updateProduct(Async)");
        }
        
        com.squareup.okhttp.Call call = updateProductCall(productId, participantId, xV, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * [PHASE 2] Update a PERA Admin Product
     * API that allows PERA Admin to update their product.
     * @param productId Product identifier issued during product registration (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return PeraProduct
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PeraProduct updateProduct(String productId, String participantId, Integer xV, UUID xFapiInteractionId) throws ApiException {
        ApiResponse<PeraProduct> resp = updateProductWithHttpInfo(productId, participantId, xV, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * [PHASE 2] Update a PERA Admin Product
     * API that allows PERA Admin to update their product.
     * @param productId Product identifier issued during product registration (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ApiResponse&lt;PeraProduct&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PeraProduct> updateProductWithHttpInfo(String productId, String participantId, Integer xV, UUID xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = updateProductValidateBeforeCall(productId, participantId, xV, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<PeraProduct>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [PHASE 2] Update a PERA Admin Product (asynchronously)
     * API that allows PERA Admin to update their product.
     * @param productId Product identifier issued during product registration (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateProductAsync(String productId, String participantId, Integer xV, UUID xFapiInteractionId, final ApiCallback<PeraProduct> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateProductValidateBeforeCall(productId, participantId, xV, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PeraProduct>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
