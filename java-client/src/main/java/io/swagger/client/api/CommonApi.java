/*
 * OFxPERA API
 * Philippines Open Finance API Implementation for PERA
 *
 * OpenAPI spec version: 0.0.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CustomerInformation;
import io.swagger.client.model.EndorsementResponse;
import io.swagger.client.model.Error;
import org.threeten.bp.OffsetDateTime;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CommonApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public CommonApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CommonApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for forwardCustomerEndorsement
     * @param endorsement Encrypted endorsement payload in JWS/JWE format (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call forwardCustomerEndorsementCall(String endorsement, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/common/customers/endorse";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (endorsement != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endorsement", endorsement));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (participantId != null)
        localVarHeaderParams.put("participant-id", apiClient.parameterToString(participantId));
        if (xV != null)
        localVarHeaderParams.put("x-v", apiClient.parameterToString(xV));
        if (xFapiAuthDate != null)
        localVarHeaderParams.put("x-fapi-auth-date", apiClient.parameterToString(xFapiAuthDate));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (xClientHeaders != null)
        localVarHeaderParams.put("x-client-headers", apiClient.parameterToString(xClientHeaders));
        if (xClientUserAgent != null)
        localVarHeaderParams.put("x-client-user-agent", apiClient.parameterToString(xClientUserAgent));
        if (xIdempotencyKey != null)
        localVarHeaderParams.put("x-idempotency-key", apiClient.parameterToString(xIdempotencyKey));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call forwardCustomerEndorsementValidateBeforeCall(String endorsement, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'endorsement' is set
        if (endorsement == null) {
            throw new ApiException("Missing the required parameter 'endorsement' when calling forwardCustomerEndorsement(Async)");
        }
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling forwardCustomerEndorsement(Async)");
        }
        // verify the required parameter 'xV' is set
        if (xV == null) {
            throw new ApiException("Missing the required parameter 'xV' when calling forwardCustomerEndorsement(Async)");
        }
        // verify the required parameter 'xFapiAuthDate' is set
        if (xFapiAuthDate == null) {
            throw new ApiException("Missing the required parameter 'xFapiAuthDate' when calling forwardCustomerEndorsement(Async)");
        }
        // verify the required parameter 'xFapiCustomerIpAddress' is set
        if (xFapiCustomerIpAddress == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerIpAddress' when calling forwardCustomerEndorsement(Async)");
        }
        // verify the required parameter 'xClientHeaders' is set
        if (xClientHeaders == null) {
            throw new ApiException("Missing the required parameter 'xClientHeaders' when calling forwardCustomerEndorsement(Async)");
        }
        // verify the required parameter 'xClientUserAgent' is set
        if (xClientUserAgent == null) {
            throw new ApiException("Missing the required parameter 'xClientUserAgent' when calling forwardCustomerEndorsement(Async)");
        }
        // verify the required parameter 'xIdempotencyKey' is set
        if (xIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xIdempotencyKey' when calling forwardCustomerEndorsement(Async)");
        }
        // verify the required parameter 'xFapiCustomerLastLoggedTime' is set
        if (xFapiCustomerLastLoggedTime == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerLastLoggedTime' when calling forwardCustomerEndorsement(Async)");
        }
        
        com.squareup.okhttp.Call call = forwardCustomerEndorsementCall(endorsement, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * [DEPRECATED] Forward customer endorsement
     * 
     * @param endorsement Encrypted endorsement payload in JWS/JWE format (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return EndorsementResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EndorsementResponse forwardCustomerEndorsement(String endorsement, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId) throws ApiException {
        ApiResponse<EndorsementResponse> resp = forwardCustomerEndorsementWithHttpInfo(endorsement, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * [DEPRECATED] Forward customer endorsement
     * 
     * @param endorsement Encrypted endorsement payload in JWS/JWE format (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ApiResponse&lt;EndorsementResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EndorsementResponse> forwardCustomerEndorsementWithHttpInfo(String endorsement, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = forwardCustomerEndorsementValidateBeforeCall(endorsement, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<EndorsementResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [DEPRECATED] Forward customer endorsement (asynchronously)
     * 
     * @param endorsement Encrypted endorsement payload in JWS/JWE format (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call forwardCustomerEndorsementAsync(String endorsement, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ApiCallback<EndorsementResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = forwardCustomerEndorsementValidateBeforeCall(endorsement, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EndorsementResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomerDetail
     * @param customerId Customer ID, this should map to the sub field returned from the OIDC token endpoint or the sub field returned from the /oauth/userinfo endpoint (required)
     * @param authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;token&gt;&#x27; (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomerDetailCall(String customerId, String authorization, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/common/customers/{customer_id}/detail"
            .replaceAll("\\{" + "customer_id" + "\\}", apiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (participantId != null)
        localVarHeaderParams.put("participant-id", apiClient.parameterToString(participantId));
        if (xV != null)
        localVarHeaderParams.put("x-v", apiClient.parameterToString(xV));
        if (xFapiAuthDate != null)
        localVarHeaderParams.put("x-fapi-auth-date", apiClient.parameterToString(xFapiAuthDate));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (xClientHeaders != null)
        localVarHeaderParams.put("x-client-headers", apiClient.parameterToString(xClientHeaders));
        if (xClientUserAgent != null)
        localVarHeaderParams.put("x-client-user-agent", apiClient.parameterToString(xClientUserAgent));
        if (xIdempotencyKey != null)
        localVarHeaderParams.put("x-idempotency-key", apiClient.parameterToString(xIdempotencyKey));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomerDetailValidateBeforeCall(String customerId, String authorization, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCustomerDetail(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getCustomerDetail(Async)");
        }
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling getCustomerDetail(Async)");
        }
        // verify the required parameter 'xV' is set
        if (xV == null) {
            throw new ApiException("Missing the required parameter 'xV' when calling getCustomerDetail(Async)");
        }
        // verify the required parameter 'xFapiAuthDate' is set
        if (xFapiAuthDate == null) {
            throw new ApiException("Missing the required parameter 'xFapiAuthDate' when calling getCustomerDetail(Async)");
        }
        // verify the required parameter 'xFapiCustomerIpAddress' is set
        if (xFapiCustomerIpAddress == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerIpAddress' when calling getCustomerDetail(Async)");
        }
        // verify the required parameter 'xClientHeaders' is set
        if (xClientHeaders == null) {
            throw new ApiException("Missing the required parameter 'xClientHeaders' when calling getCustomerDetail(Async)");
        }
        // verify the required parameter 'xClientUserAgent' is set
        if (xClientUserAgent == null) {
            throw new ApiException("Missing the required parameter 'xClientUserAgent' when calling getCustomerDetail(Async)");
        }
        // verify the required parameter 'xIdempotencyKey' is set
        if (xIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xIdempotencyKey' when calling getCustomerDetail(Async)");
        }
        // verify the required parameter 'xFapiCustomerLastLoggedTime' is set
        if (xFapiCustomerLastLoggedTime == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerLastLoggedTime' when calling getCustomerDetail(Async)");
        }
        
        com.squareup.okhttp.Call call = getCustomerDetailCall(customerId, authorization, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * [PHASE 1] Get detailed customer information
     * 
     * @param customerId Customer ID, this should map to the sub field returned from the OIDC token endpoint or the sub field returned from the /oauth/userinfo endpoint (required)
     * @param authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;token&gt;&#x27; (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return CustomerInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerInformation getCustomerDetail(String customerId, String authorization, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId) throws ApiException {
        ApiResponse<CustomerInformation> resp = getCustomerDetailWithHttpInfo(customerId, authorization, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * [PHASE 1] Get detailed customer information
     * 
     * @param customerId Customer ID, this should map to the sub field returned from the OIDC token endpoint or the sub field returned from the /oauth/userinfo endpoint (required)
     * @param authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;token&gt;&#x27; (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ApiResponse&lt;CustomerInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerInformation> getCustomerDetailWithHttpInfo(String customerId, String authorization, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = getCustomerDetailValidateBeforeCall(customerId, authorization, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<CustomerInformation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [PHASE 1] Get detailed customer information (asynchronously)
     * 
     * @param customerId Customer ID, this should map to the sub field returned from the OIDC token endpoint or the sub field returned from the /oauth/userinfo endpoint (required)
     * @param authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;token&gt;&#x27; (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomerDetailAsync(String customerId, String authorization, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ApiCallback<CustomerInformation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomerDetailValidateBeforeCall(customerId, authorization, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerInformation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
