/*
 * OFxPERA API
 * Philippines Open Finance API Implementation for PERA
 *
 * OpenAPI spec version: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.InlineResponse2002;
import io.swagger.client.model.InlineResponse2003;
import io.swagger.client.model.OauthAuthBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OAuthApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public OAuthApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OAuthApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for authorizeOAuth
     * @param clientId Client identifier issued to the client during registration (required)
     * @param responseType Must be set to \&quot;code\&quot; for authorization code flow (required)
     * @param scope Space-separated list of requested scope values, OFxPERA requires openid to be included to maintain compatibility with OIDC. (required)
     * @param redirectUri URI to return the user to after authorization is complete (required)
     * @param state Opaque value to maintain state between request and callback (required)
     * @param codeChallenge Code challenge for PKCE (optional)
     * @param codeChallengeMethod Code challenge method for PKCE (optional)
     * @param prompt Prompt for the authorization request (optional)
     * @param nonce Random value used to prevent replay attacks (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call authorizeOAuthCall(String clientId, String responseType, List<String> scope, String redirectUri, String state, String codeChallenge, String codeChallengeMethod, String prompt, String nonce, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/oauth/auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("client_id", clientId));
        if (responseType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("response_type", responseType));
        if (scope != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "scope", scope));
        if (redirectUri != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("redirect_uri", redirectUri));
        if (codeChallenge != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("code_challenge", codeChallenge));
        if (codeChallengeMethod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("code_challenge_method", codeChallengeMethod));
        if (state != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("state", state));
        if (prompt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("prompt", prompt));
        if (nonce != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nonce", nonce));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SignedJWT" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authorizeOAuthValidateBeforeCall(String clientId, String responseType, List<String> scope, String redirectUri, String state, String codeChallenge, String codeChallengeMethod, String prompt, String nonce, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling authorizeOAuth(Async)");
        }
        // verify the required parameter 'responseType' is set
        if (responseType == null) {
            throw new ApiException("Missing the required parameter 'responseType' when calling authorizeOAuth(Async)");
        }
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling authorizeOAuth(Async)");
        }
        // verify the required parameter 'redirectUri' is set
        if (redirectUri == null) {
            throw new ApiException("Missing the required parameter 'redirectUri' when calling authorizeOAuth(Async)");
        }
        // verify the required parameter 'state' is set
        if (state == null) {
            throw new ApiException("Missing the required parameter 'state' when calling authorizeOAuth(Async)");
        }
        
        com.squareup.okhttp.Call call = authorizeOAuthCall(clientId, responseType, scope, redirectUri, state, codeChallenge, codeChallengeMethod, prompt, nonce, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Authorization endpoint
     * OpenID Connect authorization endpoint that initiates the authorization flow
     * @param clientId Client identifier issued to the client during registration (required)
     * @param responseType Must be set to \&quot;code\&quot; for authorization code flow (required)
     * @param scope Space-separated list of requested scope values, OFxPERA requires openid to be included to maintain compatibility with OIDC. (required)
     * @param redirectUri URI to return the user to after authorization is complete (required)
     * @param state Opaque value to maintain state between request and callback (required)
     * @param codeChallenge Code challenge for PKCE (optional)
     * @param codeChallengeMethod Code challenge method for PKCE (optional)
     * @param prompt Prompt for the authorization request (optional)
     * @param nonce Random value used to prevent replay attacks (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void authorizeOAuth(String clientId, String responseType, List<String> scope, String redirectUri, String state, String codeChallenge, String codeChallengeMethod, String prompt, String nonce) throws ApiException {
        authorizeOAuthWithHttpInfo(clientId, responseType, scope, redirectUri, state, codeChallenge, codeChallengeMethod, prompt, nonce);
    }

    /**
     * Authorization endpoint
     * OpenID Connect authorization endpoint that initiates the authorization flow
     * @param clientId Client identifier issued to the client during registration (required)
     * @param responseType Must be set to \&quot;code\&quot; for authorization code flow (required)
     * @param scope Space-separated list of requested scope values, OFxPERA requires openid to be included to maintain compatibility with OIDC. (required)
     * @param redirectUri URI to return the user to after authorization is complete (required)
     * @param state Opaque value to maintain state between request and callback (required)
     * @param codeChallenge Code challenge for PKCE (optional)
     * @param codeChallengeMethod Code challenge method for PKCE (optional)
     * @param prompt Prompt for the authorization request (optional)
     * @param nonce Random value used to prevent replay attacks (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> authorizeOAuthWithHttpInfo(String clientId, String responseType, List<String> scope, String redirectUri, String state, String codeChallenge, String codeChallengeMethod, String prompt, String nonce) throws ApiException {
        com.squareup.okhttp.Call call = authorizeOAuthValidateBeforeCall(clientId, responseType, scope, redirectUri, state, codeChallenge, codeChallengeMethod, prompt, nonce, null, null);
        return apiClient.execute(call);
    }

    /**
     * Authorization endpoint (asynchronously)
     * OpenID Connect authorization endpoint that initiates the authorization flow
     * @param clientId Client identifier issued to the client during registration (required)
     * @param responseType Must be set to \&quot;code\&quot; for authorization code flow (required)
     * @param scope Space-separated list of requested scope values, OFxPERA requires openid to be included to maintain compatibility with OIDC. (required)
     * @param redirectUri URI to return the user to after authorization is complete (required)
     * @param state Opaque value to maintain state between request and callback (required)
     * @param codeChallenge Code challenge for PKCE (optional)
     * @param codeChallengeMethod Code challenge method for PKCE (optional)
     * @param prompt Prompt for the authorization request (optional)
     * @param nonce Random value used to prevent replay attacks (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authorizeOAuthAsync(String clientId, String responseType, List<String> scope, String redirectUri, String state, String codeChallenge, String codeChallengeMethod, String prompt, String nonce, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authorizeOAuthValidateBeforeCall(clientId, responseType, scope, redirectUri, state, codeChallenge, codeChallengeMethod, prompt, nonce, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getOAuthToken
     * @param grantType  (required)
     * @param code  (required)
     * @param redirectUri  (required)
     * @param clientId  (required)
     * @param refreshToken  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOAuthTokenCall(String grantType, String code, String redirectUri, String clientId, String refreshToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/oauth/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (grantType != null)
        localVarFormParams.put("grant_type", grantType);
        if (code != null)
        localVarFormParams.put("code", code);
        if (redirectUri != null)
        localVarFormParams.put("redirect_uri", redirectUri);
        if (clientId != null)
        localVarFormParams.put("client_id", clientId);
        if (refreshToken != null)
        localVarFormParams.put("refresh_token", refreshToken);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SignedJWT" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOAuthTokenValidateBeforeCall(String grantType, String code, String redirectUri, String clientId, String refreshToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'grantType' is set
        if (grantType == null) {
            throw new ApiException("Missing the required parameter 'grantType' when calling getOAuthToken(Async)");
        }
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getOAuthToken(Async)");
        }
        // verify the required parameter 'redirectUri' is set
        if (redirectUri == null) {
            throw new ApiException("Missing the required parameter 'redirectUri' when calling getOAuthToken(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getOAuthToken(Async)");
        }
        // verify the required parameter 'refreshToken' is set
        if (refreshToken == null) {
            throw new ApiException("Missing the required parameter 'refreshToken' when calling getOAuthToken(Async)");
        }
        
        com.squareup.okhttp.Call call = getOAuthTokenCall(grantType, code, redirectUri, clientId, refreshToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Token endpoint
     * 
     * @param grantType  (required)
     * @param code  (required)
     * @param redirectUri  (required)
     * @param clientId  (required)
     * @param refreshToken  (required)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 getOAuthToken(String grantType, String code, String redirectUri, String clientId, String refreshToken) throws ApiException {
        ApiResponse<InlineResponse2001> resp = getOAuthTokenWithHttpInfo(grantType, code, redirectUri, clientId, refreshToken);
        return resp.getData();
    }

    /**
     * Token endpoint
     * 
     * @param grantType  (required)
     * @param code  (required)
     * @param redirectUri  (required)
     * @param clientId  (required)
     * @param refreshToken  (required)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> getOAuthTokenWithHttpInfo(String grantType, String code, String redirectUri, String clientId, String refreshToken) throws ApiException {
        com.squareup.okhttp.Call call = getOAuthTokenValidateBeforeCall(grantType, code, redirectUri, clientId, refreshToken, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Token endpoint (asynchronously)
     * 
     * @param grantType  (required)
     * @param code  (required)
     * @param redirectUri  (required)
     * @param clientId  (required)
     * @param refreshToken  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOAuthTokenAsync(String grantType, String code, String redirectUri, String clientId, String refreshToken, final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOAuthTokenValidateBeforeCall(grantType, code, redirectUri, clientId, refreshToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserInfo
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserInfoCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/oauth/userinfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserInfoValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getUserInfoCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Optional OpenID Connect UserInfo Endpoint
     * OpenID Connect UserInfo Endpoint that returns information about the authenticated user. 
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2003 getUserInfo() throws ApiException {
        ApiResponse<InlineResponse2003> resp = getUserInfoWithHttpInfo();
        return resp.getData();
    }

    /**
     * Optional OpenID Connect UserInfo Endpoint
     * OpenID Connect UserInfo Endpoint that returns information about the authenticated user. 
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2003> getUserInfoWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getUserInfoValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Optional OpenID Connect UserInfo Endpoint (asynchronously)
     * OpenID Connect UserInfo Endpoint that returns information about the authenticated user. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserInfoAsync(final ApiCallback<InlineResponse2003> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserInfoValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for introspectToken
     * @param token  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call introspectTokenCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/oauth/introspect";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("token", token));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call introspectTokenValidateBeforeCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling introspectToken(Async)");
        }
        
        com.squareup.okhttp.Call call = introspectTokenCall(token, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Optional token introspection
     * Endpoint for validating and retrieving metadata about an access token. Returns information about whether the token is active, its associated client, user, scopes, and expiration details. This endpoint allows resource servers to verify tokens before granting access to protected resources. 
     * @param token  (required)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2002 introspectToken(String token) throws ApiException {
        ApiResponse<InlineResponse2002> resp = introspectTokenWithHttpInfo(token);
        return resp.getData();
    }

    /**
     * Optional token introspection
     * Endpoint for validating and retrieving metadata about an access token. Returns information about whether the token is active, its associated client, user, scopes, and expiration details. This endpoint allows resource servers to verify tokens before granting access to protected resources. 
     * @param token  (required)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2002> introspectTokenWithHttpInfo(String token) throws ApiException {
        com.squareup.okhttp.Call call = introspectTokenValidateBeforeCall(token, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Optional token introspection (asynchronously)
     * Endpoint for validating and retrieving metadata about an access token. Returns information about whether the token is active, its associated client, user, scopes, and expiration details. This endpoint allows resource servers to verify tokens before granting access to protected resources. 
     * @param token  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call introspectTokenAsync(String token, final ApiCallback<InlineResponse2002> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = introspectTokenValidateBeforeCall(token, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for oAuthPAR
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call oAuthPARCall(OauthAuthBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/oauth/auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SignedJWT" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call oAuthPARValidateBeforeCall(OauthAuthBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling oAuthPAR(Async)");
        }
        
        com.squareup.okhttp.Call call = oAuthPARCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * [Phase 2] PAR-based Authorization API for FI-initiated onboarding
     * POST version of the authorization API that initiates the authorization flow\&quot;
     * @param body  (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 oAuthPAR(OauthAuthBody body) throws ApiException {
        ApiResponse<InlineResponse200> resp = oAuthPARWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * [Phase 2] PAR-based Authorization API for FI-initiated onboarding
     * POST version of the authorization API that initiates the authorization flow\&quot;
     * @param body  (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> oAuthPARWithHttpInfo(OauthAuthBody body) throws ApiException {
        com.squareup.okhttp.Call call = oAuthPARValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [Phase 2] PAR-based Authorization API for FI-initiated onboarding (asynchronously)
     * POST version of the authorization API that initiates the authorization flow\&quot;
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call oAuthPARAsync(OauthAuthBody body, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = oAuthPARValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
