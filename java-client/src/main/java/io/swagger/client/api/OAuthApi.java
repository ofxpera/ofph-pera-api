/*
 * OFxPERA API
 * Philippines Open Finance API Implementation for PERA
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.OAuthError;
import io.swagger.client.model.OauthAuthBody;
import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.TokenResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OAuthApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public OAuthApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OAuthApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for authorizeOAuth
     * @param clientId Client identifier issued to the client during registration (required)
     * @param responseType Must be set to \&quot;code\&quot; for authorization code flow (required)
     * @param scope Space-separated list of requested scope values, OFxPERA requires openid to be included to maintain compatibility with OIDC. (required)
     * @param redirectUri URI to return the user to after authorization is complete (required)
     * @param state Opaque value to maintain state between request and callback (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param codeChallenge Code challenge for PKCE (optional)
     * @param codeChallengeMethod Code challenge method for PKCE (optional)
     * @param prompt Prompt for the authorization request (optional)
     * @param nonce Random value used to prevent replay attacks (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call authorizeOAuthCall(String clientId, String responseType, List<String> scope, String redirectUri, String state, UUID xIdempotencyKey, OffsetDateTime xFapiAuthDate, OffsetDateTime xFapiCustomerLastLoggedTime, String codeChallenge, String codeChallengeMethod, String prompt, String nonce, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/oauth/auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("client_id", clientId));
        if (responseType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("response_type", responseType));
        if (scope != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "scope", scope));
        if (redirectUri != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("redirect_uri", redirectUri));
        if (codeChallenge != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("code_challenge", codeChallenge));
        if (codeChallengeMethod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("code_challenge_method", codeChallengeMethod));
        if (state != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("state", state));
        if (prompt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("prompt", prompt));
        if (nonce != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nonce", nonce));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xIdempotencyKey != null)
        localVarHeaderParams.put("x-idempotency-key", apiClient.parameterToString(xIdempotencyKey));
        if (xFapiAuthDate != null)
        localVarHeaderParams.put("x-fapi-auth-date", apiClient.parameterToString(xFapiAuthDate));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));
        // Add x-jws-signature header for FAPI Advanced compliance
        localVarHeaderParams.put("x-jws-signature", "");
        // Add Digest header for FAPI Advanced compliance
        localVarHeaderParams.put("Digest", "");

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SignedJWT" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authorizeOAuthValidateBeforeCall(String clientId, String responseType, List<String> scope, String redirectUri, String state, UUID xIdempotencyKey, OffsetDateTime xFapiAuthDate, OffsetDateTime xFapiCustomerLastLoggedTime, String codeChallenge, String codeChallengeMethod, String prompt, String nonce, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling authorizeOAuth(Async)");
        }
        // verify the required parameter 'responseType' is set
        if (responseType == null) {
            throw new ApiException("Missing the required parameter 'responseType' when calling authorizeOAuth(Async)");
        }
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling authorizeOAuth(Async)");
        }
        // verify the required parameter 'redirectUri' is set
        if (redirectUri == null) {
            throw new ApiException("Missing the required parameter 'redirectUri' when calling authorizeOAuth(Async)");
        }
        // verify the required parameter 'state' is set
        if (state == null) {
            throw new ApiException("Missing the required parameter 'state' when calling authorizeOAuth(Async)");
        }
        // verify the required parameter 'xIdempotencyKey' is set
        if (xIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xIdempotencyKey' when calling authorizeOAuth(Async)");
        }
        // verify the required parameter 'xFapiAuthDate' is set
        if (xFapiAuthDate == null) {
            throw new ApiException("Missing the required parameter 'xFapiAuthDate' when calling authorizeOAuth(Async)");
        }
        // verify the required parameter 'xFapiCustomerLastLoggedTime' is set
        if (xFapiCustomerLastLoggedTime == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerLastLoggedTime' when calling authorizeOAuth(Async)");
        }
        
        com.squareup.okhttp.Call call = authorizeOAuthCall(clientId, responseType, scope, redirectUri, state, xIdempotencyKey, xFapiAuthDate, xFapiCustomerLastLoggedTime, codeChallenge, codeChallengeMethod, prompt, nonce, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * [PHASE 1] Authorization endpoint for Admin-initiated onboarding
     * OpenID Connect authorization endpoint that initiates the authorization flow
     * @param clientId Client identifier issued to the client during registration (required)
     * @param responseType Must be set to \&quot;code\&quot; for authorization code flow (required)
     * @param scope Space-separated list of requested scope values, OFxPERA requires openid to be included to maintain compatibility with OIDC. (required)
     * @param redirectUri URI to return the user to after authorization is complete (required)
     * @param state Opaque value to maintain state between request and callback (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param codeChallenge Code challenge for PKCE (optional)
     * @param codeChallengeMethod Code challenge method for PKCE (optional)
     * @param prompt Prompt for the authorization request (optional)
     * @param nonce Random value used to prevent replay attacks (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void authorizeOAuth(String clientId, String responseType, List<String> scope, String redirectUri, String state, UUID xIdempotencyKey, OffsetDateTime xFapiAuthDate, OffsetDateTime xFapiCustomerLastLoggedTime, String codeChallenge, String codeChallengeMethod, String prompt, String nonce) throws ApiException {
        authorizeOAuthWithHttpInfo(clientId, responseType, scope, redirectUri, state, xIdempotencyKey, xFapiAuthDate, xFapiCustomerLastLoggedTime, codeChallenge, codeChallengeMethod, prompt, nonce);
    }

    /**
     * [PHASE 1] Authorization endpoint for Admin-initiated onboarding
     * OpenID Connect authorization endpoint that initiates the authorization flow
     * @param clientId Client identifier issued to the client during registration (required)
     * @param responseType Must be set to \&quot;code\&quot; for authorization code flow (required)
     * @param scope Space-separated list of requested scope values, OFxPERA requires openid to be included to maintain compatibility with OIDC. (required)
     * @param redirectUri URI to return the user to after authorization is complete (required)
     * @param state Opaque value to maintain state between request and callback (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param codeChallenge Code challenge for PKCE (optional)
     * @param codeChallengeMethod Code challenge method for PKCE (optional)
     * @param prompt Prompt for the authorization request (optional)
     * @param nonce Random value used to prevent replay attacks (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> authorizeOAuthWithHttpInfo(String clientId, String responseType, List<String> scope, String redirectUri, String state, UUID xIdempotencyKey, OffsetDateTime xFapiAuthDate, OffsetDateTime xFapiCustomerLastLoggedTime, String codeChallenge, String codeChallengeMethod, String prompt, String nonce) throws ApiException {
        com.squareup.okhttp.Call call = authorizeOAuthValidateBeforeCall(clientId, responseType, scope, redirectUri, state, xIdempotencyKey, xFapiAuthDate, xFapiCustomerLastLoggedTime, codeChallenge, codeChallengeMethod, prompt, nonce, null, null);
        return apiClient.execute(call);
    }

    /**
     * [PHASE 1] Authorization endpoint for Admin-initiated onboarding (asynchronously)
     * OpenID Connect authorization endpoint that initiates the authorization flow
     * @param clientId Client identifier issued to the client during registration (required)
     * @param responseType Must be set to \&quot;code\&quot; for authorization code flow (required)
     * @param scope Space-separated list of requested scope values, OFxPERA requires openid to be included to maintain compatibility with OIDC. (required)
     * @param redirectUri URI to return the user to after authorization is complete (required)
     * @param state Opaque value to maintain state between request and callback (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param codeChallenge Code challenge for PKCE (optional)
     * @param codeChallengeMethod Code challenge method for PKCE (optional)
     * @param prompt Prompt for the authorization request (optional)
     * @param nonce Random value used to prevent replay attacks (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authorizeOAuthAsync(String clientId, String responseType, List<String> scope, String redirectUri, String state, UUID xIdempotencyKey, OffsetDateTime xFapiAuthDate, OffsetDateTime xFapiCustomerLastLoggedTime, String codeChallenge, String codeChallengeMethod, String prompt, String nonce, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authorizeOAuthValidateBeforeCall(clientId, responseType, scope, redirectUri, state, xIdempotencyKey, xFapiAuthDate, xFapiCustomerLastLoggedTime, codeChallenge, codeChallengeMethod, prompt, nonce, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getOAuthToken
     * @param grantType  (required)
     * @param code  (required)
     * @param redirectUri  (required)
     * @param clientId  (required)
     * @param refreshToken  (required)
     * @param clientAssertionType  (required)
     * @param clientAssertion  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOAuthTokenCall(String grantType, String code, String redirectUri, String clientId, String refreshToken, String clientAssertionType, String clientAssertion, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/oauth/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (participantId != null)
        localVarHeaderParams.put("participant-id", apiClient.parameterToString(participantId));
        if (xV != null)
        localVarHeaderParams.put("x-v", apiClient.parameterToString(xV));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (xFapiAuthDate != null)
        localVarHeaderParams.put("x-fapi-auth-date", apiClient.parameterToString(xFapiAuthDate));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xClientHeaders != null)
        localVarHeaderParams.put("x-client-headers", apiClient.parameterToString(xClientHeaders));
        if (xClientUserAgent != null)
        localVarHeaderParams.put("x-client-user-agent", apiClient.parameterToString(xClientUserAgent));
        if (xIdempotencyKey != null)
        localVarHeaderParams.put("x-idempotency-key", apiClient.parameterToString(xIdempotencyKey));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));
        // Add x-jws-signature header for FAPI Advanced compliance
        localVarHeaderParams.put("x-jws-signature", "");
        // Add Digest header for FAPI Advanced compliance
        localVarHeaderParams.put("Digest", "");

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (grantType != null)
        localVarFormParams.put("grant_type", grantType);
        if (code != null)
        localVarFormParams.put("code", code);
        if (redirectUri != null)
        localVarFormParams.put("redirect_uri", redirectUri);
        if (clientId != null)
        localVarFormParams.put("client_id", clientId);
        if (refreshToken != null)
        localVarFormParams.put("refresh_token", refreshToken);
        if (clientAssertionType != null)
        localVarFormParams.put("client_assertion_type", clientAssertionType);
        if (clientAssertion != null)
        localVarFormParams.put("client_assertion", clientAssertion);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SignedJWT" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOAuthTokenValidateBeforeCall(String grantType, String code, String redirectUri, String clientId, String refreshToken, String clientAssertionType, String clientAssertion, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'grantType' is set
        if (grantType == null) {
            throw new ApiException("Missing the required parameter 'grantType' when calling getOAuthToken(Async)");
        }
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getOAuthToken(Async)");
        }
        // verify the required parameter 'redirectUri' is set
        if (redirectUri == null) {
            throw new ApiException("Missing the required parameter 'redirectUri' when calling getOAuthToken(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getOAuthToken(Async)");
        }
        // verify the required parameter 'refreshToken' is set
        if (refreshToken == null) {
            throw new ApiException("Missing the required parameter 'refreshToken' when calling getOAuthToken(Async)");
        }
        // verify the required parameter 'clientAssertionType' is set
        if (clientAssertionType == null) {
            throw new ApiException("Missing the required parameter 'clientAssertionType' when calling getOAuthToken(Async)");
        }
        // verify the required parameter 'clientAssertion' is set
        if (clientAssertion == null) {
            throw new ApiException("Missing the required parameter 'clientAssertion' when calling getOAuthToken(Async)");
        }
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling getOAuthToken(Async)");
        }
        // verify the required parameter 'xV' is set
        if (xV == null) {
            throw new ApiException("Missing the required parameter 'xV' when calling getOAuthToken(Async)");
        }
        // verify the required parameter 'xFapiAuthDate' is set
        if (xFapiAuthDate == null) {
            throw new ApiException("Missing the required parameter 'xFapiAuthDate' when calling getOAuthToken(Async)");
        }
        // verify the required parameter 'xFapiCustomerIpAddress' is set
        if (xFapiCustomerIpAddress == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerIpAddress' when calling getOAuthToken(Async)");
        }
        // verify the required parameter 'xClientHeaders' is set
        if (xClientHeaders == null) {
            throw new ApiException("Missing the required parameter 'xClientHeaders' when calling getOAuthToken(Async)");
        }
        // verify the required parameter 'xClientUserAgent' is set
        if (xClientUserAgent == null) {
            throw new ApiException("Missing the required parameter 'xClientUserAgent' when calling getOAuthToken(Async)");
        }
        // verify the required parameter 'xIdempotencyKey' is set
        if (xIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xIdempotencyKey' when calling getOAuthToken(Async)");
        }
        // verify the required parameter 'xFapiCustomerLastLoggedTime' is set
        if (xFapiCustomerLastLoggedTime == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerLastLoggedTime' when calling getOAuthToken(Async)");
        }
        
        com.squareup.okhttp.Call call = getOAuthTokenCall(grantType, code, redirectUri, clientId, refreshToken, clientAssertionType, clientAssertion, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * [PHASE 1] Token endpoint
     * OAuth 2.0 token endpoint for obtaining access tokens
     * @param grantType  (required)
     * @param code  (required)
     * @param redirectUri  (required)
     * @param clientId  (required)
     * @param refreshToken  (required)
     * @param clientAssertionType  (required)
     * @param clientAssertion  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return TokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TokenResponse getOAuthToken(String grantType, String code, String redirectUri, String clientId, String refreshToken, String clientAssertionType, String clientAssertion, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId) throws ApiException {
        ApiResponse<TokenResponse> resp = getOAuthTokenWithHttpInfo(grantType, code, redirectUri, clientId, refreshToken, clientAssertionType, clientAssertion, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * [PHASE 1] Token endpoint
     * OAuth 2.0 token endpoint for obtaining access tokens
     * @param grantType  (required)
     * @param code  (required)
     * @param redirectUri  (required)
     * @param clientId  (required)
     * @param refreshToken  (required)
     * @param clientAssertionType  (required)
     * @param clientAssertion  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ApiResponse&lt;TokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TokenResponse> getOAuthTokenWithHttpInfo(String grantType, String code, String redirectUri, String clientId, String refreshToken, String clientAssertionType, String clientAssertion, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = getOAuthTokenValidateBeforeCall(grantType, code, redirectUri, clientId, refreshToken, clientAssertionType, clientAssertion, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<TokenResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [PHASE 1] Token endpoint (asynchronously)
     * OAuth 2.0 token endpoint for obtaining access tokens
     * @param grantType  (required)
     * @param code  (required)
     * @param redirectUri  (required)
     * @param clientId  (required)
     * @param refreshToken  (required)
     * @param clientAssertionType  (required)
     * @param clientAssertion  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOAuthTokenAsync(String grantType, String code, String redirectUri, String clientId, String refreshToken, String clientAssertionType, String clientAssertion, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ApiCallback<TokenResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOAuthTokenValidateBeforeCall(grantType, code, redirectUri, clientId, refreshToken, clientAssertionType, clientAssertion, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TokenResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserInfo
     * @param authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;token&gt;&#x27; (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserInfoCall(String authorization, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/oauth/userinfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (participantId != null)
        localVarHeaderParams.put("participant-id", apiClient.parameterToString(participantId));
        if (xV != null)
        localVarHeaderParams.put("x-v", apiClient.parameterToString(xV));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (xFapiAuthDate != null)
        localVarHeaderParams.put("x-fapi-auth-date", apiClient.parameterToString(xFapiAuthDate));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xClientHeaders != null)
        localVarHeaderParams.put("x-client-headers", apiClient.parameterToString(xClientHeaders));
        if (xClientUserAgent != null)
        localVarHeaderParams.put("x-client-user-agent", apiClient.parameterToString(xClientUserAgent));
        if (xIdempotencyKey != null)
        localVarHeaderParams.put("x-idempotency-key", apiClient.parameterToString(xIdempotencyKey));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));
        // Add x-jws-signature header for FAPI Advanced compliance
        localVarHeaderParams.put("x-jws-signature", "");
        // Add Digest header for FAPI Advanced compliance
        localVarHeaderParams.put("Digest", "");

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserInfoValidateBeforeCall(String authorization, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getUserInfo(Async)");
        }
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling getUserInfo(Async)");
        }
        // verify the required parameter 'xV' is set
        if (xV == null) {
            throw new ApiException("Missing the required parameter 'xV' when calling getUserInfo(Async)");
        }
        // verify the required parameter 'xFapiAuthDate' is set
        if (xFapiAuthDate == null) {
            throw new ApiException("Missing the required parameter 'xFapiAuthDate' when calling getUserInfo(Async)");
        }
        // verify the required parameter 'xFapiCustomerIpAddress' is set
        if (xFapiCustomerIpAddress == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerIpAddress' when calling getUserInfo(Async)");
        }
        // verify the required parameter 'xClientHeaders' is set
        if (xClientHeaders == null) {
            throw new ApiException("Missing the required parameter 'xClientHeaders' when calling getUserInfo(Async)");
        }
        // verify the required parameter 'xClientUserAgent' is set
        if (xClientUserAgent == null) {
            throw new ApiException("Missing the required parameter 'xClientUserAgent' when calling getUserInfo(Async)");
        }
        // verify the required parameter 'xIdempotencyKey' is set
        if (xIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xIdempotencyKey' when calling getUserInfo(Async)");
        }
        // verify the required parameter 'xFapiCustomerLastLoggedTime' is set
        if (xFapiCustomerLastLoggedTime == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerLastLoggedTime' when calling getUserInfo(Async)");
        }
        
        com.squareup.okhttp.Call call = getUserInfoCall(authorization, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Optional OpenID Connect UserInfo Endpoint
     * OpenID Connect UserInfo Endpoint that returns information about the authenticated user. 
     * @param authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;token&gt;&#x27; (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 getUserInfo(String authorization, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId) throws ApiException {
        ApiResponse<InlineResponse2001> resp = getUserInfoWithHttpInfo(authorization, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Optional OpenID Connect UserInfo Endpoint
     * OpenID Connect UserInfo Endpoint that returns information about the authenticated user. 
     * @param authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;token&gt;&#x27; (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> getUserInfoWithHttpInfo(String authorization, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = getUserInfoValidateBeforeCall(authorization, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Optional OpenID Connect UserInfo Endpoint (asynchronously)
     * OpenID Connect UserInfo Endpoint that returns information about the authenticated user. 
     * @param authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;token&gt;&#x27; (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserInfoAsync(String authorization, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserInfoValidateBeforeCall(authorization, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for introspectToken
     * @param token  (required)
     * @param authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;token&gt;&#x27; (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call introspectTokenCall(String token, String authorization, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/oauth/introspect";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("token", token));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (participantId != null)
        localVarHeaderParams.put("participant-id", apiClient.parameterToString(participantId));
        if (xV != null)
        localVarHeaderParams.put("x-v", apiClient.parameterToString(xV));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (xFapiAuthDate != null)
        localVarHeaderParams.put("x-fapi-auth-date", apiClient.parameterToString(xFapiAuthDate));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xClientHeaders != null)
        localVarHeaderParams.put("x-client-headers", apiClient.parameterToString(xClientHeaders));
        if (xClientUserAgent != null)
        localVarHeaderParams.put("x-client-user-agent", apiClient.parameterToString(xClientUserAgent));
        if (xIdempotencyKey != null)
        localVarHeaderParams.put("x-idempotency-key", apiClient.parameterToString(xIdempotencyKey));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));
        // Add x-jws-signature header for FAPI Advanced compliance
        localVarHeaderParams.put("x-jws-signature", "");
        // Add Digest header for FAPI Advanced compliance
        localVarHeaderParams.put("Digest", "");

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SignedJWT" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call introspectTokenValidateBeforeCall(String token, String authorization, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling introspectToken(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling introspectToken(Async)");
        }
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling introspectToken(Async)");
        }
        // verify the required parameter 'xV' is set
        if (xV == null) {
            throw new ApiException("Missing the required parameter 'xV' when calling introspectToken(Async)");
        }
        // verify the required parameter 'xFapiAuthDate' is set
        if (xFapiAuthDate == null) {
            throw new ApiException("Missing the required parameter 'xFapiAuthDate' when calling introspectToken(Async)");
        }
        // verify the required parameter 'xFapiCustomerIpAddress' is set
        if (xFapiCustomerIpAddress == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerIpAddress' when calling introspectToken(Async)");
        }
        // verify the required parameter 'xClientHeaders' is set
        if (xClientHeaders == null) {
            throw new ApiException("Missing the required parameter 'xClientHeaders' when calling introspectToken(Async)");
        }
        // verify the required parameter 'xClientUserAgent' is set
        if (xClientUserAgent == null) {
            throw new ApiException("Missing the required parameter 'xClientUserAgent' when calling introspectToken(Async)");
        }
        // verify the required parameter 'xIdempotencyKey' is set
        if (xIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xIdempotencyKey' when calling introspectToken(Async)");
        }
        // verify the required parameter 'xFapiCustomerLastLoggedTime' is set
        if (xFapiCustomerLastLoggedTime == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerLastLoggedTime' when calling introspectToken(Async)");
        }
        
        com.squareup.okhttp.Call call = introspectTokenCall(token, authorization, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Optional token introspection
     * Endpoint for validating and retrieving metadata about an access token. Returns information about whether the token is active, its associated client, user, scopes, and expiration details. This endpoint allows resource servers to verify tokens before granting access to protected resources. 
     * @param token  (required)
     * @param authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;token&gt;&#x27; (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 introspectToken(String token, String authorization, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId) throws ApiException {
        ApiResponse<InlineResponse200> resp = introspectTokenWithHttpInfo(token, authorization, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Optional token introspection
     * Endpoint for validating and retrieving metadata about an access token. Returns information about whether the token is active, its associated client, user, scopes, and expiration details. This endpoint allows resource servers to verify tokens before granting access to protected resources. 
     * @param token  (required)
     * @param authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;token&gt;&#x27; (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> introspectTokenWithHttpInfo(String token, String authorization, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = introspectTokenValidateBeforeCall(token, authorization, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Optional token introspection (asynchronously)
     * Endpoint for validating and retrieving metadata about an access token. Returns information about whether the token is active, its associated client, user, scopes, and expiration details. This endpoint allows resource servers to verify tokens before granting access to protected resources. 
     * @param token  (required)
     * @param authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;token&gt;&#x27; (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call introspectTokenAsync(String token, String authorization, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = introspectTokenValidateBeforeCall(token, authorization, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for oAuthPAR
     * @param body  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call oAuthPARCall(OauthAuthBody body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/oauth/auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (participantId != null)
        localVarHeaderParams.put("participant-id", apiClient.parameterToString(participantId));
        if (xV != null)
        localVarHeaderParams.put("x-v", apiClient.parameterToString(xV));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (xFapiAuthDate != null)
        localVarHeaderParams.put("x-fapi-auth-date", apiClient.parameterToString(xFapiAuthDate));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xClientHeaders != null)
        localVarHeaderParams.put("x-client-headers", apiClient.parameterToString(xClientHeaders));
        if (xClientUserAgent != null)
        localVarHeaderParams.put("x-client-user-agent", apiClient.parameterToString(xClientUserAgent));
        if (xIdempotencyKey != null)
        localVarHeaderParams.put("x-idempotency-key", apiClient.parameterToString(xIdempotencyKey));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));
        // Add x-jws-signature header for FAPI Advanced compliance
        localVarHeaderParams.put("x-jws-signature", "");
        // Add Digest header for FAPI Advanced compliance
        localVarHeaderParams.put("Digest", "");

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "SignedJWT" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call oAuthPARValidateBeforeCall(OauthAuthBody body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling oAuthPAR(Async)");
        }
        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling oAuthPAR(Async)");
        }
        // verify the required parameter 'xV' is set
        if (xV == null) {
            throw new ApiException("Missing the required parameter 'xV' when calling oAuthPAR(Async)");
        }
        // verify the required parameter 'xFapiAuthDate' is set
        if (xFapiAuthDate == null) {
            throw new ApiException("Missing the required parameter 'xFapiAuthDate' when calling oAuthPAR(Async)");
        }
        // verify the required parameter 'xFapiCustomerIpAddress' is set
        if (xFapiCustomerIpAddress == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerIpAddress' when calling oAuthPAR(Async)");
        }
        // verify the required parameter 'xClientHeaders' is set
        if (xClientHeaders == null) {
            throw new ApiException("Missing the required parameter 'xClientHeaders' when calling oAuthPAR(Async)");
        }
        // verify the required parameter 'xClientUserAgent' is set
        if (xClientUserAgent == null) {
            throw new ApiException("Missing the required parameter 'xClientUserAgent' when calling oAuthPAR(Async)");
        }
        // verify the required parameter 'xIdempotencyKey' is set
        if (xIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xIdempotencyKey' when calling oAuthPAR(Async)");
        }
        // verify the required parameter 'xFapiCustomerLastLoggedTime' is set
        if (xFapiCustomerLastLoggedTime == null) {
            throw new ApiException("Missing the required parameter 'xFapiCustomerLastLoggedTime' when calling oAuthPAR(Async)");
        }
        
        com.squareup.okhttp.Call call = oAuthPARCall(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * [PHASE 1] PAR-based Authorization API for FI-initiated onboarding
     * POST version of the authorization API that initiates the authorization flow
     * @param body  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void oAuthPAR(OauthAuthBody body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId) throws ApiException {
        oAuthPARWithHttpInfo(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId);
    }

    /**
     * [PHASE 1] PAR-based Authorization API for FI-initiated onboarding
     * POST version of the authorization API that initiates the authorization flow
     * @param body  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> oAuthPARWithHttpInfo(OauthAuthBody body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = oAuthPARValidateBeforeCall(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * [PHASE 1] PAR-based Authorization API for FI-initiated onboarding (asynchronously)
     * POST version of the authorization API that initiates the authorization flow
     * @param body  (required)
     * @param participantId Field referencing the unique identifier of the requesting participant. (required)
     * @param xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable. (required)
     * @param xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls. (required)
     * @param xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls. (required)
     * @param xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. (required)
     * @param xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements (required)
     * @param xFapiInteractionId An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call oAuthPARAsync(OauthAuthBody body, String participantId, Integer xV, OffsetDateTime xFapiAuthDate, String xFapiCustomerIpAddress, String xClientHeaders, String xClientUserAgent, UUID xIdempotencyKey, OffsetDateTime xFapiCustomerLastLoggedTime, UUID xFapiInteractionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = oAuthPARValidateBeforeCall(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
