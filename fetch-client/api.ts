/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * OFxPERA API
 * Philippines Open Finance API Implementation for PERA
 *
 * OpenAPI spec version: 0.0.7
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://virtserver.swaggerhub.com/voyager-innovation/OFxPERA/0.0.7".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * Format of address values
     * @type {string}
     * @memberof Address
     */
    addressFormat: Address.AddressFormatEnum;
    /**
     * PSGC Code for City
     * @type {string}
     * @memberof Address
     */
    cityMunicipality: string;
    /**
     * PSGC Code for Barangay
     * @type {string}
     * @memberof Address
     */
    barangay?: string;
    /**
     * 
     * @type {StreetAddress}
     * @memberof Address
     */
    streetAddress: StreetAddress;
    /**
     * 
     * @type {BuildingUnitNumber}
     * @memberof Address
     */
    buildingUnitNumber?: BuildingUnitNumber;
    /**
     * 
     * @type {CountryCode}
     * @memberof Address
     */
    country: CountryCode;
    /**
     * 
     * @type {PostalCode}
     * @memberof Address
     */
    postalCode: PostalCode;
}

/**
 * @export
 * @namespace Address
 */
export namespace Address {
    /**
     * @export
     * @enum {string}
     */
    export enum AddressFormatEnum {
        PSGC = <any> 'PSGC'
    }
}
/**
 * 
 * @export
 * @interface AddressString
 */
export interface AddressString {
    /**
     * Format of address values
     * @type {string}
     * @memberof AddressString
     */
    addressFormat: AddressString.AddressFormatEnum;
    /**
     * Region
     * @type {string}
     * @memberof AddressString
     */
    region: string;
    /**
     * Province
     * @type {string}
     * @memberof AddressString
     */
    province: string;
    /**
     * City
     * @type {string}
     * @memberof AddressString
     */
    cityMunicipality?: string;
    /**
     * Barangay
     * @type {string}
     * @memberof AddressString
     */
    barangay?: string;
    /**
     * 
     * @type {StreetAddress}
     * @memberof AddressString
     */
    streetAddress: StreetAddress;
    /**
     * 
     * @type {BuildingUnitNumber}
     * @memberof AddressString
     */
    buildingUnitNumber?: BuildingUnitNumber;
    /**
     * 
     * @type {CountryCode}
     * @memberof AddressString
     */
    country: CountryCode;
    /**
     * 
     * @type {PostalCode}
     * @memberof AddressString
     */
    postalCode: PostalCode;
}

/**
 * @export
 * @namespace AddressString
 */
export namespace AddressString {
    /**
     * @export
     * @enum {string}
     */
    export enum AddressFormatEnum {
        TEXT = <any> 'TEXT'
    }
}
/**
 * 
 * @export
 * @interface ArrangementsBulkupdateBody
 */
export interface ArrangementsBulkupdateBody {
    /**
     * 
     * @type {Array<ConsentcustomerscustomerIdarrangementsbulkupdateUpdates>}
     * @memberof ArrangementsBulkupdateBody
     */
    updates: Array<ConsentcustomerscustomerIdarrangementsbulkupdateUpdates>;
}
/**
 * 
 * @export
 * @interface AuthServer
 */
export interface AuthServer {
    /**
     * 
     * @type {Participant}
     * @memberof AuthServer
     */
    participant: Participant;
    /**
     * 
     * @type {AuthServerURIs}
     * @memberof AuthServer
     */
    authserverConfig: AuthServerURIs;
}
/**
 * Endpoints of the OFxPERA Participant as an Authorization Server
 * @export
 * @interface AuthServerURIs
 */
export interface AuthServerURIs {
    /**
     * URL using the https scheme with no query or fragment component that the OP asserts as its Issuer Identifier
     * @type {string}
     * @memberof AuthServerURIs
     */
    issuer: string;
    /**
     * URL of the OP's OAuth 2.0 Authorization Endpoint
     * @type {string}
     * @memberof AuthServerURIs
     */
    authorizationEndpoint: string;
    /**
     * URL of the OP's OAuth 2.0 Token Endpoint
     * @type {string}
     * @memberof AuthServerURIs
     */
    tokenEndpoint: string;
    /**
     * URL of the OP's UserInfo Endpoint
     * @type {string}
     * @memberof AuthServerURIs
     */
    userInfoEndpoint?: string;
    /**
     * URL at the OP to which an RP can perform a redirect to
     * @type {string}
     * @memberof AuthServerURIs
     */
    endSessionEndpoint?: string;
    /**
     * URL of the OP's Dynamic Client Registration Endpoint
     * @type {string}
     * @memberof AuthServerURIs
     */
    registrationEndpoint?: string;
}
/**
 * Building and/or Unit Number
 * @export
 */
export type BuildingUnitNumber = string
/**
 * 
 * @export
 * @interface BulkConsentRequest
 */
export interface BulkConsentRequest {
    /**
     * 
     * @type {Array<ConsentArrangementRequest>}
     * @memberof BulkConsentRequest
     */
    arrangements: Array<ConsentArrangementRequest>;
    /**
     * Optional identifier for the bulk operation
     * @type {string}
     * @memberof BulkConsentRequest
     */
    batchId?: string;
}
/**
 * 
 * @export
 * @interface BulkConsentResponse
 */
export interface BulkConsentResponse {
    /**
     * 
     * @type {string}
     * @memberof BulkConsentResponse
     */
    batchId?: string;
    /**
     * 
     * @type {Array<BulkConsentResponseResults>}
     * @memberof BulkConsentResponse
     */
    results: Array<BulkConsentResponseResults>;
}
/**
 * 
 * @export
 * @interface BulkConsentResponseError
 */
export interface BulkConsentResponseError {
    /**
     * 
     * @type {string}
     * @memberof BulkConsentResponseError
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof BulkConsentResponseError
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface BulkConsentResponseResults
 */
export interface BulkConsentResponseResults {
    /**
     * 
     * @type {string}
     * @memberof BulkConsentResponseResults
     */
    status: BulkConsentResponseResults.StatusEnum;
    /**
     * 
     * @type {ConsentArrangementResponse}
     * @memberof BulkConsentResponseResults
     */
    arrangement: ConsentArrangementResponse;
    /**
     * 
     * @type {BulkConsentResponseError}
     * @memberof BulkConsentResponseResults
     */
    error?: BulkConsentResponseError;
}

/**
 * @export
 * @namespace BulkConsentResponseResults
 */
export namespace BulkConsentResponseResults {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Success = <any> 'success',
        Failed = <any> 'failed'
    }
}
/**
 * 
 * @export
 * @interface ClientRegistration
 */
export interface ClientRegistration {
    /**
     * Type of application
     * @type {string}
     * @memberof ClientRegistration
     */
    applicationType: ClientRegistration.ApplicationTypeEnum;
    /**
     * Client identifier
     * @type {string}
     * @memberof ClientRegistration
     */
    clientId?: string;
    /**
     * Name of the client
     * @type {string}
     * @memberof ClientRegistration
     */
    clientName: string;
    /**
     * Array of redirect URIs for use in OAuth flows
     * @type {Array<string>}
     * @memberof ClientRegistration
     */
    redirectUris: Array<string>;
    /**
     * Authentication method for token endpoint, OFxPERA Phase 1 requires private_key_jwt
     * @type {string}
     * @memberof ClientRegistration
     */
    tokenEndpointAuthMethod: ClientRegistration.TokenEndpointAuthMethodEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientRegistration
     */
    grantTypes: Array<ClientRegistration.GrantTypesEnum>;
    /**
     * Allowed OAuth response types, OFxPERA requires code.
     * @type {Array<string>}
     * @memberof ClientRegistration
     */
    responseTypes: Array<ClientRegistration.ResponseTypesEnum>;
    /**
     * Space-separated list of requested scopes (e.g. openid profile email address phone)
     * @type {string}
     * @memberof ClientRegistration
     */
    scope?: string;
    /**
     * JWT containing software statement from trusted authority
     * @type {string}
     * @memberof ClientRegistration
     */
    softwareStatement?: string;
    /**
     * 
     * @type {JWKSet}
     * @memberof ClientRegistration
     */
    jwks?: JWKSet;
    /**
     * URI for JSON Web Key Set containing public keys
     * @type {string}
     * @memberof ClientRegistration
     */
    jwksUri?: string;
    /**
     * Legal name of the PERA Participant organization
     * @type {string}
     * @memberof ClientRegistration
     */
    organizationName?: string;
    /**
     * Administrative contact emails
     * @type {Array<string>}
     * @memberof ClientRegistration
     */
    contacts?: Array<string>;
}

/**
 * @export
 * @namespace ClientRegistration
 */
export namespace ClientRegistration {
    /**
     * @export
     * @enum {string}
     */
    export enum ApplicationTypeEnum {
        Web = <any> 'web',
        Native = <any> 'native',
        Hybrid = <any> 'hybrid'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TokenEndpointAuthMethodEnum {
        PrivateKeyJwt = <any> 'private_key_jwt'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum GrantTypesEnum {
        AuthorizationCode = <any> 'authorization_code',
        RefreshToken = <any> 'refresh_token'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum ResponseTypesEnum {
        Code = <any> 'code'
    }
}
/**
 * 
 * @export
 * @interface ClientRegistrationResponse
 */
export interface ClientRegistrationResponse {
    /**
     * Issued client identifier
     * @type {string}
     * @memberof ClientRegistrationResponse
     */
    clientId: string;
    /**
     * Registration access token for subsequent operations
     * @type {string}
     * @memberof ClientRegistrationResponse
     */
    registrationAccessToken: string;
    /**
     * URI for managing the client registration
     * @type {string}
     * @memberof ClientRegistrationResponse
     */
    registrationClientUri?: string;
    /**
     * Time at which the client identifier was issued, in seconds since Unix epoch (1970-01-01T00:00:00Z UTC)
     * @type {number}
     * @memberof ClientRegistrationResponse
     */
    clientIdIssuedAt: number;
}
/**
 * 
 * @export
 * @interface ConsentArrangementRequest
 */
export interface ConsentArrangementRequest {
    /**
     * Identifier of the data holder (financial institution)
     * @type {string}
     * @memberof ConsentArrangementRequest
     */
    dataHolderId: string;
    /**
     * Permissions being requested for data access
     * @type {Array<string>}
     * @memberof ConsentArrangementRequest
     */
    permissions: Array<ConsentArrangementRequest.PermissionsEnum>;
    /**
     * 
     * @type {ConsentArrangementRequestSharingDuration}
     * @memberof ConsentArrangementRequest
     */
    sharingDuration: ConsentArrangementRequestSharingDuration;
    /**
     * Purpose for which the data will be used
     * @type {string}
     * @memberof ConsentArrangementRequest
     */
    purpose: string;
    /**
     * Additional terms and conditions specific to this arrangement
     * @type {Array<ConsentArrangementRequestAdditionalTerms>}
     * @memberof ConsentArrangementRequest
     */
    additionalTerms?: Array<ConsentArrangementRequestAdditionalTerms>;
}

/**
 * @export
 * @namespace ConsentArrangementRequest
 */
export namespace ConsentArrangementRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum PermissionsEnum {
        BASICINFO = <any> 'PERA_BASIC_INFO',
        BALANCE = <any> 'PERA_BALANCE',
        TRANSACTIONS = <any> 'PERA_TRANSACTIONS',
        INVESTMENTDETAILS = <any> 'PERA_INVESTMENT_DETAILS',
        STATEMENTS = <any> 'PERA_STATEMENTS'
    }
}
/**
 * 
 * @export
 * @interface ConsentArrangementRequestAdditionalTerms
 */
export interface ConsentArrangementRequestAdditionalTerms {
    /**
     * 
     * @type {string}
     * @memberof ConsentArrangementRequestAdditionalTerms
     */
    key?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsentArrangementRequestAdditionalTerms
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface ConsentArrangementRequestSharingDuration
 */
export interface ConsentArrangementRequestSharingDuration {
    /**
     * When the consent arrangement should start
     * @type {Date}
     * @memberof ConsentArrangementRequestSharingDuration
     */
    startDate: Date;
    /**
     * When the consent arrangement should end
     * @type {Date}
     * @memberof ConsentArrangementRequestSharingDuration
     */
    endDate: Date;
}
/**
 * 
 * @export
 * @interface ConsentArrangementResponse
 */
export interface ConsentArrangementResponse {
    /**
     * Unique identifier for the consent arrangement
     * @type {string}
     * @memberof ConsentArrangementResponse
     */
    id: string;
    /**
     * Current status of the consent arrangement
     * @type {string}
     * @memberof ConsentArrangementResponse
     */
    status: ConsentArrangementResponse.StatusEnum;
    /**
     * When the consent arrangement was created
     * @type {Date}
     * @memberof ConsentArrangementResponse
     */
    createdAt: Date;
    /**
     * When the consent arrangement was last updated
     * @type {Date}
     * @memberof ConsentArrangementResponse
     */
    lastUpdatedAt?: Date;
    /**
     * Identifier of the data holder
     * @type {string}
     * @memberof ConsentArrangementResponse
     */
    dataHolderId: string;
    /**
     * Granted permissions for data access
     * @type {Array<string>}
     * @memberof ConsentArrangementResponse
     */
    permissions: Array<string>;
    /**
     * 
     * @type {ConsentArrangementResponseSharingDuration}
     * @memberof ConsentArrangementResponse
     */
    sharingDuration: ConsentArrangementResponseSharingDuration;
    /**
     * Purpose for which the data will be used
     * @type {string}
     * @memberof ConsentArrangementResponse
     */
    purpose: string;
    /**
     * 
     * @type {Array<ConsentArrangementRequestAdditionalTerms>}
     * @memberof ConsentArrangementResponse
     */
    additionalTerms?: Array<ConsentArrangementRequestAdditionalTerms>;
    /**
     * 
     * @type {ConsentArrangementResponseRevocationInfo}
     * @memberof ConsentArrangementResponse
     */
    revocationInfo?: ConsentArrangementResponseRevocationInfo;
}

/**
 * @export
 * @namespace ConsentArrangementResponse
 */
export namespace ConsentArrangementResponse {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Active = <any> 'active',
        Expired = <any> 'expired',
        Revoked = <any> 'revoked',
        Suspended = <any> 'suspended'
    }
}
/**
 * Information about consent revocation if applicable
 * @export
 * @interface ConsentArrangementResponseRevocationInfo
 */
export interface ConsentArrangementResponseRevocationInfo {
    /**
     * 
     * @type {Date}
     * @memberof ConsentArrangementResponseRevocationInfo
     */
    revokedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof ConsentArrangementResponseRevocationInfo
     */
    reason?: string;
}
/**
 * 
 * @export
 * @interface ConsentArrangementResponseSharingDuration
 */
export interface ConsentArrangementResponseSharingDuration {
    /**
     * 
     * @type {Date}
     * @memberof ConsentArrangementResponseSharingDuration
     */
    startDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ConsentArrangementResponseSharingDuration
     */
    endDate?: Date;
}
/**
 * 
 * @export
 * @interface ConsentDashboard
 */
export interface ConsentDashboard {
    /**
     * 
     * @type {string}
     * @memberof ConsentDashboard
     */
    customerId: string;
    /**
     * 
     * @type {ConsentDashboardSummary}
     * @memberof ConsentDashboard
     */
    summary: ConsentDashboardSummary;
}
/**
 * 
 * @export
 * @interface ConsentDashboardSummary
 */
export interface ConsentDashboardSummary {
    /**
     * 
     * @type {number}
     * @memberof ConsentDashboardSummary
     */
    totalArrangements: number;
    /**
     * 
     * @type {number}
     * @memberof ConsentDashboardSummary
     */
    activeArrangements: number;
    /**
     * 
     * @type {ConsentDashboardSummaryArrangementsByStatus}
     * @memberof ConsentDashboardSummary
     */
    arrangementsByStatus?: ConsentDashboardSummaryArrangementsByStatus;
    /**
     * 
     * @type {Array<ConsentDashboardSummaryArrangementsByPurpose>}
     * @memberof ConsentDashboardSummary
     */
    arrangementsByPurpose?: Array<ConsentDashboardSummaryArrangementsByPurpose>;
    /**
     * 
     * @type {Array<ConsentDashboardSummaryDataHolders>}
     * @memberof ConsentDashboardSummary
     */
    dataHolders?: Array<ConsentDashboardSummaryDataHolders>;
    /**
     * 
     * @type {Array<ConsentHistory>}
     * @memberof ConsentDashboardSummary
     */
    recentActivity?: Array<ConsentHistory>;
    /**
     * Arrangements expiring in the next 30 days
     * @type {Array<ConsentArrangementResponse>}
     * @memberof ConsentDashboardSummary
     */
    expiringSoon?: Array<ConsentArrangementResponse>;
}
/**
 * 
 * @export
 * @interface ConsentDashboardSummaryArrangementsByPurpose
 */
export interface ConsentDashboardSummaryArrangementsByPurpose {
    /**
     * 
     * @type {string}
     * @memberof ConsentDashboardSummaryArrangementsByPurpose
     */
    purpose?: string;
    /**
     * 
     * @type {number}
     * @memberof ConsentDashboardSummaryArrangementsByPurpose
     */
    count?: number;
}
/**
 * 
 * @export
 * @interface ConsentDashboardSummaryArrangementsByStatus
 */
export interface ConsentDashboardSummaryArrangementsByStatus {
    /**
     * 
     * @type {number}
     * @memberof ConsentDashboardSummaryArrangementsByStatus
     */
    active?: number;
    /**
     * 
     * @type {number}
     * @memberof ConsentDashboardSummaryArrangementsByStatus
     */
    expired?: number;
    /**
     * 
     * @type {number}
     * @memberof ConsentDashboardSummaryArrangementsByStatus
     */
    revoked?: number;
    /**
     * 
     * @type {number}
     * @memberof ConsentDashboardSummaryArrangementsByStatus
     */
    suspended?: number;
}
/**
 * 
 * @export
 * @interface ConsentDashboardSummaryDataHolders
 */
export interface ConsentDashboardSummaryDataHolders {
    /**
     * 
     * @type {string}
     * @memberof ConsentDashboardSummaryDataHolders
     */
    dataHolderId?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsentDashboardSummaryDataHolders
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof ConsentDashboardSummaryDataHolders
     */
    activeArrangements?: number;
}
/**
 * 
 * @export
 * @interface ConsentExtensionRequest
 */
export interface ConsentExtensionRequest {
    /**
     * New end date for the consent arrangement
     * @type {Date}
     * @memberof ConsentExtensionRequest
     */
    newEndDate: Date;
    /**
     * Reason for extending the consent
     * @type {string}
     * @memberof ConsentExtensionRequest
     */
    reason?: string;
    /**
     * 
     * @type {Array<ConsentArrangementRequestAdditionalTerms>}
     * @memberof ConsentExtensionRequest
     */
    additionalTerms?: Array<ConsentArrangementRequestAdditionalTerms>;
}
/**
 * 
 * @export
 * @interface ConsentHistory
 */
export interface ConsentHistory {
    /**
     * The ID of the consent arrangement
     * @type {string}
     * @memberof ConsentHistory
     */
    id: string;
    /**
     * 
     * @type {Array<ConsentHistoryEvents>}
     * @memberof ConsentHistory
     */
    events: Array<ConsentHistoryEvents>;
}
/**
 * 
 * @export
 * @interface ConsentHistoryEvents
 */
export interface ConsentHistoryEvents {
    /**
     * 
     * @type {string}
     * @memberof ConsentHistoryEvents
     */
    eventType: ConsentHistoryEvents.EventTypeEnum;
    /**
     * 
     * @type {Date}
     * @memberof ConsentHistoryEvents
     */
    timestamp: Date;
    /**
     * The entity that performed the action (e.g., user_id, system)
     * @type {string}
     * @memberof ConsentHistoryEvents
     */
    actor: string;
    /**
     * Additional event-specific details
     * @type {any}
     * @memberof ConsentHistoryEvents
     */
    details?: any;
    /**
     * State before the change
     * @type {any}
     * @memberof ConsentHistoryEvents
     */
    previousState?: any;
    /**
     * State after the change
     * @type {any}
     * @memberof ConsentHistoryEvents
     */
    newState?: any;
}

/**
 * @export
 * @namespace ConsentHistoryEvents
 */
export namespace ConsentHistoryEvents {
    /**
     * @export
     * @enum {string}
     */
    export enum EventTypeEnum {
        Created = <any> 'created',
        Updated = <any> 'updated',
        Suspended = <any> 'suspended',
        Resumed = <any> 'resumed',
        Revoked = <any> 'revoked',
        Expired = <any> 'expired',
        Extended = <any> 'extended'
    }
}
/**
 * 
 * @export
 * @interface ConsentStatusUpdate
 */
export interface ConsentStatusUpdate {
    /**
     * New status for the consent arrangement
     * @type {string}
     * @memberof ConsentStatusUpdate
     */
    status: ConsentStatusUpdate.StatusEnum;
    /**
     * Reason for the status update
     * @type {string}
     * @memberof ConsentStatusUpdate
     */
    reason?: string;
}

/**
 * @export
 * @namespace ConsentStatusUpdate
 */
export namespace ConsentStatusUpdate {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Active = <any> 'active',
        Suspended = <any> 'suspended'
    }
}
/**
 * 
 * @export
 * @interface ConsentTemplate
 */
export interface ConsentTemplate {
    /**
     * 
     * @type {string}
     * @memberof ConsentTemplate
     */
    templateId: string;
    /**
     * 
     * @type {string}
     * @memberof ConsentTemplate
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ConsentTemplate
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsentTemplate
     */
    category?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConsentTemplate
     */
    permissions: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ConsentTemplate
     */
    purpose: string;
    /**
     * 
     * @type {ConsentTemplateDefaultDuration}
     * @memberof ConsentTemplate
     */
    defaultDuration?: ConsentTemplateDefaultDuration;
    /**
     * 
     * @type {string}
     * @memberof ConsentTemplate
     */
    termsAndConditions?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsentTemplate
     */
    dataUsagePolicy?: string;
    /**
     * 
     * @type {string}
     * @memberof ConsentTemplate
     */
    version?: string;
}
/**
 * 
 * @export
 * @interface ConsentTemplateDefaultDuration
 */
export interface ConsentTemplateDefaultDuration {
    /**
     * 
     * @type {number}
     * @memberof ConsentTemplateDefaultDuration
     */
    value?: number;
    /**
     * 
     * @type {string}
     * @memberof ConsentTemplateDefaultDuration
     */
    unit?: ConsentTemplateDefaultDuration.UnitEnum;
}

/**
 * @export
 * @namespace ConsentTemplateDefaultDuration
 */
export namespace ConsentTemplateDefaultDuration {
    /**
     * @export
     * @enum {string}
     */
    export enum UnitEnum {
        Days = <any> 'days',
        Months = <any> 'months',
        Years = <any> 'years'
    }
}
/**
 * 
 * @export
 * @interface ConsentcustomerscustomerIdarrangementsbulkupdateUpdates
 */
export interface ConsentcustomerscustomerIdarrangementsbulkupdateUpdates {
    /**
     * 
     * @type {string}
     * @memberof ConsentcustomerscustomerIdarrangementsbulkupdateUpdates
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ConsentcustomerscustomerIdarrangementsbulkupdateUpdates
     */
    action: ConsentcustomerscustomerIdarrangementsbulkupdateUpdates.ActionEnum;
    /**
     * 
     * @type {string}
     * @memberof ConsentcustomerscustomerIdarrangementsbulkupdateUpdates
     */
    reason?: string;
    /**
     * 
     * @type {ConsentExtensionRequest}
     * @memberof ConsentcustomerscustomerIdarrangementsbulkupdateUpdates
     */
    extensionDetails?: ConsentExtensionRequest;
}

/**
 * @export
 * @namespace ConsentcustomerscustomerIdarrangementsbulkupdateUpdates
 */
export namespace ConsentcustomerscustomerIdarrangementsbulkupdateUpdates {
    /**
     * @export
     * @enum {string}
     */
    export enum ActionEnum {
        Revoke = <any> 'revoke',
        Suspend = <any> 'suspend',
        Resume = <any> 'resume',
        Extend = <any> 'extend'
    }
}
/**
 * ISO 3166 Code
 * @export
 */
export type CountryCode = string
/**
 * 
 * @export
 * @interface CustomerDueDiligence
 */
export interface CustomerDueDiligence {
    /**
     * 
     * @type {string}
     * @memberof CustomerDueDiligence
     */
    employmentStatus: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerDueDiligence
     */
    occupation?: string;
    /**
     * PSIC Code
     * @type {string}
     * @memberof CustomerDueDiligence
     */
    natureOfWork?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerDueDiligence
     */
    employerName?: string;
    /**
     * 
     * @type {Address | AddressString}
     * @memberof CustomerDueDiligence
     */
    employerAddress?: Address | AddressString;
    /**
     * Politically Exposed Person 1 - True; 0 - False
     * @type {boolean}
     * @memberof CustomerDueDiligence
     */
    pepIndicator: boolean;
    /**
     * Source of Funds
     * @type {string}
     * @memberof CustomerDueDiligence
     */
    fundSource: string;
    /**
     * Customer Due Diligence Risk Level
     * @type {string}
     * @memberof CustomerDueDiligence
     */
    cddIndicator: CustomerDueDiligence.CddIndicatorEnum;
}

/**
 * @export
 * @namespace CustomerDueDiligence
 */
export namespace CustomerDueDiligence {
    /**
     * @export
     * @enum {string}
     */
    export enum CddIndicatorEnum {
        Low = <any> 'Low',
        Normal = <any> 'Normal',
        High = <any> 'High'
    }
}
/**
 * 
 * @export
 * @interface CustomerInformation
 */
export interface CustomerInformation {
    /**
     * Subject – FI's unique identifier for the End-User
     * @type {string}
     * @memberof CustomerInformation
     */
    sub: string;
    /**
     * The unique identifier for the Consent Arrangement
     * @type {string}
     * @memberof CustomerInformation
     */
    arrangementId: string;
    /**
     * 
     * @type {PersonalInformation}
     * @memberof CustomerInformation
     */
    personalInformation: PersonalInformation;
    /**
     * Array of identification details
     * @type {Array<IdType>}
     * @memberof CustomerInformation
     */
    presentedIds: Array<IdType>;
    /**
     * 
     * @type {CustomerDueDiligence}
     * @memberof CustomerInformation
     */
    cdd: CustomerDueDiligence;
    /**
     * The PERA Admin selected by the Customer
     * @type {string}
     * @memberof CustomerInformation
     */
    peraAdmin?: string;
}
/**
 * 
 * @export
 * @interface EndorsementDetails
 */
export interface EndorsementDetails {
    /**
     * Endorser's unique identifier
     * @type {string}
     * @memberof EndorsementDetails
     */
    endorserId: string;
    /**
     * Subject – FI's unique identifier for the End-User
     * @type {string}
     * @memberof EndorsementDetails
     */
    sub?: string;
    /**
     * Date and time the endorsement was created
     * @type {Date}
     * @memberof EndorsementDetails
     */
    endorsementDate: Date;
    /**
     * Reference ID from the PERA Admin
     * @type {string}
     * @memberof EndorsementDetails
     */
    referenceId?: string;
}
/**
 * 
 * @export
 * @interface EndorsementResponse
 */
export interface EndorsementResponse {
    /**
     * 
     * @type {string}
     * @memberof EndorsementResponse
     */
    status: EndorsementResponse.StatusEnum;
    /**
     * 
     * @type {string}
     * @memberof EndorsementResponse
     */
    message?: string;
    /**
     * 
     * @type {Date}
     * @memberof EndorsementResponse
     */
    timestamp: Date;
    /**
     * 
     * @type {EndorsementDetails}
     * @memberof EndorsementResponse
     */
    endorsementDetails?: EndorsementDetails;
}

/**
 * @export
 * @namespace EndorsementResponse
 */
export namespace EndorsementResponse {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        SUCCESS = <any> 'SUCCESS',
        FAILED = <any> 'FAILED'
    }
}
/**
 * 
 * @export
 * @interface EndpointURIs
 */
export interface EndpointURIs {
}
/**
 * 
 * @export
 * @interface IdType
 */
export interface IdType {
    /**
     * 
     * @type {string}
     * @memberof IdType
     */
    idNumber: string;
    /**
     * Format is YYYY-MM-DD
     * @type {string}
     * @memberof IdType
     */
    idExpiryDate?: string;
    /**
     * ID Type (e.g., \"Drivers License\", \"Passport\", etc.)
     * @type {string}
     * @memberof IdType
     */
    idType: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * Indicates whether the token is currently active.
     * @type {boolean}
     * @memberof InlineResponse200
     */
    active: boolean;
    /**
     * Client identifier for the token.
     * @type {string}
     * @memberof InlineResponse200
     */
    clientId?: string;
    /**
     * Username associated with the token.
     * @type {string}
     * @memberof InlineResponse200
     */
    username?: string;
    /**
     * Scope of the token.
     * @type {string}
     * @memberof InlineResponse200
     */
    scope?: string;
    /**
     * Expiration timestamp of the token in seconds since epoch.
     * @type {number}
     * @memberof InlineResponse200
     */
    exp?: number;
    /**
     * Issued at timestamp of the token in seconds since epoch.
     * @type {number}
     * @memberof InlineResponse200
     */
    iat?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * Unique identifier for the user from the authentication provider's perspective.
     * @type {string}
     * @memberof InlineResponse2001
     */
    sub?: string;
    /**
     * Full name of the user.
     * @type {string}
     * @memberof InlineResponse2001
     */
    name?: string;
    /**
     * Given name of the user.
     * @type {string}
     * @memberof InlineResponse2001
     */
    givenName?: string;
    /**
     * Family name of the user.
     * @type {string}
     * @memberof InlineResponse2001
     */
    familyName?: string;
    /**
     * Email address of the user.
     * @type {string}
     * @memberof InlineResponse2001
     */
    email?: string;
    /**
     * Indicates whether the user's email address has been verified.
     * @type {boolean}
     * @memberof InlineResponse2001
     */
    emailVerified?: boolean;
    /**
     * Phone number of the user.
     * @type {string}
     * @memberof InlineResponse2001
     */
    phoneNumber?: string;
    /**
     * Indicates whether the user's phone number has been verified.
     * @type {boolean}
     * @memberof InlineResponse2001
     */
    phoneNumberVerified?: boolean;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * Base URL that uniquely identifies the authorization server
     * @type {string}
     * @memberof InlineResponse2002
     */
    issuer: string;
    /**
     * Authorization endpoint URL for initiating the OAuth 2.0 flow
     * @type {string}
     * @memberof InlineResponse2002
     */
    authorizationEndpoint: string;
    /**
     * Token endpoint URL for obtaining access tokens
     * @type {string}
     * @memberof InlineResponse2002
     */
    tokenEndpoint: string;
    /**
     * UserInfo endpoint URL for retrieving authenticated user information
     * @type {string}
     * @memberof InlineResponse2002
     */
    userinfoEndpoint?: string;
    /**
     * URL for retrieving the JSON Web Key Set used to validate JWTs
     * @type {string}
     * @memberof InlineResponse2002
     */
    jwksUri: string;
    /**
     * Dynamic Client Registration endpoint URL
     * @type {string}
     * @memberof InlineResponse2002
     */
    registrationEndpoint: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponse2002
     */
    scopesSupported?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponse2002
     */
    responseTypesSupported?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponse2002
     */
    grantTypesSupported?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponse2002
     */
    subjectTypesSupported?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponse2002
     */
    idTokenSigningAlgValuesSupported?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponse2002
     */
    tokenEndpointAuthMethodsSupported?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponse2002
     */
    claimsSupported?: Array<string>;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003
     */
    customerId: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2003
     */
    totalArrangements?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2003
     */
    activeArrangements?: number;
    /**
     * 
     * @type {Array<ConsentArrangementResponse>}
     * @memberof InlineResponse2003
     */
    arrangements: Array<ConsentArrangementResponse>;
}
/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004
     */
    customerId: string;
    /**
     * 
     * @type {Array<InlineResponse2004Results>}
     * @memberof InlineResponse2004
     */
    results: Array<InlineResponse2004Results>;
}
/**
 * 
 * @export
 * @interface InlineResponse2004Results
 */
export interface InlineResponse2004Results {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004Results
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004Results
     */
    status: InlineResponse2004Results.StatusEnum;
    /**
     * 
     * @type {BulkConsentResponseError}
     * @memberof InlineResponse2004Results
     */
    error?: BulkConsentResponseError;
}

/**
 * @export
 * @namespace InlineResponse2004Results
 */
export namespace InlineResponse2004Results {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Success = <any> 'success',
        Failed = <any> 'failed'
    }
}
/**
 * 
 * @export
 * @interface JWKSet
 */
export interface JWKSet {
    /**
     * Array of JWK values representing public keys for verifying JWTs
     * @type {Array<JWKSetKeys>}
     * @memberof JWKSet
     */
    keys: Array<JWKSetKeys>;
}
/**
 * 
 * @export
 * @interface JWKSetKeys
 */
export interface JWKSetKeys {
    /**
     * Key type
     * @type {string}
     * @memberof JWKSetKeys
     */
    kty: JWKSetKeys.KtyEnum;
    /**
     * Key ID
     * @type {string}
     * @memberof JWKSetKeys
     */
    kid?: string;
    /**
     * Key usage (e.g., \"sig\" for signing)
     * @type {string}
     * @memberof JWKSetKeys
     */
    use?: string;
    /**
     * Algorithm (e.g., \"RS256\")
     * @type {string}
     * @memberof JWKSetKeys
     */
    alg?: string;
    /**
     * RSA modulus for RSA keys
     * @type {string}
     * @memberof JWKSetKeys
     */
    n?: string;
    /**
     * RSA public exponent for RSA keys
     * @type {string}
     * @memberof JWKSetKeys
     */
    e?: string;
    /**
     * X coordinate for EC keys
     * @type {string}
     * @memberof JWKSetKeys
     */
    x?: string;
    /**
     * Y coordinate for EC keys
     * @type {string}
     * @memberof JWKSetKeys
     */
    y?: string;
    /**
     * Curve type for EC keys
     * @type {string}
     * @memberof JWKSetKeys
     */
    crv?: JWKSetKeys.CrvEnum;
    /**
     * X.509 certificate chain
     * @type {Array<string>}
     * @memberof JWKSetKeys
     */
    x5c?: Array<string>;
    /**
     * X.509 certificate SHA-1 thumbprint
     * @type {string}
     * @memberof JWKSetKeys
     */
    x5t?: string;
}

/**
 * @export
 * @namespace JWKSetKeys
 */
export namespace JWKSetKeys {
    /**
     * @export
     * @enum {string}
     */
    export enum KtyEnum {
        RSA = <any> 'RSA',
        EC = <any> 'EC'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum CrvEnum {
        _256 = <any> 'P-256',
        _384 = <any> 'P-384',
        _521 = <any> 'P-521'
    }
}
/**
 * 
 * @export
 * @interface JwksConfiguration
 */
export interface JwksConfiguration {
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * Error message describing the error
     * @type {string}
     * @memberof ModelError
     */
    error?: string;
    /**
     * Additional details about the error
     * @type {Array<string>}
     * @memberof ModelError
     */
    details?: Array<string>;
}
/**
 * 
 * @export
 * @interface OAuthClient
 */
export interface OAuthClient {
    /**
     * 
     * @type {Participant}
     * @memberof OAuthClient
     */
    participant: Participant;
    /**
     * Array of OAuth client configurations for this participant
     * @type {Array<ClientRegistration>}
     * @memberof OAuthClient
     */
    clientConfig: Array<ClientRegistration>;
}
/**
 * API Endpoints of the OFxPERA Participant as an OAuth client
 * @export
 * @interface OAuthClientURIs
 */
export interface OAuthClientURIs {
    /**
     * Array of redirect URIs to be used in OAuth 2.0 flows
     * @type {Array<string>}
     * @memberof OAuthClientURIs
     */
    redirectUris: Array<string>;
}
/**
 * 
 * @export
 * @interface OAuthError
 */
export interface OAuthError {
    /**
     * Error code as defined in RFC 6749
     * @type {string}
     * @memberof OAuthError
     */
    error: OAuthError.ErrorEnum;
    /**
     * Human-readable error description
     * @type {string}
     * @memberof OAuthError
     */
    errorDescription?: string;
    /**
     * URI to error documentation
     * @type {string}
     * @memberof OAuthError
     */
    errorUri?: string;
}

/**
 * @export
 * @namespace OAuthError
 */
export namespace OAuthError {
    /**
     * @export
     * @enum {string}
     */
    export enum ErrorEnum {
        InvalidRequest = <any> 'invalid_request',
        InvalidClient = <any> 'invalid_client',
        InvalidGrant = <any> 'invalid_grant',
        UnauthorizedClient = <any> 'unauthorized_client',
        UnsupportedGrantType = <any> 'unsupported_grant_type',
        InvalidScope = <any> 'invalid_scope'
    }
}
/**
 * 
 * @export
 * @interface OauthAuthBody
 */
export interface OauthAuthBody {
    /**
     * Participant identifier of the FI issued during registration
     * @type {string}
     * @memberof OauthAuthBody
     */
    participantId: string;
    /**
     * 
     * @type {EndorsementDetails}
     * @memberof OauthAuthBody
     */
    endorsementDetails?: EndorsementDetails;
    /**
     * Authorization code
     * @type {string}
     * @memberof OauthAuthBody
     */
    authorizationCode?: string;
    /**
     * Must be set to \"code\" for authorization code flow
     * @type {string}
     * @memberof OauthAuthBody
     */
    responseType: OauthAuthBody.ResponseTypeEnum;
    /**
     * Space-separated list of requested scope values, OFxPERA requires openid to be included to maintain compatibility with OIDC.
     * @type {Array<string>}
     * @memberof OauthAuthBody
     */
    scope?: Array<OauthAuthBody.ScopeEnum>;
    /**
     * URI of the token endpoint for retrieving access tokens
     * @type {string}
     * @memberof OauthAuthBody
     */
    tokenEndpoint?: string;
    /**
     * Code challenge for PKCE
     * @type {string}
     * @memberof OauthAuthBody
     */
    codeChallenge?: string;
    /**
     * Code challenge method for PKCE
     * @type {string}
     * @memberof OauthAuthBody
     */
    codeChallengeMethod?: OauthAuthBody.CodeChallengeMethodEnum;
    /**
     * Opaque value to maintain state between request and callback
     * @type {string}
     * @memberof OauthAuthBody
     */
    state?: string;
    /**
     * Prompt for the authorization request
     * @type {string}
     * @memberof OauthAuthBody
     */
    prompt?: string;
    /**
     * Random value used to prevent replay attacks
     * @type {string}
     * @memberof OauthAuthBody
     */
    nonce?: string;
}

/**
 * @export
 * @namespace OauthAuthBody
 */
export namespace OauthAuthBody {
    /**
     * @export
     * @enum {string}
     */
    export enum ResponseTypeEnum {
        Code = <any> 'code',
        Endorsement = <any> 'endorsement'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum ScopeEnum {
        Openid = <any> 'openid',
        Profile = <any> 'profile',
        Email = <any> 'email',
        Address = <any> 'address',
        Phone = <any> 'phone'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum CodeChallengeMethodEnum {
        S256 = <any> 'S256'
    }
}
/**
 * 
 * @export
 * @interface OauthTokenBody
 */
export interface OauthTokenBody {
    /**
     * 
     * @type {string}
     * @memberof OauthTokenBody
     */
    grantType: OauthTokenBody.GrantTypeEnum;
    /**
     * Authorization code received from the authorization server.
     * @type {string}
     * @memberof OauthTokenBody
     */
    code: string;
    /**
     * Redirect URI used in the authorization request.
     * @type {string}
     * @memberof OauthTokenBody
     */
    redirectUri: string;
    /**
     * Client identifier for the token request.
     * @type {string}
     * @memberof OauthTokenBody
     */
    clientId: string;
    /**
     * Refresh token used to obtain a new access token.
     * @type {string}
     * @memberof OauthTokenBody
     */
    refreshToken?: string;
    /**
     * value must be \"urn:ietf:params:oauth:assertion-type:jwt-bearer\"
     * @type {string}
     * @memberof OauthTokenBody
     */
    clientAssertionType: OauthTokenBody.ClientAssertionTypeEnum;
    /**
     * JWT assertion containing client credentials.
     * @type {string}
     * @memberof OauthTokenBody
     */
    clientAssertion: string;
}

/**
 * @export
 * @namespace OauthTokenBody
 */
export namespace OauthTokenBody {
    /**
     * @export
     * @enum {string}
     */
    export enum GrantTypeEnum {
        AuthorizationCode = <any> 'authorization_code',
        RefreshToken = <any> 'refresh_token'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum ClientAssertionTypeEnum {
        UrnietfparamsoauthassertionTypejwtBearer = <any> 'urn:ietf:params:oauth:assertion-type:jwt-bearer'
    }
}
/**
 * 
 * @export
 * @interface Participant
 */
export interface Participant {
    /**
     * Unique identifier for the participant
     * @type {string}
     * @memberof Participant
     */
    participantId?: string;
    /**
     * Trading name of the participant
     * @type {string}
     * @memberof Participant
     */
    participantName?: string;
    /**
     * Types of roles this participant can perform
     * @type {Array<string>}
     * @memberof Participant
     */
    participantType?: Array<Participant.ParticipantTypeEnum>;
    /**
     * Short Description of the participant (Required for PERA Admin)
     * @type {string}
     * @memberof Participant
     */
    participantDescription?: string;
    /**
     * logo uri of the participant
     * @type {string}
     * @memberof Participant
     */
    participantLogoUri?: string;
    /**
     * 
     * @type {string}
     * @memberof Participant
     */
    status?: Participant.StatusEnum;
    /**
     * 
     * @type {JWKSet}
     * @memberof Participant
     */
    jwks: JWKSet;
    /**
     * 
     * @type {ParticipantContact}
     * @memberof Participant
     */
    contact?: ParticipantContact;
    /**
     * 
     * @type {Address}
     * @memberof Participant
     */
    address?: Address;
}

/**
 * @export
 * @namespace Participant
 */
export namespace Participant {
    /**
     * @export
     * @enum {string}
     */
    export enum ParticipantTypeEnum {
        OauthClient = <any> 'oauth_client',
        AuthServer = <any> 'auth_server'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Active = <any> 'active',
        Inactive = <any> 'inactive',
        Suspended = <any> 'suspended'
    }
}
/**
 * 
 * @export
 * @interface ParticipantConfig
 */
export interface ParticipantConfig {
}
/**
 * 
 * @export
 * @interface ParticipantContact
 */
export interface ParticipantContact {
    /**
     * Contact phone number
     * @type {string}
     * @memberof ParticipantContact
     */
    phone: string;
    /**
     * Contact email address
     * @type {string}
     * @memberof ParticipantContact
     */
    email: string;
}
/**
 * 
 * @export
 * @interface PeraAccount
 */
export interface PeraAccount {
    /**
     * Generated by the PERA admin, this is the unique identifier of the customer's PERA account
     * @type {string}
     * @memberof PeraAccount
     */
    id: string;
    /**
     * PERA Administrator's unique identifier for the customer's PERA account
     * @type {string}
     * @memberof PeraAccount
     */
    accountId: string;
    /**
     * Date and time when the PERA account was created
     * @type {Date}
     * @memberof PeraAccount
     */
    creationDate: Date;
    /**
     * 
     * @type {PeraProduct}
     * @memberof PeraAccount
     */
    product?: PeraProduct;
    /**
     * 
     * @type {PeraAccountBalance}
     * @memberof PeraAccount
     */
    balance?: PeraAccountBalance;
}
/**
 * 
 * @export
 * @interface PeraAccountBalance
 */
export interface PeraAccountBalance {
    /**
     * Current value of the PERA arrangement
     * @type {number}
     * @memberof PeraAccountBalance
     */
    currentValue?: number;
    /**
     * Currency of the balance amounts
     * @type {string}
     * @memberof PeraAccountBalance
     */
    currency?: string;
    /**
     * Timestamp of when the balance was last updated
     * @type {Date}
     * @memberof PeraAccountBalance
     */
    asOf?: Date;
}
/**
 * 
 * @export
 * @interface PeraArrangement
 */
export interface PeraArrangement {
    /**
     * Generated by the PERA admin, this is the unique identifier for the PERA arrangement
     * @type {string}
     * @memberof PeraArrangement
     */
    id: string;
    /**
     * Participant Identifier of the PERA Administrator managing this arrangement
     * @type {string}
     * @memberof PeraArrangement
     */
    adminId: string;
    /**
     * PERA Administrator's unique identifier of the customer who owns the PERA arrangement
     * @type {string}
     * @memberof PeraArrangement
     */
    customerId: string;
    /**
     * Subject – FI's unique identifier for the End-User
     * @type {string}
     * @memberof PeraArrangement
     */
    sub: string;
    /**
     * Unique identifier of the consent provided by the Customer to the FI
     * @type {string}
     * @memberof PeraArrangement
     */
    consentId: string;
    /**
     * Current status of the PERA arrangement
     * @type {string}
     * @memberof PeraArrangement
     */
    status: PeraArrangement.StatusEnum;
    /**
     * Reason for the resulting status of the arrangement, mostly used for DECLINED status.
     * @type {string}
     * @memberof PeraArrangement
     */
    reason?: PeraArrangement.ReasonEnum;
    /**
     * Date and time when the PERA arrangement was created
     * @type {Date}
     * @memberof PeraArrangement
     */
    creationDate: Date;
}

/**
 * @export
 * @namespace PeraArrangement
 */
export namespace PeraArrangement {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Active = <any> 'active',
        Declined = <any> 'declined',
        Closed = <any> 'closed'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum ReasonEnum {
        InvalidTin = <any> 'invalid_tin',
        ExistingAccount = <any> 'existing_account',
        IncompleteInfo = <any> 'incomplete_info',
        FailedDd = <any> 'failed_dd',
        FailedCc = <any> 'failed_cc',
        Others = <any> 'others'
    }
}
/**
 * 
 * @export
 * @interface PeraProduct
 */
export interface PeraProduct {
    /**
     * Unique Identifier for the product
     * @type {string}
     * @memberof PeraProduct
     */
    productId?: string;
    /**
     * The name of the product
     * @type {string}
     * @memberof PeraProduct
     */
    productName?: string;
    /**
     * A detailed description of the product
     * @type {string}
     * @memberof PeraProduct
     */
    productDescription?: string;
    /**
     * The risk rating of the product
     * @type {string}
     * @memberof PeraProduct
     */
    productRiskRating?: PeraProduct.ProductRiskRatingEnum;
    /**
     * URI to the KIID (Key Investor Information Document) for the product
     * @type {string}
     * @memberof PeraProduct
     */
    productKiidUri?: string;
}

/**
 * @export
 * @namespace PeraProduct
 */
export namespace PeraProduct {
    /**
     * @export
     * @enum {string}
     */
    export enum ProductRiskRatingEnum {
        Conservative = <any> 'conservative',
        Moderate = <any> 'moderate',
        Aggressive = <any> 'aggressive'
    }
}
/**
 * 
 * @export
 * @interface PersonalInformation
 */
export interface PersonalInformation {
    /**
     * Subject – FI's unique identifier for the End-User
     * @type {string}
     * @memberof PersonalInformation
     */
    sub: string;
    /**
     * 
     * @type {string}
     * @memberof PersonalInformation
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonalInformation
     */
    givenName: string;
    /**
     * 
     * @type {string}
     * @memberof PersonalInformation
     */
    middleName?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonalInformation
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof PersonalInformation
     */
    suffix?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonalInformation
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonalInformation
     */
    mobileNumber: string;
    /**
     * 
     * @type {string}
     * @memberof PersonalInformation
     */
    email: string;
    /**
     * Format YYYY-MM-DD
     * @type {string}
     * @memberof PersonalInformation
     */
    birthdate: string;
    /**
     * ISO 3166 Code
     * @type {string}
     * @memberof PersonalInformation
     */
    nationality: string;
    /**
     * 
     * @type {Address | AddressString}
     * @memberof PersonalInformation
     */
    residentialAddress: Address | AddressString;
    /**
     * Format NNN-NNN-NNN-000
     * @type {string}
     * @memberof PersonalInformation
     */
    tin?: string;
}
/**
 * Postal Code
 * @export
 */
export type PostalCode = string
/**
 * Street Address
 * @export
 */
export type StreetAddress = string
/**
 * 
 * @export
 * @interface TokenResponse
 */
export interface TokenResponse {
    /**
     * The access token string as issued by the authorization server
     * @type {string}
     * @memberof TokenResponse
     */
    accessToken: string;
    /**
     * Type of access token, fixed to Bearer
     * @type {string}
     * @memberof TokenResponse
     */
    tokenType: TokenResponse.TokenTypeEnum;
    /**
     * Lifetime in seconds of the access token
     * @type {number}
     * @memberof TokenResponse
     */
    expiresIn: number;
    /**
     * Refresh token used to obtain a new access token.
     * @type {string}
     * @memberof TokenResponse
     */
    refreshToken?: string;
    /**
     * ID Token value associated with the authenticated session
     * @type {string}
     * @memberof TokenResponse
     */
    idToken: string;
    /**
     * Space-separated list of scopes granted
     * @type {string}
     * @memberof TokenResponse
     */
    scope?: string;
}

/**
 * @export
 * @namespace TokenResponse
 */
export namespace TokenResponse {
    /**
     * @export
     * @enum {string}
     */
    export enum TokenTypeEnum {
        Bearer = <any> 'Bearer'
    }
}
/**
 * BootstrapApi - fetch parameter creator
 * @export
 */
export const BootstrapApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * API for retrieving registration information for a specific OFxPERA Participant
         * @summary [PHASE 2] Get an OFxPERA Participant's registration information
         * @param {string} participantId Participant identifier issued during participant registration
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipant(participantId: string, participantId: string, xV: number, xFapiInteractionId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling getParticipant.');
            }
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling getParticipant.');
            }
            // verify required parameter 'xV' is not null or undefined
            if (xV === null || xV === undefined) {
                throw new RequiredError('xV','Required parameter xV was null or undefined when calling getParticipant.');
            }
            const localVarPath = `/ofxpera/participants/{participant_id}`
                .replace(`{${"participant_id"}}`, encodeURIComponent(String(participantId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SignedJWT required

            if (participantId !== undefined && participantId !== null) {
                localVarHeaderParameter['participant-id'] = String(participantId);
            }

            if (xV !== undefined && xV !== null) {
                localVarHeaderParameter['x-v'] = String(xV);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API for retrieving all registered OFxPERA Participants
         * @summary [PHASE 1] Get a list of registered OFxPERA Participants
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listParticipants(participantId: string, xV: number, xFapiInteractionId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling listParticipants.');
            }
            // verify required parameter 'xV' is not null or undefined
            if (xV === null || xV === undefined) {
                throw new RequiredError('xV','Required parameter xV was null or undefined when calling listParticipants.');
            }
            const localVarPath = `/ofxpera/participants`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SignedJWT required

            if (participantId !== undefined && participantId !== null) {
                localVarHeaderParameter['participant-id'] = String(participantId);
            }

            if (xV !== undefined && xV !== null) {
                localVarHeaderParameter['x-v'] = String(xV);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API for retrieving all registered products associated with the PERA Admin.
         * @summary [PHASE 1] Get a list of PERA products associated with PERA Admin
         * @param {string} participantId Participant identifier issued during Participant registration
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductByParticipant(participantId: string, participantId: string, xV: number, xFapiInteractionId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling listProductByParticipant.');
            }
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling listProductByParticipant.');
            }
            // verify required parameter 'xV' is not null or undefined
            if (xV === null || xV === undefined) {
                throw new RequiredError('xV','Required parameter xV was null or undefined when calling listProductByParticipant.');
            }
            const localVarPath = `/ofxpera/products/{participant_id}`
                .replace(`{${"participant_id"}}`, encodeURIComponent(String(participantId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SignedJWT required

            if (participantId !== undefined && participantId !== null) {
                localVarHeaderParameter['participant-id'] = String(participantId);
            }

            if (xV !== undefined && xV !== null) {
                localVarHeaderParameter['x-v'] = String(xV);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API for registering an OFxPERA Participant following FAPI Dynamic Client Registration requirements
         * @summary [PHASE 2] Register an OFxPERA Participant
         * @param {ParticipantConfig} body 
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerParticipant(body: ParticipantConfig, xV: number, xFapiInteractionId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling registerParticipant.');
            }
            // verify required parameter 'xV' is not null or undefined
            if (xV === null || xV === undefined) {
                throw new RequiredError('xV','Required parameter xV was null or undefined when calling registerParticipant.');
            }
            const localVarPath = `/ofxpera/participants`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SignedJWT required

            if (xV !== undefined && xV !== null) {
                localVarHeaderParameter['x-v'] = String(xV);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ParticipantConfig" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API that allows PERA Admin to register a PERA product.
         * @summary [PHASE 2] Register a PERA Admin Product
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerProduct(participantId: string, xV: number, xFapiInteractionId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling registerProduct.');
            }
            // verify required parameter 'xV' is not null or undefined
            if (xV === null || xV === undefined) {
                throw new RequiredError('xV','Required parameter xV was null or undefined when calling registerProduct.');
            }
            const localVarPath = `/ofxpera/products`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SignedJWT required

            if (participantId !== undefined && participantId !== null) {
                localVarHeaderParameter['participant-id'] = String(participantId);
            }

            if (xV !== undefined && xV !== null) {
                localVarHeaderParameter['x-v'] = String(xV);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API for updating the URIs and status of an OFxPERA Participant
         * @summary [PHASE 2] Update an OFxPERA Participant
         * @param {ParticipantConfig} body 
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateParticipant(body: ParticipantConfig, participantId: string, xV: number, xFapiInteractionId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateParticipant.');
            }
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling updateParticipant.');
            }
            // verify required parameter 'xV' is not null or undefined
            if (xV === null || xV === undefined) {
                throw new RequiredError('xV','Required parameter xV was null or undefined when calling updateParticipant.');
            }
            const localVarPath = `/ofxpera/participants`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SignedJWT required

            if (participantId !== undefined && participantId !== null) {
                localVarHeaderParameter['participant-id'] = String(participantId);
            }

            if (xV !== undefined && xV !== null) {
                localVarHeaderParameter['x-v'] = String(xV);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ParticipantConfig" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API that allows PERA Admin to update their product.
         * @summary [PHASE 2] Update a PERA Admin Product
         * @param {string} productId Product identifier issued during product registration
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct(productId: string, participantId: string, xV: number, xFapiInteractionId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling updateProduct.');
            }
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling updateProduct.');
            }
            // verify required parameter 'xV' is not null or undefined
            if (xV === null || xV === undefined) {
                throw new RequiredError('xV','Required parameter xV was null or undefined when calling updateProduct.');
            }
            const localVarPath = `/ofxpera/products/{product_id}`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SignedJWT required

            if (participantId !== undefined && participantId !== null) {
                localVarHeaderParameter['participant-id'] = String(participantId);
            }

            if (xV !== undefined && xV !== null) {
                localVarHeaderParameter['x-v'] = String(xV);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BootstrapApi - functional programming interface
 * @export
 */
export const BootstrapApiFp = function(configuration?: Configuration) {
    return {
        /**
         * API for retrieving registration information for a specific OFxPERA Participant
         * @summary [PHASE 2] Get an OFxPERA Participant's registration information
         * @param {string} participantId Participant identifier issued during participant registration
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipant(participantId: string, participantId: string, xV: number, xFapiInteractionId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ParticipantConfig> {
            const localVarFetchArgs = BootstrapApiFetchParamCreator(configuration).getParticipant(participantId, participantId, xV, xFapiInteractionId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * API for retrieving all registered OFxPERA Participants
         * @summary [PHASE 1] Get a list of registered OFxPERA Participants
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listParticipants(participantId: string, xV: number, xFapiInteractionId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ParticipantConfig>> {
            const localVarFetchArgs = BootstrapApiFetchParamCreator(configuration).listParticipants(participantId, xV, xFapiInteractionId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * API for retrieving all registered products associated with the PERA Admin.
         * @summary [PHASE 1] Get a list of PERA products associated with PERA Admin
         * @param {string} participantId Participant identifier issued during Participant registration
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductByParticipant(participantId: string, participantId: string, xV: number, xFapiInteractionId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<PeraProduct>> {
            const localVarFetchArgs = BootstrapApiFetchParamCreator(configuration).listProductByParticipant(participantId, participantId, xV, xFapiInteractionId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * API for registering an OFxPERA Participant following FAPI Dynamic Client Registration requirements
         * @summary [PHASE 2] Register an OFxPERA Participant
         * @param {ParticipantConfig} body 
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerParticipant(body: ParticipantConfig, xV: number, xFapiInteractionId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ClientRegistrationResponse> {
            const localVarFetchArgs = BootstrapApiFetchParamCreator(configuration).registerParticipant(body, xV, xFapiInteractionId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * API that allows PERA Admin to register a PERA product.
         * @summary [PHASE 2] Register a PERA Admin Product
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerProduct(participantId: string, xV: number, xFapiInteractionId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PeraProduct> {
            const localVarFetchArgs = BootstrapApiFetchParamCreator(configuration).registerProduct(participantId, xV, xFapiInteractionId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * API for updating the URIs and status of an OFxPERA Participant
         * @summary [PHASE 2] Update an OFxPERA Participant
         * @param {ParticipantConfig} body 
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateParticipant(body: ParticipantConfig, participantId: string, xV: number, xFapiInteractionId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ClientRegistrationResponse> {
            const localVarFetchArgs = BootstrapApiFetchParamCreator(configuration).updateParticipant(body, participantId, xV, xFapiInteractionId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * API that allows PERA Admin to update their product.
         * @summary [PHASE 2] Update a PERA Admin Product
         * @param {string} productId Product identifier issued during product registration
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct(productId: string, participantId: string, xV: number, xFapiInteractionId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PeraProduct> {
            const localVarFetchArgs = BootstrapApiFetchParamCreator(configuration).updateProduct(productId, participantId, xV, xFapiInteractionId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * BootstrapApi - factory interface
 * @export
 */
export const BootstrapApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * API for retrieving registration information for a specific OFxPERA Participant
         * @summary [PHASE 2] Get an OFxPERA Participant's registration information
         * @param {string} participantId Participant identifier issued during participant registration
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipant(participantId: string, participantId: string, xV: number, xFapiInteractionId?: string, options?: any) {
            return BootstrapApiFp(configuration).getParticipant(participantId, participantId, xV, xFapiInteractionId, options)(fetch, basePath);
        },
        /**
         * API for retrieving all registered OFxPERA Participants
         * @summary [PHASE 1] Get a list of registered OFxPERA Participants
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listParticipants(participantId: string, xV: number, xFapiInteractionId?: string, options?: any) {
            return BootstrapApiFp(configuration).listParticipants(participantId, xV, xFapiInteractionId, options)(fetch, basePath);
        },
        /**
         * API for retrieving all registered products associated with the PERA Admin.
         * @summary [PHASE 1] Get a list of PERA products associated with PERA Admin
         * @param {string} participantId Participant identifier issued during Participant registration
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductByParticipant(participantId: string, participantId: string, xV: number, xFapiInteractionId?: string, options?: any) {
            return BootstrapApiFp(configuration).listProductByParticipant(participantId, participantId, xV, xFapiInteractionId, options)(fetch, basePath);
        },
        /**
         * API for registering an OFxPERA Participant following FAPI Dynamic Client Registration requirements
         * @summary [PHASE 2] Register an OFxPERA Participant
         * @param {ParticipantConfig} body 
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerParticipant(body: ParticipantConfig, xV: number, xFapiInteractionId?: string, options?: any) {
            return BootstrapApiFp(configuration).registerParticipant(body, xV, xFapiInteractionId, options)(fetch, basePath);
        },
        /**
         * API that allows PERA Admin to register a PERA product.
         * @summary [PHASE 2] Register a PERA Admin Product
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerProduct(participantId: string, xV: number, xFapiInteractionId?: string, options?: any) {
            return BootstrapApiFp(configuration).registerProduct(participantId, xV, xFapiInteractionId, options)(fetch, basePath);
        },
        /**
         * API for updating the URIs and status of an OFxPERA Participant
         * @summary [PHASE 2] Update an OFxPERA Participant
         * @param {ParticipantConfig} body 
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateParticipant(body: ParticipantConfig, participantId: string, xV: number, xFapiInteractionId?: string, options?: any) {
            return BootstrapApiFp(configuration).updateParticipant(body, participantId, xV, xFapiInteractionId, options)(fetch, basePath);
        },
        /**
         * API that allows PERA Admin to update their product.
         * @summary [PHASE 2] Update a PERA Admin Product
         * @param {string} productId Product identifier issued during product registration
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct(productId: string, participantId: string, xV: number, xFapiInteractionId?: string, options?: any) {
            return BootstrapApiFp(configuration).updateProduct(productId, participantId, xV, xFapiInteractionId, options)(fetch, basePath);
        },
    };
};

/**
 * BootstrapApi - object-oriented interface
 * @export
 * @class BootstrapApi
 * @extends {BaseAPI}
 */
export class BootstrapApi extends BaseAPI {
    /**
     * API for retrieving registration information for a specific OFxPERA Participant
     * @summary [PHASE 2] Get an OFxPERA Participant's registration information
     * @param {string} participantId Participant identifier issued during participant registration
     * @param {string} participantId Field referencing the unique identifier of the requesting participant.
     * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
     * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BootstrapApi
     */
    public getParticipant(participantId: string, participantId: string, xV: number, xFapiInteractionId?: string, options?: any) {
        return BootstrapApiFp(this.configuration).getParticipant(participantId, participantId, xV, xFapiInteractionId, options)(this.fetch, this.basePath);
    }

    /**
     * API for retrieving all registered OFxPERA Participants
     * @summary [PHASE 1] Get a list of registered OFxPERA Participants
     * @param {string} participantId Field referencing the unique identifier of the requesting participant.
     * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
     * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BootstrapApi
     */
    public listParticipants(participantId: string, xV: number, xFapiInteractionId?: string, options?: any) {
        return BootstrapApiFp(this.configuration).listParticipants(participantId, xV, xFapiInteractionId, options)(this.fetch, this.basePath);
    }

    /**
     * API for retrieving all registered products associated with the PERA Admin.
     * @summary [PHASE 1] Get a list of PERA products associated with PERA Admin
     * @param {string} participantId Participant identifier issued during Participant registration
     * @param {string} participantId Field referencing the unique identifier of the requesting participant.
     * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
     * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BootstrapApi
     */
    public listProductByParticipant(participantId: string, participantId: string, xV: number, xFapiInteractionId?: string, options?: any) {
        return BootstrapApiFp(this.configuration).listProductByParticipant(participantId, participantId, xV, xFapiInteractionId, options)(this.fetch, this.basePath);
    }

    /**
     * API for registering an OFxPERA Participant following FAPI Dynamic Client Registration requirements
     * @summary [PHASE 2] Register an OFxPERA Participant
     * @param {ParticipantConfig} body 
     * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
     * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BootstrapApi
     */
    public registerParticipant(body: ParticipantConfig, xV: number, xFapiInteractionId?: string, options?: any) {
        return BootstrapApiFp(this.configuration).registerParticipant(body, xV, xFapiInteractionId, options)(this.fetch, this.basePath);
    }

    /**
     * API that allows PERA Admin to register a PERA product.
     * @summary [PHASE 2] Register a PERA Admin Product
     * @param {string} participantId Field referencing the unique identifier of the requesting participant.
     * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
     * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BootstrapApi
     */
    public registerProduct(participantId: string, xV: number, xFapiInteractionId?: string, options?: any) {
        return BootstrapApiFp(this.configuration).registerProduct(participantId, xV, xFapiInteractionId, options)(this.fetch, this.basePath);
    }

    /**
     * API for updating the URIs and status of an OFxPERA Participant
     * @summary [PHASE 2] Update an OFxPERA Participant
     * @param {ParticipantConfig} body 
     * @param {string} participantId Field referencing the unique identifier of the requesting participant.
     * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
     * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BootstrapApi
     */
    public updateParticipant(body: ParticipantConfig, participantId: string, xV: number, xFapiInteractionId?: string, options?: any) {
        return BootstrapApiFp(this.configuration).updateParticipant(body, participantId, xV, xFapiInteractionId, options)(this.fetch, this.basePath);
    }

    /**
     * API that allows PERA Admin to update their product.
     * @summary [PHASE 2] Update a PERA Admin Product
     * @param {string} productId Product identifier issued during product registration
     * @param {string} participantId Field referencing the unique identifier of the requesting participant.
     * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
     * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BootstrapApi
     */
    public updateProduct(productId: string, participantId: string, xV: number, xFapiInteractionId?: string, options?: any) {
        return BootstrapApiFp(this.configuration).updateProduct(productId, participantId, xV, xFapiInteractionId, options)(this.fetch, this.basePath);
    }

}
/**
 * CommonApi - fetch parameter creator
 * @export
 */
export const CommonApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary [DEPRECATED] Forward customer endorsement
         * @param {string} endorsement Encrypted endorsement payload in JWS/JWE format
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forwardCustomerEndorsement(endorsement: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'endorsement' is not null or undefined
            if (endorsement === null || endorsement === undefined) {
                throw new RequiredError('endorsement','Required parameter endorsement was null or undefined when calling forwardCustomerEndorsement.');
            }
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling forwardCustomerEndorsement.');
            }
            // verify required parameter 'xV' is not null or undefined
            if (xV === null || xV === undefined) {
                throw new RequiredError('xV','Required parameter xV was null or undefined when calling forwardCustomerEndorsement.');
            }
            // verify required parameter 'xFapiAuthDate' is not null or undefined
            if (xFapiAuthDate === null || xFapiAuthDate === undefined) {
                throw new RequiredError('xFapiAuthDate','Required parameter xFapiAuthDate was null or undefined when calling forwardCustomerEndorsement.');
            }
            // verify required parameter 'xFapiCustomerIpAddress' is not null or undefined
            if (xFapiCustomerIpAddress === null || xFapiCustomerIpAddress === undefined) {
                throw new RequiredError('xFapiCustomerIpAddress','Required parameter xFapiCustomerIpAddress was null or undefined when calling forwardCustomerEndorsement.');
            }
            // verify required parameter 'xClientHeaders' is not null or undefined
            if (xClientHeaders === null || xClientHeaders === undefined) {
                throw new RequiredError('xClientHeaders','Required parameter xClientHeaders was null or undefined when calling forwardCustomerEndorsement.');
            }
            // verify required parameter 'xClientUserAgent' is not null or undefined
            if (xClientUserAgent === null || xClientUserAgent === undefined) {
                throw new RequiredError('xClientUserAgent','Required parameter xClientUserAgent was null or undefined when calling forwardCustomerEndorsement.');
            }
            // verify required parameter 'xIdempotencyKey' is not null or undefined
            if (xIdempotencyKey === null || xIdempotencyKey === undefined) {
                throw new RequiredError('xIdempotencyKey','Required parameter xIdempotencyKey was null or undefined when calling forwardCustomerEndorsement.');
            }
            // verify required parameter 'xFapiCustomerLastLoggedTime' is not null or undefined
            if (xFapiCustomerLastLoggedTime === null || xFapiCustomerLastLoggedTime === undefined) {
                throw new RequiredError('xFapiCustomerLastLoggedTime','Required parameter xFapiCustomerLastLoggedTime was null or undefined when calling forwardCustomerEndorsement.');
            }
            const localVarPath = `/common/customers/endorse`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("OAuth2", ["read", "write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (endorsement !== undefined) {
                localVarQueryParameter['endorsement'] = endorsement;
            }

            if (participantId !== undefined && participantId !== null) {
                localVarHeaderParameter['participant-id'] = String(participantId);
            }

            if (xV !== undefined && xV !== null) {
                localVarHeaderParameter['x-v'] = String(xV);
            }

            if (xFapiAuthDate !== undefined && xFapiAuthDate !== null) {
                localVarHeaderParameter['x-fapi-auth-date'] = String(xFapiAuthDate);
            }

            if (xFapiCustomerIpAddress !== undefined && xFapiCustomerIpAddress !== null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xClientHeaders !== undefined && xClientHeaders !== null) {
                localVarHeaderParameter['x-client-headers'] = String(xClientHeaders);
            }

            if (xClientUserAgent !== undefined && xClientUserAgent !== null) {
                localVarHeaderParameter['x-client-user-agent'] = String(xClientUserAgent);
            }

            if (xIdempotencyKey !== undefined && xIdempotencyKey !== null) {
                localVarHeaderParameter['x-idempotency-key'] = String(xIdempotencyKey);
            }

            if (xFapiCustomerLastLoggedTime !== undefined && xFapiCustomerLastLoggedTime !== null) {
                localVarHeaderParameter['x-fapi-customer-last-logged-time'] = String(xFapiCustomerLastLoggedTime);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary [PHASE 1] Get detailed customer information
         * @param {string} customerId Customer ID, this should map to the sub field returned from the OIDC token endpoint or the sub field returned from the /oauth/userinfo endpoint
         * @param {string} authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;token&gt;&#x27;
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerDetail(customerId: string, authorization: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new RequiredError('customerId','Required parameter customerId was null or undefined when calling getCustomerDetail.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getCustomerDetail.');
            }
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling getCustomerDetail.');
            }
            // verify required parameter 'xV' is not null or undefined
            if (xV === null || xV === undefined) {
                throw new RequiredError('xV','Required parameter xV was null or undefined when calling getCustomerDetail.');
            }
            // verify required parameter 'xFapiAuthDate' is not null or undefined
            if (xFapiAuthDate === null || xFapiAuthDate === undefined) {
                throw new RequiredError('xFapiAuthDate','Required parameter xFapiAuthDate was null or undefined when calling getCustomerDetail.');
            }
            // verify required parameter 'xFapiCustomerIpAddress' is not null or undefined
            if (xFapiCustomerIpAddress === null || xFapiCustomerIpAddress === undefined) {
                throw new RequiredError('xFapiCustomerIpAddress','Required parameter xFapiCustomerIpAddress was null or undefined when calling getCustomerDetail.');
            }
            // verify required parameter 'xClientHeaders' is not null or undefined
            if (xClientHeaders === null || xClientHeaders === undefined) {
                throw new RequiredError('xClientHeaders','Required parameter xClientHeaders was null or undefined when calling getCustomerDetail.');
            }
            // verify required parameter 'xClientUserAgent' is not null or undefined
            if (xClientUserAgent === null || xClientUserAgent === undefined) {
                throw new RequiredError('xClientUserAgent','Required parameter xClientUserAgent was null or undefined when calling getCustomerDetail.');
            }
            // verify required parameter 'xIdempotencyKey' is not null or undefined
            if (xIdempotencyKey === null || xIdempotencyKey === undefined) {
                throw new RequiredError('xIdempotencyKey','Required parameter xIdempotencyKey was null or undefined when calling getCustomerDetail.');
            }
            // verify required parameter 'xFapiCustomerLastLoggedTime' is not null or undefined
            if (xFapiCustomerLastLoggedTime === null || xFapiCustomerLastLoggedTime === undefined) {
                throw new RequiredError('xFapiCustomerLastLoggedTime','Required parameter xFapiCustomerLastLoggedTime was null or undefined when calling getCustomerDetail.');
            }
            const localVarPath = `/common/customers/{customer_id}/detail`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("OAuth2", ["read", "write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (participantId !== undefined && participantId !== null) {
                localVarHeaderParameter['participant-id'] = String(participantId);
            }

            if (xV !== undefined && xV !== null) {
                localVarHeaderParameter['x-v'] = String(xV);
            }

            if (xFapiAuthDate !== undefined && xFapiAuthDate !== null) {
                localVarHeaderParameter['x-fapi-auth-date'] = String(xFapiAuthDate);
            }

            if (xFapiCustomerIpAddress !== undefined && xFapiCustomerIpAddress !== null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xClientHeaders !== undefined && xClientHeaders !== null) {
                localVarHeaderParameter['x-client-headers'] = String(xClientHeaders);
            }

            if (xClientUserAgent !== undefined && xClientUserAgent !== null) {
                localVarHeaderParameter['x-client-user-agent'] = String(xClientUserAgent);
            }

            if (xIdempotencyKey !== undefined && xIdempotencyKey !== null) {
                localVarHeaderParameter['x-idempotency-key'] = String(xIdempotencyKey);
            }

            if (xFapiCustomerLastLoggedTime !== undefined && xFapiCustomerLastLoggedTime !== null) {
                localVarHeaderParameter['x-fapi-customer-last-logged-time'] = String(xFapiCustomerLastLoggedTime);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommonApi - functional programming interface
 * @export
 */
export const CommonApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary [DEPRECATED] Forward customer endorsement
         * @param {string} endorsement Encrypted endorsement payload in JWS/JWE format
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forwardCustomerEndorsement(endorsement: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EndorsementResponse> {
            const localVarFetchArgs = CommonApiFetchParamCreator(configuration).forwardCustomerEndorsement(endorsement, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary [PHASE 1] Get detailed customer information
         * @param {string} customerId Customer ID, this should map to the sub field returned from the OIDC token endpoint or the sub field returned from the /oauth/userinfo endpoint
         * @param {string} authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;token&gt;&#x27;
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerDetail(customerId: string, authorization: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CustomerInformation> {
            const localVarFetchArgs = CommonApiFetchParamCreator(configuration).getCustomerDetail(customerId, authorization, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CommonApi - factory interface
 * @export
 */
export const CommonApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary [DEPRECATED] Forward customer endorsement
         * @param {string} endorsement Encrypted endorsement payload in JWS/JWE format
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forwardCustomerEndorsement(endorsement: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
            return CommonApiFp(configuration).forwardCustomerEndorsement(endorsement, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary [PHASE 1] Get detailed customer information
         * @param {string} customerId Customer ID, this should map to the sub field returned from the OIDC token endpoint or the sub field returned from the /oauth/userinfo endpoint
         * @param {string} authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;token&gt;&#x27;
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerDetail(customerId: string, authorization: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
            return CommonApiFp(configuration).getCustomerDetail(customerId, authorization, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(fetch, basePath);
        },
    };
};

/**
 * CommonApi - object-oriented interface
 * @export
 * @class CommonApi
 * @extends {BaseAPI}
 */
export class CommonApi extends BaseAPI {
    /**
     * 
     * @summary [DEPRECATED] Forward customer endorsement
     * @param {string} endorsement Encrypted endorsement payload in JWS/JWE format
     * @param {string} participantId Field referencing the unique identifier of the requesting participant.
     * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
     * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
     * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
     * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
     * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
     * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public forwardCustomerEndorsement(endorsement: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
        return CommonApiFp(this.configuration).forwardCustomerEndorsement(endorsement, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary [PHASE 1] Get detailed customer information
     * @param {string} customerId Customer ID, this should map to the sub field returned from the OIDC token endpoint or the sub field returned from the /oauth/userinfo endpoint
     * @param {string} authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;token&gt;&#x27;
     * @param {string} participantId Field referencing the unique identifier of the requesting participant.
     * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
     * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
     * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
     * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
     * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
     * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonApi
     */
    public getCustomerDetail(customerId: string, authorization: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
        return CommonApiFp(this.configuration).getCustomerDetail(customerId, authorization, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(this.fetch, this.basePath);
    }

}
/**
 * ConsentApi - fetch parameter creator
 * @export
 */
export const ConsentApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Update multiple consent arrangements for a specific customer in a single request. Based on: - Australia CDR Bulk Consumer Update - Korea MyData Consent Management 
         * @summary Bulk update customer's consent arrangements
         * @param {ArrangementsBulkupdateBody} body 
         * @param {string} customerId The customer&#x27;s unique identifier
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUpdateCustomerConsents(body: ArrangementsBulkupdateBody, customerId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling bulkUpdateCustomerConsents.');
            }
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new RequiredError('customerId','Required parameter customerId was null or undefined when calling bulkUpdateCustomerConsents.');
            }
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling bulkUpdateCustomerConsents.');
            }
            // verify required parameter 'xV' is not null or undefined
            if (xV === null || xV === undefined) {
                throw new RequiredError('xV','Required parameter xV was null or undefined when calling bulkUpdateCustomerConsents.');
            }
            // verify required parameter 'xFapiAuthDate' is not null or undefined
            if (xFapiAuthDate === null || xFapiAuthDate === undefined) {
                throw new RequiredError('xFapiAuthDate','Required parameter xFapiAuthDate was null or undefined when calling bulkUpdateCustomerConsents.');
            }
            // verify required parameter 'xFapiCustomerIpAddress' is not null or undefined
            if (xFapiCustomerIpAddress === null || xFapiCustomerIpAddress === undefined) {
                throw new RequiredError('xFapiCustomerIpAddress','Required parameter xFapiCustomerIpAddress was null or undefined when calling bulkUpdateCustomerConsents.');
            }
            // verify required parameter 'xClientHeaders' is not null or undefined
            if (xClientHeaders === null || xClientHeaders === undefined) {
                throw new RequiredError('xClientHeaders','Required parameter xClientHeaders was null or undefined when calling bulkUpdateCustomerConsents.');
            }
            // verify required parameter 'xClientUserAgent' is not null or undefined
            if (xClientUserAgent === null || xClientUserAgent === undefined) {
                throw new RequiredError('xClientUserAgent','Required parameter xClientUserAgent was null or undefined when calling bulkUpdateCustomerConsents.');
            }
            // verify required parameter 'xIdempotencyKey' is not null or undefined
            if (xIdempotencyKey === null || xIdempotencyKey === undefined) {
                throw new RequiredError('xIdempotencyKey','Required parameter xIdempotencyKey was null or undefined when calling bulkUpdateCustomerConsents.');
            }
            // verify required parameter 'xFapiCustomerLastLoggedTime' is not null or undefined
            if (xFapiCustomerLastLoggedTime === null || xFapiCustomerLastLoggedTime === undefined) {
                throw new RequiredError('xFapiCustomerLastLoggedTime','Required parameter xFapiCustomerLastLoggedTime was null or undefined when calling bulkUpdateCustomerConsents.');
            }
            const localVarPath = `/consent/customers/{customer_id}/arrangements/bulk-update`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SignedJWT required

            if (participantId !== undefined && participantId !== null) {
                localVarHeaderParameter['participant-id'] = String(participantId);
            }

            if (xV !== undefined && xV !== null) {
                localVarHeaderParameter['x-v'] = String(xV);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xFapiAuthDate !== undefined && xFapiAuthDate !== null) {
                localVarHeaderParameter['x-fapi-auth-date'] = String(xFapiAuthDate);
            }

            if (xFapiCustomerIpAddress !== undefined && xFapiCustomerIpAddress !== null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xClientHeaders !== undefined && xClientHeaders !== null) {
                localVarHeaderParameter['x-client-headers'] = String(xClientHeaders);
            }

            if (xClientUserAgent !== undefined && xClientUserAgent !== null) {
                localVarHeaderParameter['x-client-user-agent'] = String(xClientUserAgent);
            }

            if (xIdempotencyKey !== undefined && xIdempotencyKey !== null) {
                localVarHeaderParameter['x-idempotency-key'] = String(xIdempotencyKey);
            }

            if (xFapiCustomerLastLoggedTime !== undefined && xFapiCustomerLastLoggedTime !== null) {
                localVarHeaderParameter['x-fapi-customer-last-logged-time'] = String(xFapiCustomerLastLoggedTime);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ArrangementsBulkupdateBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create multiple consent arrangements in a single request. Based on: - Korea MyData Bulk Consent API - Singapore SGFinDex Multi-Institution Consent 
         * @summary Create bulk consent arrangements
         * @param {BulkConsentRequest} body 
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBulkConsent(body: BulkConsentRequest, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createBulkConsent.');
            }
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling createBulkConsent.');
            }
            // verify required parameter 'xV' is not null or undefined
            if (xV === null || xV === undefined) {
                throw new RequiredError('xV','Required parameter xV was null or undefined when calling createBulkConsent.');
            }
            // verify required parameter 'xFapiAuthDate' is not null or undefined
            if (xFapiAuthDate === null || xFapiAuthDate === undefined) {
                throw new RequiredError('xFapiAuthDate','Required parameter xFapiAuthDate was null or undefined when calling createBulkConsent.');
            }
            // verify required parameter 'xFapiCustomerIpAddress' is not null or undefined
            if (xFapiCustomerIpAddress === null || xFapiCustomerIpAddress === undefined) {
                throw new RequiredError('xFapiCustomerIpAddress','Required parameter xFapiCustomerIpAddress was null or undefined when calling createBulkConsent.');
            }
            // verify required parameter 'xClientHeaders' is not null or undefined
            if (xClientHeaders === null || xClientHeaders === undefined) {
                throw new RequiredError('xClientHeaders','Required parameter xClientHeaders was null or undefined when calling createBulkConsent.');
            }
            // verify required parameter 'xClientUserAgent' is not null or undefined
            if (xClientUserAgent === null || xClientUserAgent === undefined) {
                throw new RequiredError('xClientUserAgent','Required parameter xClientUserAgent was null or undefined when calling createBulkConsent.');
            }
            // verify required parameter 'xIdempotencyKey' is not null or undefined
            if (xIdempotencyKey === null || xIdempotencyKey === undefined) {
                throw new RequiredError('xIdempotencyKey','Required parameter xIdempotencyKey was null or undefined when calling createBulkConsent.');
            }
            // verify required parameter 'xFapiCustomerLastLoggedTime' is not null or undefined
            if (xFapiCustomerLastLoggedTime === null || xFapiCustomerLastLoggedTime === undefined) {
                throw new RequiredError('xFapiCustomerLastLoggedTime','Required parameter xFapiCustomerLastLoggedTime was null or undefined when calling createBulkConsent.');
            }
            const localVarPath = `/consent/bulk`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SignedJWT required

            if (participantId !== undefined && participantId !== null) {
                localVarHeaderParameter['participant-id'] = String(participantId);
            }

            if (xV !== undefined && xV !== null) {
                localVarHeaderParameter['x-v'] = String(xV);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xFapiAuthDate !== undefined && xFapiAuthDate !== null) {
                localVarHeaderParameter['x-fapi-auth-date'] = String(xFapiAuthDate);
            }

            if (xFapiCustomerIpAddress !== undefined && xFapiCustomerIpAddress !== null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xClientHeaders !== undefined && xClientHeaders !== null) {
                localVarHeaderParameter['x-client-headers'] = String(xClientHeaders);
            }

            if (xClientUserAgent !== undefined && xClientUserAgent !== null) {
                localVarHeaderParameter['x-client-user-agent'] = String(xClientUserAgent);
            }

            if (xIdempotencyKey !== undefined && xIdempotencyKey !== null) {
                localVarHeaderParameter['x-idempotency-key'] = String(xIdempotencyKey);
            }

            if (xFapiCustomerLastLoggedTime !== undefined && xFapiCustomerLastLoggedTime !== null) {
                localVarHeaderParameter['x-fapi-customer-last-logged-time'] = String(xFapiCustomerLastLoggedTime);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BulkConsentRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new consent arrangement between a data holder and data recipient. Based on: - UK Open Banking Consent API v3.1.10 - Australia CDR Consent Management Standards v1.14.0 - Singapore SGFinDex Consent Framework 
         * @summary Create a consent arrangement
         * @param {ConsentArrangementRequest} body 
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConsentArrangement(body: ConsentArrangementRequest, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createConsentArrangement.');
            }
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling createConsentArrangement.');
            }
            // verify required parameter 'xV' is not null or undefined
            if (xV === null || xV === undefined) {
                throw new RequiredError('xV','Required parameter xV was null or undefined when calling createConsentArrangement.');
            }
            // verify required parameter 'xFapiAuthDate' is not null or undefined
            if (xFapiAuthDate === null || xFapiAuthDate === undefined) {
                throw new RequiredError('xFapiAuthDate','Required parameter xFapiAuthDate was null or undefined when calling createConsentArrangement.');
            }
            // verify required parameter 'xFapiCustomerIpAddress' is not null or undefined
            if (xFapiCustomerIpAddress === null || xFapiCustomerIpAddress === undefined) {
                throw new RequiredError('xFapiCustomerIpAddress','Required parameter xFapiCustomerIpAddress was null or undefined when calling createConsentArrangement.');
            }
            // verify required parameter 'xClientHeaders' is not null or undefined
            if (xClientHeaders === null || xClientHeaders === undefined) {
                throw new RequiredError('xClientHeaders','Required parameter xClientHeaders was null or undefined when calling createConsentArrangement.');
            }
            // verify required parameter 'xClientUserAgent' is not null or undefined
            if (xClientUserAgent === null || xClientUserAgent === undefined) {
                throw new RequiredError('xClientUserAgent','Required parameter xClientUserAgent was null or undefined when calling createConsentArrangement.');
            }
            // verify required parameter 'xIdempotencyKey' is not null or undefined
            if (xIdempotencyKey === null || xIdempotencyKey === undefined) {
                throw new RequiredError('xIdempotencyKey','Required parameter xIdempotencyKey was null or undefined when calling createConsentArrangement.');
            }
            // verify required parameter 'xFapiCustomerLastLoggedTime' is not null or undefined
            if (xFapiCustomerLastLoggedTime === null || xFapiCustomerLastLoggedTime === undefined) {
                throw new RequiredError('xFapiCustomerLastLoggedTime','Required parameter xFapiCustomerLastLoggedTime was null or undefined when calling createConsentArrangement.');
            }
            const localVarPath = `/consent/arrangements`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SignedJWT required

            if (participantId !== undefined && participantId !== null) {
                localVarHeaderParameter['participant-id'] = String(participantId);
            }

            if (xV !== undefined && xV !== null) {
                localVarHeaderParameter['x-v'] = String(xV);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xFapiAuthDate !== undefined && xFapiAuthDate !== null) {
                localVarHeaderParameter['x-fapi-auth-date'] = String(xFapiAuthDate);
            }

            if (xFapiCustomerIpAddress !== undefined && xFapiCustomerIpAddress !== null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xClientHeaders !== undefined && xClientHeaders !== null) {
                localVarHeaderParameter['x-client-headers'] = String(xClientHeaders);
            }

            if (xClientUserAgent !== undefined && xClientUserAgent !== null) {
                localVarHeaderParameter['x-client-user-agent'] = String(xClientUserAgent);
            }

            if (xIdempotencyKey !== undefined && xIdempotencyKey !== null) {
                localVarHeaderParameter['x-idempotency-key'] = String(xIdempotencyKey);
            }

            if (xFapiCustomerLastLoggedTime !== undefined && xFapiCustomerLastLoggedTime !== null) {
                localVarHeaderParameter['x-fapi-customer-last-logged-time'] = String(xFapiCustomerLastLoggedTime);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ConsentArrangementRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Extend the duration of an existing consent arrangement. Based on: - Australia CDR Consent Amendment - UK Open Banking Re-authentication 
         * @summary Extend consent arrangement duration
         * @param {ConsentExtensionRequest} body 
         * @param {string} arrangementId The ID of the consent arrangement
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extendConsentDuration(body: ConsentExtensionRequest, arrangementId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling extendConsentDuration.');
            }
            // verify required parameter 'arrangementId' is not null or undefined
            if (arrangementId === null || arrangementId === undefined) {
                throw new RequiredError('arrangementId','Required parameter arrangementId was null or undefined when calling extendConsentDuration.');
            }
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling extendConsentDuration.');
            }
            // verify required parameter 'xV' is not null or undefined
            if (xV === null || xV === undefined) {
                throw new RequiredError('xV','Required parameter xV was null or undefined when calling extendConsentDuration.');
            }
            // verify required parameter 'xFapiAuthDate' is not null or undefined
            if (xFapiAuthDate === null || xFapiAuthDate === undefined) {
                throw new RequiredError('xFapiAuthDate','Required parameter xFapiAuthDate was null or undefined when calling extendConsentDuration.');
            }
            // verify required parameter 'xFapiCustomerIpAddress' is not null or undefined
            if (xFapiCustomerIpAddress === null || xFapiCustomerIpAddress === undefined) {
                throw new RequiredError('xFapiCustomerIpAddress','Required parameter xFapiCustomerIpAddress was null or undefined when calling extendConsentDuration.');
            }
            // verify required parameter 'xClientHeaders' is not null or undefined
            if (xClientHeaders === null || xClientHeaders === undefined) {
                throw new RequiredError('xClientHeaders','Required parameter xClientHeaders was null or undefined when calling extendConsentDuration.');
            }
            // verify required parameter 'xClientUserAgent' is not null or undefined
            if (xClientUserAgent === null || xClientUserAgent === undefined) {
                throw new RequiredError('xClientUserAgent','Required parameter xClientUserAgent was null or undefined when calling extendConsentDuration.');
            }
            // verify required parameter 'xIdempotencyKey' is not null or undefined
            if (xIdempotencyKey === null || xIdempotencyKey === undefined) {
                throw new RequiredError('xIdempotencyKey','Required parameter xIdempotencyKey was null or undefined when calling extendConsentDuration.');
            }
            // verify required parameter 'xFapiCustomerLastLoggedTime' is not null or undefined
            if (xFapiCustomerLastLoggedTime === null || xFapiCustomerLastLoggedTime === undefined) {
                throw new RequiredError('xFapiCustomerLastLoggedTime','Required parameter xFapiCustomerLastLoggedTime was null or undefined when calling extendConsentDuration.');
            }
            const localVarPath = `/consent/arrangements/{arrangement_id}/extend`
                .replace(`{${"arrangement_id"}}`, encodeURIComponent(String(arrangementId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("OAuth2", ["read", "write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (participantId !== undefined && participantId !== null) {
                localVarHeaderParameter['participant-id'] = String(participantId);
            }

            if (xV !== undefined && xV !== null) {
                localVarHeaderParameter['x-v'] = String(xV);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xFapiAuthDate !== undefined && xFapiAuthDate !== null) {
                localVarHeaderParameter['x-fapi-auth-date'] = String(xFapiAuthDate);
            }

            if (xFapiCustomerIpAddress !== undefined && xFapiCustomerIpAddress !== null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xClientHeaders !== undefined && xClientHeaders !== null) {
                localVarHeaderParameter['x-client-headers'] = String(xClientHeaders);
            }

            if (xClientUserAgent !== undefined && xClientUserAgent !== null) {
                localVarHeaderParameter['x-client-user-agent'] = String(xClientUserAgent);
            }

            if (xIdempotencyKey !== undefined && xIdempotencyKey !== null) {
                localVarHeaderParameter['x-idempotency-key'] = String(xIdempotencyKey);
            }

            if (xFapiCustomerLastLoggedTime !== undefined && xFapiCustomerLastLoggedTime !== null) {
                localVarHeaderParameter['x-fapi-customer-last-logged-time'] = String(xFapiCustomerLastLoggedTime);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ConsentExtensionRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve details of a specific consent arrangement. Based on: - UK Open Banking Account Access Consents API - Australia CDR Get Consent API 
         * @summary Get consent arrangement details
         * @param {string} arrangementId The ID of the consent arrangement
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsentArrangement(arrangementId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'arrangementId' is not null or undefined
            if (arrangementId === null || arrangementId === undefined) {
                throw new RequiredError('arrangementId','Required parameter arrangementId was null or undefined when calling getConsentArrangement.');
            }
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling getConsentArrangement.');
            }
            // verify required parameter 'xV' is not null or undefined
            if (xV === null || xV === undefined) {
                throw new RequiredError('xV','Required parameter xV was null or undefined when calling getConsentArrangement.');
            }
            // verify required parameter 'xFapiAuthDate' is not null or undefined
            if (xFapiAuthDate === null || xFapiAuthDate === undefined) {
                throw new RequiredError('xFapiAuthDate','Required parameter xFapiAuthDate was null or undefined when calling getConsentArrangement.');
            }
            // verify required parameter 'xFapiCustomerIpAddress' is not null or undefined
            if (xFapiCustomerIpAddress === null || xFapiCustomerIpAddress === undefined) {
                throw new RequiredError('xFapiCustomerIpAddress','Required parameter xFapiCustomerIpAddress was null or undefined when calling getConsentArrangement.');
            }
            // verify required parameter 'xClientHeaders' is not null or undefined
            if (xClientHeaders === null || xClientHeaders === undefined) {
                throw new RequiredError('xClientHeaders','Required parameter xClientHeaders was null or undefined when calling getConsentArrangement.');
            }
            // verify required parameter 'xClientUserAgent' is not null or undefined
            if (xClientUserAgent === null || xClientUserAgent === undefined) {
                throw new RequiredError('xClientUserAgent','Required parameter xClientUserAgent was null or undefined when calling getConsentArrangement.');
            }
            // verify required parameter 'xIdempotencyKey' is not null or undefined
            if (xIdempotencyKey === null || xIdempotencyKey === undefined) {
                throw new RequiredError('xIdempotencyKey','Required parameter xIdempotencyKey was null or undefined when calling getConsentArrangement.');
            }
            // verify required parameter 'xFapiCustomerLastLoggedTime' is not null or undefined
            if (xFapiCustomerLastLoggedTime === null || xFapiCustomerLastLoggedTime === undefined) {
                throw new RequiredError('xFapiCustomerLastLoggedTime','Required parameter xFapiCustomerLastLoggedTime was null or undefined when calling getConsentArrangement.');
            }
            const localVarPath = `/consent/arrangements/{arrangement_id}`
                .replace(`{${"arrangement_id"}}`, encodeURIComponent(String(arrangementId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SignedJWT required

            if (participantId !== undefined && participantId !== null) {
                localVarHeaderParameter['participant-id'] = String(participantId);
            }

            if (xV !== undefined && xV !== null) {
                localVarHeaderParameter['x-v'] = String(xV);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xFapiAuthDate !== undefined && xFapiAuthDate !== null) {
                localVarHeaderParameter['x-fapi-auth-date'] = String(xFapiAuthDate);
            }

            if (xFapiCustomerIpAddress !== undefined && xFapiCustomerIpAddress !== null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xClientHeaders !== undefined && xClientHeaders !== null) {
                localVarHeaderParameter['x-client-headers'] = String(xClientHeaders);
            }

            if (xClientUserAgent !== undefined && xClientUserAgent !== null) {
                localVarHeaderParameter['x-client-user-agent'] = String(xClientUserAgent);
            }

            if (xIdempotencyKey !== undefined && xIdempotencyKey !== null) {
                localVarHeaderParameter['x-idempotency-key'] = String(xIdempotencyKey);
            }

            if (xFapiCustomerLastLoggedTime !== undefined && xFapiCustomerLastLoggedTime !== null) {
                localVarHeaderParameter['x-fapi-customer-last-logged-time'] = String(xFapiCustomerLastLoggedTime);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the full history of changes to a consent arrangement. Based on: - Australia CDR Consent History API - UK Open Banking Consent Audit Requirements 
         * @summary Get consent arrangement history
         * @param {string} arrangementId The ID of the consent arrangement
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsentHistory(arrangementId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'arrangementId' is not null or undefined
            if (arrangementId === null || arrangementId === undefined) {
                throw new RequiredError('arrangementId','Required parameter arrangementId was null or undefined when calling getConsentHistory.');
            }
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling getConsentHistory.');
            }
            // verify required parameter 'xV' is not null or undefined
            if (xV === null || xV === undefined) {
                throw new RequiredError('xV','Required parameter xV was null or undefined when calling getConsentHistory.');
            }
            // verify required parameter 'xFapiAuthDate' is not null or undefined
            if (xFapiAuthDate === null || xFapiAuthDate === undefined) {
                throw new RequiredError('xFapiAuthDate','Required parameter xFapiAuthDate was null or undefined when calling getConsentHistory.');
            }
            // verify required parameter 'xFapiCustomerIpAddress' is not null or undefined
            if (xFapiCustomerIpAddress === null || xFapiCustomerIpAddress === undefined) {
                throw new RequiredError('xFapiCustomerIpAddress','Required parameter xFapiCustomerIpAddress was null or undefined when calling getConsentHistory.');
            }
            // verify required parameter 'xClientHeaders' is not null or undefined
            if (xClientHeaders === null || xClientHeaders === undefined) {
                throw new RequiredError('xClientHeaders','Required parameter xClientHeaders was null or undefined when calling getConsentHistory.');
            }
            // verify required parameter 'xClientUserAgent' is not null or undefined
            if (xClientUserAgent === null || xClientUserAgent === undefined) {
                throw new RequiredError('xClientUserAgent','Required parameter xClientUserAgent was null or undefined when calling getConsentHistory.');
            }
            // verify required parameter 'xIdempotencyKey' is not null or undefined
            if (xIdempotencyKey === null || xIdempotencyKey === undefined) {
                throw new RequiredError('xIdempotencyKey','Required parameter xIdempotencyKey was null or undefined when calling getConsentHistory.');
            }
            // verify required parameter 'xFapiCustomerLastLoggedTime' is not null or undefined
            if (xFapiCustomerLastLoggedTime === null || xFapiCustomerLastLoggedTime === undefined) {
                throw new RequiredError('xFapiCustomerLastLoggedTime','Required parameter xFapiCustomerLastLoggedTime was null or undefined when calling getConsentHistory.');
            }
            const localVarPath = `/consent/arrangements/{arrangement_id}/history`
                .replace(`{${"arrangement_id"}}`, encodeURIComponent(String(arrangementId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SignedJWT required

            if (participantId !== undefined && participantId !== null) {
                localVarHeaderParameter['participant-id'] = String(participantId);
            }

            if (xV !== undefined && xV !== null) {
                localVarHeaderParameter['x-v'] = String(xV);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xFapiAuthDate !== undefined && xFapiAuthDate !== null) {
                localVarHeaderParameter['x-fapi-auth-date'] = String(xFapiAuthDate);
            }

            if (xFapiCustomerIpAddress !== undefined && xFapiCustomerIpAddress !== null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xClientHeaders !== undefined && xClientHeaders !== null) {
                localVarHeaderParameter['x-client-headers'] = String(xClientHeaders);
            }

            if (xClientUserAgent !== undefined && xClientUserAgent !== null) {
                localVarHeaderParameter['x-client-user-agent'] = String(xClientUserAgent);
            }

            if (xIdempotencyKey !== undefined && xIdempotencyKey !== null) {
                localVarHeaderParameter['x-idempotency-key'] = String(xIdempotencyKey);
            }

            if (xFapiCustomerLastLoggedTime !== undefined && xFapiCustomerLastLoggedTime !== null) {
                localVarHeaderParameter['x-fapi-customer-last-logged-time'] = String(xFapiCustomerLastLoggedTime);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a comprehensive view of customer's consent arrangements and data sharing. Based on: - Australia CDR Consumer Dashboard - UK Open Banking Consent Dashboard - Singapore SGFinDex Customer Portal 
         * @summary Get customer's consent dashboard
         * @param {string} customerId The customer&#x27;s unique identifier
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerConsentDashboard(customerId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new RequiredError('customerId','Required parameter customerId was null or undefined when calling getCustomerConsentDashboard.');
            }
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling getCustomerConsentDashboard.');
            }
            // verify required parameter 'xV' is not null or undefined
            if (xV === null || xV === undefined) {
                throw new RequiredError('xV','Required parameter xV was null or undefined when calling getCustomerConsentDashboard.');
            }
            // verify required parameter 'xFapiAuthDate' is not null or undefined
            if (xFapiAuthDate === null || xFapiAuthDate === undefined) {
                throw new RequiredError('xFapiAuthDate','Required parameter xFapiAuthDate was null or undefined when calling getCustomerConsentDashboard.');
            }
            // verify required parameter 'xFapiCustomerIpAddress' is not null or undefined
            if (xFapiCustomerIpAddress === null || xFapiCustomerIpAddress === undefined) {
                throw new RequiredError('xFapiCustomerIpAddress','Required parameter xFapiCustomerIpAddress was null or undefined when calling getCustomerConsentDashboard.');
            }
            // verify required parameter 'xClientHeaders' is not null or undefined
            if (xClientHeaders === null || xClientHeaders === undefined) {
                throw new RequiredError('xClientHeaders','Required parameter xClientHeaders was null or undefined when calling getCustomerConsentDashboard.');
            }
            // verify required parameter 'xClientUserAgent' is not null or undefined
            if (xClientUserAgent === null || xClientUserAgent === undefined) {
                throw new RequiredError('xClientUserAgent','Required parameter xClientUserAgent was null or undefined when calling getCustomerConsentDashboard.');
            }
            // verify required parameter 'xIdempotencyKey' is not null or undefined
            if (xIdempotencyKey === null || xIdempotencyKey === undefined) {
                throw new RequiredError('xIdempotencyKey','Required parameter xIdempotencyKey was null or undefined when calling getCustomerConsentDashboard.');
            }
            // verify required parameter 'xFapiCustomerLastLoggedTime' is not null or undefined
            if (xFapiCustomerLastLoggedTime === null || xFapiCustomerLastLoggedTime === undefined) {
                throw new RequiredError('xFapiCustomerLastLoggedTime','Required parameter xFapiCustomerLastLoggedTime was null or undefined when calling getCustomerConsentDashboard.');
            }
            const localVarPath = `/consent/customers/{customer_id}/dashboard`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SignedJWT required

            if (participantId !== undefined && participantId !== null) {
                localVarHeaderParameter['participant-id'] = String(participantId);
            }

            if (xV !== undefined && xV !== null) {
                localVarHeaderParameter['x-v'] = String(xV);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xFapiAuthDate !== undefined && xFapiAuthDate !== null) {
                localVarHeaderParameter['x-fapi-auth-date'] = String(xFapiAuthDate);
            }

            if (xFapiCustomerIpAddress !== undefined && xFapiCustomerIpAddress !== null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xClientHeaders !== undefined && xClientHeaders !== null) {
                localVarHeaderParameter['x-client-headers'] = String(xClientHeaders);
            }

            if (xClientUserAgent !== undefined && xClientUserAgent !== null) {
                localVarHeaderParameter['x-client-user-agent'] = String(xClientUserAgent);
            }

            if (xIdempotencyKey !== undefined && xIdempotencyKey !== null) {
                localVarHeaderParameter['x-idempotency-key'] = String(xIdempotencyKey);
            }

            if (xFapiCustomerLastLoggedTime !== undefined && xFapiCustomerLastLoggedTime !== null) {
                localVarHeaderParameter['x-fapi-customer-last-logged-time'] = String(xFapiCustomerLastLoggedTime);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all consent arrangements for a specific customer. Based on: - UK Open Banking Customer Consent Management - Australia CDR Consumer Dashboard APIs - Singapore SGFinDex Customer Consent View 
         * @summary Get customer's consent arrangements
         * @param {string} customerId The customer&#x27;s unique identifier
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [status] Filter consents by status
         * @param {string} [dataHolderId] Filter by specific data holder/institution
         * @param {string} [purpose] Filter by consent purpose
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerConsents(customerId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, status?: string, dataHolderId?: string, purpose?: string, xFapiInteractionId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new RequiredError('customerId','Required parameter customerId was null or undefined when calling getCustomerConsents.');
            }
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling getCustomerConsents.');
            }
            // verify required parameter 'xV' is not null or undefined
            if (xV === null || xV === undefined) {
                throw new RequiredError('xV','Required parameter xV was null or undefined when calling getCustomerConsents.');
            }
            // verify required parameter 'xFapiAuthDate' is not null or undefined
            if (xFapiAuthDate === null || xFapiAuthDate === undefined) {
                throw new RequiredError('xFapiAuthDate','Required parameter xFapiAuthDate was null or undefined when calling getCustomerConsents.');
            }
            // verify required parameter 'xFapiCustomerIpAddress' is not null or undefined
            if (xFapiCustomerIpAddress === null || xFapiCustomerIpAddress === undefined) {
                throw new RequiredError('xFapiCustomerIpAddress','Required parameter xFapiCustomerIpAddress was null or undefined when calling getCustomerConsents.');
            }
            // verify required parameter 'xClientHeaders' is not null or undefined
            if (xClientHeaders === null || xClientHeaders === undefined) {
                throw new RequiredError('xClientHeaders','Required parameter xClientHeaders was null or undefined when calling getCustomerConsents.');
            }
            // verify required parameter 'xClientUserAgent' is not null or undefined
            if (xClientUserAgent === null || xClientUserAgent === undefined) {
                throw new RequiredError('xClientUserAgent','Required parameter xClientUserAgent was null or undefined when calling getCustomerConsents.');
            }
            // verify required parameter 'xIdempotencyKey' is not null or undefined
            if (xIdempotencyKey === null || xIdempotencyKey === undefined) {
                throw new RequiredError('xIdempotencyKey','Required parameter xIdempotencyKey was null or undefined when calling getCustomerConsents.');
            }
            // verify required parameter 'xFapiCustomerLastLoggedTime' is not null or undefined
            if (xFapiCustomerLastLoggedTime === null || xFapiCustomerLastLoggedTime === undefined) {
                throw new RequiredError('xFapiCustomerLastLoggedTime','Required parameter xFapiCustomerLastLoggedTime was null or undefined when calling getCustomerConsents.');
            }
            const localVarPath = `/consent/customers/{customer_id}/arrangements`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SignedJWT required

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (dataHolderId !== undefined) {
                localVarQueryParameter['data_holder_id'] = dataHolderId;
            }

            if (purpose !== undefined) {
                localVarQueryParameter['purpose'] = purpose;
            }

            if (participantId !== undefined && participantId !== null) {
                localVarHeaderParameter['participant-id'] = String(participantId);
            }

            if (xV !== undefined && xV !== null) {
                localVarHeaderParameter['x-v'] = String(xV);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xFapiAuthDate !== undefined && xFapiAuthDate !== null) {
                localVarHeaderParameter['x-fapi-auth-date'] = String(xFapiAuthDate);
            }

            if (xFapiCustomerIpAddress !== undefined && xFapiCustomerIpAddress !== null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xClientHeaders !== undefined && xClientHeaders !== null) {
                localVarHeaderParameter['x-client-headers'] = String(xClientHeaders);
            }

            if (xClientUserAgent !== undefined && xClientUserAgent !== null) {
                localVarHeaderParameter['x-client-user-agent'] = String(xClientUserAgent);
            }

            if (xIdempotencyKey !== undefined && xIdempotencyKey !== null) {
                localVarHeaderParameter['x-idempotency-key'] = String(xIdempotencyKey);
            }

            if (xFapiCustomerLastLoggedTime !== undefined && xFapiCustomerLastLoggedTime !== null) {
                localVarHeaderParameter['x-fapi-customer-last-logged-time'] = String(xFapiCustomerLastLoggedTime);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of active consent arrangements for the authenticated user. Based on: - UK Open Banking Account Access Consents API - Australia CDR Get Consent API 
         * @summary List consent arrangements
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [status] Filter consents by status
         * @param {Date} [fromDate] Filter consents created after this date
         * @param {Date} [toDate] Filter consents created before this date
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConsentArrangements(participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, status?: string, fromDate?: Date, toDate?: Date, xFapiInteractionId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling listConsentArrangements.');
            }
            // verify required parameter 'xV' is not null or undefined
            if (xV === null || xV === undefined) {
                throw new RequiredError('xV','Required parameter xV was null or undefined when calling listConsentArrangements.');
            }
            // verify required parameter 'xFapiAuthDate' is not null or undefined
            if (xFapiAuthDate === null || xFapiAuthDate === undefined) {
                throw new RequiredError('xFapiAuthDate','Required parameter xFapiAuthDate was null or undefined when calling listConsentArrangements.');
            }
            // verify required parameter 'xFapiCustomerIpAddress' is not null or undefined
            if (xFapiCustomerIpAddress === null || xFapiCustomerIpAddress === undefined) {
                throw new RequiredError('xFapiCustomerIpAddress','Required parameter xFapiCustomerIpAddress was null or undefined when calling listConsentArrangements.');
            }
            // verify required parameter 'xClientHeaders' is not null or undefined
            if (xClientHeaders === null || xClientHeaders === undefined) {
                throw new RequiredError('xClientHeaders','Required parameter xClientHeaders was null or undefined when calling listConsentArrangements.');
            }
            // verify required parameter 'xClientUserAgent' is not null or undefined
            if (xClientUserAgent === null || xClientUserAgent === undefined) {
                throw new RequiredError('xClientUserAgent','Required parameter xClientUserAgent was null or undefined when calling listConsentArrangements.');
            }
            // verify required parameter 'xIdempotencyKey' is not null or undefined
            if (xIdempotencyKey === null || xIdempotencyKey === undefined) {
                throw new RequiredError('xIdempotencyKey','Required parameter xIdempotencyKey was null or undefined when calling listConsentArrangements.');
            }
            // verify required parameter 'xFapiCustomerLastLoggedTime' is not null or undefined
            if (xFapiCustomerLastLoggedTime === null || xFapiCustomerLastLoggedTime === undefined) {
                throw new RequiredError('xFapiCustomerLastLoggedTime','Required parameter xFapiCustomerLastLoggedTime was null or undefined when calling listConsentArrangements.');
            }
            const localVarPath = `/consent/arrangements`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SignedJWT required

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (fromDate !== undefined) {
                localVarQueryParameter['from_date'] = (fromDate as any).toISOString();
            }

            if (toDate !== undefined) {
                localVarQueryParameter['to_date'] = (toDate as any).toISOString();
            }

            if (participantId !== undefined && participantId !== null) {
                localVarHeaderParameter['participant-id'] = String(participantId);
            }

            if (xV !== undefined && xV !== null) {
                localVarHeaderParameter['x-v'] = String(xV);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xFapiAuthDate !== undefined && xFapiAuthDate !== null) {
                localVarHeaderParameter['x-fapi-auth-date'] = String(xFapiAuthDate);
            }

            if (xFapiCustomerIpAddress !== undefined && xFapiCustomerIpAddress !== null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xClientHeaders !== undefined && xClientHeaders !== null) {
                localVarHeaderParameter['x-client-headers'] = String(xClientHeaders);
            }

            if (xClientUserAgent !== undefined && xClientUserAgent !== null) {
                localVarHeaderParameter['x-client-user-agent'] = String(xClientUserAgent);
            }

            if (xIdempotencyKey !== undefined && xIdempotencyKey !== null) {
                localVarHeaderParameter['x-idempotency-key'] = String(xIdempotencyKey);
            }

            if (xFapiCustomerLastLoggedTime !== undefined && xFapiCustomerLastLoggedTime !== null) {
                localVarHeaderParameter['x-fapi-customer-last-logged-time'] = String(xFapiCustomerLastLoggedTime);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve available consent templates that can be used to create new arrangements. Based on: - Australia CDR Consent Taxonomy - UK Open Banking Standard Permissions 
         * @summary List available consent templates
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [category] Filter templates by category
         * @param {string} [purpose] Filter templates by purpose
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConsentTemplates(participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, category?: string, purpose?: string, xFapiInteractionId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling listConsentTemplates.');
            }
            // verify required parameter 'xV' is not null or undefined
            if (xV === null || xV === undefined) {
                throw new RequiredError('xV','Required parameter xV was null or undefined when calling listConsentTemplates.');
            }
            // verify required parameter 'xFapiAuthDate' is not null or undefined
            if (xFapiAuthDate === null || xFapiAuthDate === undefined) {
                throw new RequiredError('xFapiAuthDate','Required parameter xFapiAuthDate was null or undefined when calling listConsentTemplates.');
            }
            // verify required parameter 'xFapiCustomerIpAddress' is not null or undefined
            if (xFapiCustomerIpAddress === null || xFapiCustomerIpAddress === undefined) {
                throw new RequiredError('xFapiCustomerIpAddress','Required parameter xFapiCustomerIpAddress was null or undefined when calling listConsentTemplates.');
            }
            // verify required parameter 'xClientHeaders' is not null or undefined
            if (xClientHeaders === null || xClientHeaders === undefined) {
                throw new RequiredError('xClientHeaders','Required parameter xClientHeaders was null or undefined when calling listConsentTemplates.');
            }
            // verify required parameter 'xClientUserAgent' is not null or undefined
            if (xClientUserAgent === null || xClientUserAgent === undefined) {
                throw new RequiredError('xClientUserAgent','Required parameter xClientUserAgent was null or undefined when calling listConsentTemplates.');
            }
            // verify required parameter 'xIdempotencyKey' is not null or undefined
            if (xIdempotencyKey === null || xIdempotencyKey === undefined) {
                throw new RequiredError('xIdempotencyKey','Required parameter xIdempotencyKey was null or undefined when calling listConsentTemplates.');
            }
            // verify required parameter 'xFapiCustomerLastLoggedTime' is not null or undefined
            if (xFapiCustomerLastLoggedTime === null || xFapiCustomerLastLoggedTime === undefined) {
                throw new RequiredError('xFapiCustomerLastLoggedTime','Required parameter xFapiCustomerLastLoggedTime was null or undefined when calling listConsentTemplates.');
            }
            const localVarPath = `/consent/templates`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SignedJWT required

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (purpose !== undefined) {
                localVarQueryParameter['purpose'] = purpose;
            }

            if (participantId !== undefined && participantId !== null) {
                localVarHeaderParameter['participant-id'] = String(participantId);
            }

            if (xV !== undefined && xV !== null) {
                localVarHeaderParameter['x-v'] = String(xV);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xFapiAuthDate !== undefined && xFapiAuthDate !== null) {
                localVarHeaderParameter['x-fapi-auth-date'] = String(xFapiAuthDate);
            }

            if (xFapiCustomerIpAddress !== undefined && xFapiCustomerIpAddress !== null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xClientHeaders !== undefined && xClientHeaders !== null) {
                localVarHeaderParameter['x-client-headers'] = String(xClientHeaders);
            }

            if (xClientUserAgent !== undefined && xClientUserAgent !== null) {
                localVarHeaderParameter['x-client-user-agent'] = String(xClientUserAgent);
            }

            if (xIdempotencyKey !== undefined && xIdempotencyKey !== null) {
                localVarHeaderParameter['x-idempotency-key'] = String(xIdempotencyKey);
            }

            if (xFapiCustomerLastLoggedTime !== undefined && xFapiCustomerLastLoggedTime !== null) {
                localVarHeaderParameter['x-fapi-customer-last-logged-time'] = String(xFapiCustomerLastLoggedTime);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Revoke an existing consent arrangement. Based on: - UK Open Banking Account Access Consents API - Australia CDR Revoke Consent API - Korea MyData Consent Revocation API 
         * @summary Revoke consent arrangement
         * @param {string} arrangementId The ID of the consent arrangement to revoke
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeConsentArrangement(arrangementId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'arrangementId' is not null or undefined
            if (arrangementId === null || arrangementId === undefined) {
                throw new RequiredError('arrangementId','Required parameter arrangementId was null or undefined when calling revokeConsentArrangement.');
            }
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling revokeConsentArrangement.');
            }
            // verify required parameter 'xV' is not null or undefined
            if (xV === null || xV === undefined) {
                throw new RequiredError('xV','Required parameter xV was null or undefined when calling revokeConsentArrangement.');
            }
            // verify required parameter 'xFapiAuthDate' is not null or undefined
            if (xFapiAuthDate === null || xFapiAuthDate === undefined) {
                throw new RequiredError('xFapiAuthDate','Required parameter xFapiAuthDate was null or undefined when calling revokeConsentArrangement.');
            }
            // verify required parameter 'xFapiCustomerIpAddress' is not null or undefined
            if (xFapiCustomerIpAddress === null || xFapiCustomerIpAddress === undefined) {
                throw new RequiredError('xFapiCustomerIpAddress','Required parameter xFapiCustomerIpAddress was null or undefined when calling revokeConsentArrangement.');
            }
            // verify required parameter 'xClientHeaders' is not null or undefined
            if (xClientHeaders === null || xClientHeaders === undefined) {
                throw new RequiredError('xClientHeaders','Required parameter xClientHeaders was null or undefined when calling revokeConsentArrangement.');
            }
            // verify required parameter 'xClientUserAgent' is not null or undefined
            if (xClientUserAgent === null || xClientUserAgent === undefined) {
                throw new RequiredError('xClientUserAgent','Required parameter xClientUserAgent was null or undefined when calling revokeConsentArrangement.');
            }
            // verify required parameter 'xIdempotencyKey' is not null or undefined
            if (xIdempotencyKey === null || xIdempotencyKey === undefined) {
                throw new RequiredError('xIdempotencyKey','Required parameter xIdempotencyKey was null or undefined when calling revokeConsentArrangement.');
            }
            // verify required parameter 'xFapiCustomerLastLoggedTime' is not null or undefined
            if (xFapiCustomerLastLoggedTime === null || xFapiCustomerLastLoggedTime === undefined) {
                throw new RequiredError('xFapiCustomerLastLoggedTime','Required parameter xFapiCustomerLastLoggedTime was null or undefined when calling revokeConsentArrangement.');
            }
            const localVarPath = `/consent/arrangements/{arrangement_id}`
                .replace(`{${"arrangement_id"}}`, encodeURIComponent(String(arrangementId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SignedJWT required

            if (participantId !== undefined && participantId !== null) {
                localVarHeaderParameter['participant-id'] = String(participantId);
            }

            if (xV !== undefined && xV !== null) {
                localVarHeaderParameter['x-v'] = String(xV);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xFapiAuthDate !== undefined && xFapiAuthDate !== null) {
                localVarHeaderParameter['x-fapi-auth-date'] = String(xFapiAuthDate);
            }

            if (xFapiCustomerIpAddress !== undefined && xFapiCustomerIpAddress !== null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xClientHeaders !== undefined && xClientHeaders !== null) {
                localVarHeaderParameter['x-client-headers'] = String(xClientHeaders);
            }

            if (xClientUserAgent !== undefined && xClientUserAgent !== null) {
                localVarHeaderParameter['x-client-user-agent'] = String(xClientUserAgent);
            }

            if (xIdempotencyKey !== undefined && xIdempotencyKey !== null) {
                localVarHeaderParameter['x-idempotency-key'] = String(xIdempotencyKey);
            }

            if (xFapiCustomerLastLoggedTime !== undefined && xFapiCustomerLastLoggedTime !== null) {
                localVarHeaderParameter['x-fapi-customer-last-logged-time'] = String(xFapiCustomerLastLoggedTime);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the status of a consent arrangement (e.g., suspend, resume). Based on: - UK Open Banking Account Access Consents API - Australia CDR Update Consent API 
         * @summary Update consent arrangement status
         * @param {ConsentStatusUpdate} body 
         * @param {string} arrangementId The ID of the consent arrangement
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConsentStatus(body: ConsentStatusUpdate, arrangementId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateConsentStatus.');
            }
            // verify required parameter 'arrangementId' is not null or undefined
            if (arrangementId === null || arrangementId === undefined) {
                throw new RequiredError('arrangementId','Required parameter arrangementId was null or undefined when calling updateConsentStatus.');
            }
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling updateConsentStatus.');
            }
            // verify required parameter 'xV' is not null or undefined
            if (xV === null || xV === undefined) {
                throw new RequiredError('xV','Required parameter xV was null or undefined when calling updateConsentStatus.');
            }
            // verify required parameter 'xFapiAuthDate' is not null or undefined
            if (xFapiAuthDate === null || xFapiAuthDate === undefined) {
                throw new RequiredError('xFapiAuthDate','Required parameter xFapiAuthDate was null or undefined when calling updateConsentStatus.');
            }
            // verify required parameter 'xFapiCustomerIpAddress' is not null or undefined
            if (xFapiCustomerIpAddress === null || xFapiCustomerIpAddress === undefined) {
                throw new RequiredError('xFapiCustomerIpAddress','Required parameter xFapiCustomerIpAddress was null or undefined when calling updateConsentStatus.');
            }
            // verify required parameter 'xClientHeaders' is not null or undefined
            if (xClientHeaders === null || xClientHeaders === undefined) {
                throw new RequiredError('xClientHeaders','Required parameter xClientHeaders was null or undefined when calling updateConsentStatus.');
            }
            // verify required parameter 'xClientUserAgent' is not null or undefined
            if (xClientUserAgent === null || xClientUserAgent === undefined) {
                throw new RequiredError('xClientUserAgent','Required parameter xClientUserAgent was null or undefined when calling updateConsentStatus.');
            }
            // verify required parameter 'xIdempotencyKey' is not null or undefined
            if (xIdempotencyKey === null || xIdempotencyKey === undefined) {
                throw new RequiredError('xIdempotencyKey','Required parameter xIdempotencyKey was null or undefined when calling updateConsentStatus.');
            }
            // verify required parameter 'xFapiCustomerLastLoggedTime' is not null or undefined
            if (xFapiCustomerLastLoggedTime === null || xFapiCustomerLastLoggedTime === undefined) {
                throw new RequiredError('xFapiCustomerLastLoggedTime','Required parameter xFapiCustomerLastLoggedTime was null or undefined when calling updateConsentStatus.');
            }
            const localVarPath = `/consent/arrangements/{arrangement_id}`
                .replace(`{${"arrangement_id"}}`, encodeURIComponent(String(arrangementId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SignedJWT required

            if (participantId !== undefined && participantId !== null) {
                localVarHeaderParameter['participant-id'] = String(participantId);
            }

            if (xV !== undefined && xV !== null) {
                localVarHeaderParameter['x-v'] = String(xV);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xFapiAuthDate !== undefined && xFapiAuthDate !== null) {
                localVarHeaderParameter['x-fapi-auth-date'] = String(xFapiAuthDate);
            }

            if (xFapiCustomerIpAddress !== undefined && xFapiCustomerIpAddress !== null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xClientHeaders !== undefined && xClientHeaders !== null) {
                localVarHeaderParameter['x-client-headers'] = String(xClientHeaders);
            }

            if (xClientUserAgent !== undefined && xClientUserAgent !== null) {
                localVarHeaderParameter['x-client-user-agent'] = String(xClientUserAgent);
            }

            if (xIdempotencyKey !== undefined && xIdempotencyKey !== null) {
                localVarHeaderParameter['x-idempotency-key'] = String(xIdempotencyKey);
            }

            if (xFapiCustomerLastLoggedTime !== undefined && xFapiCustomerLastLoggedTime !== null) {
                localVarHeaderParameter['x-fapi-customer-last-logged-time'] = String(xFapiCustomerLastLoggedTime);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ConsentStatusUpdate" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConsentApi - functional programming interface
 * @export
 */
export const ConsentApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Update multiple consent arrangements for a specific customer in a single request. Based on: - Australia CDR Bulk Consumer Update - Korea MyData Consent Management 
         * @summary Bulk update customer's consent arrangements
         * @param {ArrangementsBulkupdateBody} body 
         * @param {string} customerId The customer&#x27;s unique identifier
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUpdateCustomerConsents(body: ArrangementsBulkupdateBody, customerId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2004> {
            const localVarFetchArgs = ConsentApiFetchParamCreator(configuration).bulkUpdateCustomerConsents(body, customerId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create multiple consent arrangements in a single request. Based on: - Korea MyData Bulk Consent API - Singapore SGFinDex Multi-Institution Consent 
         * @summary Create bulk consent arrangements
         * @param {BulkConsentRequest} body 
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBulkConsent(body: BulkConsentRequest, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BulkConsentResponse> {
            const localVarFetchArgs = ConsentApiFetchParamCreator(configuration).createBulkConsent(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a new consent arrangement between a data holder and data recipient. Based on: - UK Open Banking Consent API v3.1.10 - Australia CDR Consent Management Standards v1.14.0 - Singapore SGFinDex Consent Framework 
         * @summary Create a consent arrangement
         * @param {ConsentArrangementRequest} body 
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConsentArrangement(body: ConsentArrangementRequest, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConsentArrangementResponse> {
            const localVarFetchArgs = ConsentApiFetchParamCreator(configuration).createConsentArrangement(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Extend the duration of an existing consent arrangement. Based on: - Australia CDR Consent Amendment - UK Open Banking Re-authentication 
         * @summary Extend consent arrangement duration
         * @param {ConsentExtensionRequest} body 
         * @param {string} arrangementId The ID of the consent arrangement
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extendConsentDuration(body: ConsentExtensionRequest, arrangementId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConsentArrangementResponse> {
            const localVarFetchArgs = ConsentApiFetchParamCreator(configuration).extendConsentDuration(body, arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve details of a specific consent arrangement. Based on: - UK Open Banking Account Access Consents API - Australia CDR Get Consent API 
         * @summary Get consent arrangement details
         * @param {string} arrangementId The ID of the consent arrangement
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsentArrangement(arrangementId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConsentArrangementResponse> {
            const localVarFetchArgs = ConsentApiFetchParamCreator(configuration).getConsentArrangement(arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve the full history of changes to a consent arrangement. Based on: - Australia CDR Consent History API - UK Open Banking Consent Audit Requirements 
         * @summary Get consent arrangement history
         * @param {string} arrangementId The ID of the consent arrangement
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsentHistory(arrangementId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConsentHistory> {
            const localVarFetchArgs = ConsentApiFetchParamCreator(configuration).getConsentHistory(arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a comprehensive view of customer's consent arrangements and data sharing. Based on: - Australia CDR Consumer Dashboard - UK Open Banking Consent Dashboard - Singapore SGFinDex Customer Portal 
         * @summary Get customer's consent dashboard
         * @param {string} customerId The customer&#x27;s unique identifier
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerConsentDashboard(customerId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConsentDashboard> {
            const localVarFetchArgs = ConsentApiFetchParamCreator(configuration).getCustomerConsentDashboard(customerId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all consent arrangements for a specific customer. Based on: - UK Open Banking Customer Consent Management - Australia CDR Consumer Dashboard APIs - Singapore SGFinDex Customer Consent View 
         * @summary Get customer's consent arrangements
         * @param {string} customerId The customer&#x27;s unique identifier
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [status] Filter consents by status
         * @param {string} [dataHolderId] Filter by specific data holder/institution
         * @param {string} [purpose] Filter by consent purpose
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerConsents(customerId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, status?: string, dataHolderId?: string, purpose?: string, xFapiInteractionId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2003> {
            const localVarFetchArgs = ConsentApiFetchParamCreator(configuration).getCustomerConsents(customerId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, status, dataHolderId, purpose, xFapiInteractionId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a list of active consent arrangements for the authenticated user. Based on: - UK Open Banking Account Access Consents API - Australia CDR Get Consent API 
         * @summary List consent arrangements
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [status] Filter consents by status
         * @param {Date} [fromDate] Filter consents created after this date
         * @param {Date} [toDate] Filter consents created before this date
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConsentArrangements(participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, status?: string, fromDate?: Date, toDate?: Date, xFapiInteractionId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ConsentArrangementResponse>> {
            const localVarFetchArgs = ConsentApiFetchParamCreator(configuration).listConsentArrangements(participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, status, fromDate, toDate, xFapiInteractionId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve available consent templates that can be used to create new arrangements. Based on: - Australia CDR Consent Taxonomy - UK Open Banking Standard Permissions 
         * @summary List available consent templates
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [category] Filter templates by category
         * @param {string} [purpose] Filter templates by purpose
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConsentTemplates(participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, category?: string, purpose?: string, xFapiInteractionId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ConsentTemplate>> {
            const localVarFetchArgs = ConsentApiFetchParamCreator(configuration).listConsentTemplates(participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, category, purpose, xFapiInteractionId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Revoke an existing consent arrangement. Based on: - UK Open Banking Account Access Consents API - Australia CDR Revoke Consent API - Korea MyData Consent Revocation API 
         * @summary Revoke consent arrangement
         * @param {string} arrangementId The ID of the consent arrangement to revoke
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeConsentArrangement(arrangementId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ConsentApiFetchParamCreator(configuration).revokeConsentArrangement(arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update the status of a consent arrangement (e.g., suspend, resume). Based on: - UK Open Banking Account Access Consents API - Australia CDR Update Consent API 
         * @summary Update consent arrangement status
         * @param {ConsentStatusUpdate} body 
         * @param {string} arrangementId The ID of the consent arrangement
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConsentStatus(body: ConsentStatusUpdate, arrangementId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConsentArrangementResponse> {
            const localVarFetchArgs = ConsentApiFetchParamCreator(configuration).updateConsentStatus(body, arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ConsentApi - factory interface
 * @export
 */
export const ConsentApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Update multiple consent arrangements for a specific customer in a single request. Based on: - Australia CDR Bulk Consumer Update - Korea MyData Consent Management 
         * @summary Bulk update customer's consent arrangements
         * @param {ArrangementsBulkupdateBody} body 
         * @param {string} customerId The customer&#x27;s unique identifier
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUpdateCustomerConsents(body: ArrangementsBulkupdateBody, customerId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
            return ConsentApiFp(configuration).bulkUpdateCustomerConsents(body, customerId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(fetch, basePath);
        },
        /**
         * Create multiple consent arrangements in a single request. Based on: - Korea MyData Bulk Consent API - Singapore SGFinDex Multi-Institution Consent 
         * @summary Create bulk consent arrangements
         * @param {BulkConsentRequest} body 
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBulkConsent(body: BulkConsentRequest, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
            return ConsentApiFp(configuration).createBulkConsent(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(fetch, basePath);
        },
        /**
         * Create a new consent arrangement between a data holder and data recipient. Based on: - UK Open Banking Consent API v3.1.10 - Australia CDR Consent Management Standards v1.14.0 - Singapore SGFinDex Consent Framework 
         * @summary Create a consent arrangement
         * @param {ConsentArrangementRequest} body 
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConsentArrangement(body: ConsentArrangementRequest, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
            return ConsentApiFp(configuration).createConsentArrangement(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(fetch, basePath);
        },
        /**
         * Extend the duration of an existing consent arrangement. Based on: - Australia CDR Consent Amendment - UK Open Banking Re-authentication 
         * @summary Extend consent arrangement duration
         * @param {ConsentExtensionRequest} body 
         * @param {string} arrangementId The ID of the consent arrangement
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extendConsentDuration(body: ConsentExtensionRequest, arrangementId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
            return ConsentApiFp(configuration).extendConsentDuration(body, arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(fetch, basePath);
        },
        /**
         * Retrieve details of a specific consent arrangement. Based on: - UK Open Banking Account Access Consents API - Australia CDR Get Consent API 
         * @summary Get consent arrangement details
         * @param {string} arrangementId The ID of the consent arrangement
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsentArrangement(arrangementId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
            return ConsentApiFp(configuration).getConsentArrangement(arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(fetch, basePath);
        },
        /**
         * Retrieve the full history of changes to a consent arrangement. Based on: - Australia CDR Consent History API - UK Open Banking Consent Audit Requirements 
         * @summary Get consent arrangement history
         * @param {string} arrangementId The ID of the consent arrangement
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsentHistory(arrangementId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
            return ConsentApiFp(configuration).getConsentHistory(arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(fetch, basePath);
        },
        /**
         * Retrieve a comprehensive view of customer's consent arrangements and data sharing. Based on: - Australia CDR Consumer Dashboard - UK Open Banking Consent Dashboard - Singapore SGFinDex Customer Portal 
         * @summary Get customer's consent dashboard
         * @param {string} customerId The customer&#x27;s unique identifier
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerConsentDashboard(customerId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
            return ConsentApiFp(configuration).getCustomerConsentDashboard(customerId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(fetch, basePath);
        },
        /**
         * Retrieve all consent arrangements for a specific customer. Based on: - UK Open Banking Customer Consent Management - Australia CDR Consumer Dashboard APIs - Singapore SGFinDex Customer Consent View 
         * @summary Get customer's consent arrangements
         * @param {string} customerId The customer&#x27;s unique identifier
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [status] Filter consents by status
         * @param {string} [dataHolderId] Filter by specific data holder/institution
         * @param {string} [purpose] Filter by consent purpose
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerConsents(customerId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, status?: string, dataHolderId?: string, purpose?: string, xFapiInteractionId?: string, options?: any) {
            return ConsentApiFp(configuration).getCustomerConsents(customerId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, status, dataHolderId, purpose, xFapiInteractionId, options)(fetch, basePath);
        },
        /**
         * Retrieve a list of active consent arrangements for the authenticated user. Based on: - UK Open Banking Account Access Consents API - Australia CDR Get Consent API 
         * @summary List consent arrangements
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [status] Filter consents by status
         * @param {Date} [fromDate] Filter consents created after this date
         * @param {Date} [toDate] Filter consents created before this date
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConsentArrangements(participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, status?: string, fromDate?: Date, toDate?: Date, xFapiInteractionId?: string, options?: any) {
            return ConsentApiFp(configuration).listConsentArrangements(participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, status, fromDate, toDate, xFapiInteractionId, options)(fetch, basePath);
        },
        /**
         * Retrieve available consent templates that can be used to create new arrangements. Based on: - Australia CDR Consent Taxonomy - UK Open Banking Standard Permissions 
         * @summary List available consent templates
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [category] Filter templates by category
         * @param {string} [purpose] Filter templates by purpose
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConsentTemplates(participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, category?: string, purpose?: string, xFapiInteractionId?: string, options?: any) {
            return ConsentApiFp(configuration).listConsentTemplates(participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, category, purpose, xFapiInteractionId, options)(fetch, basePath);
        },
        /**
         * Revoke an existing consent arrangement. Based on: - UK Open Banking Account Access Consents API - Australia CDR Revoke Consent API - Korea MyData Consent Revocation API 
         * @summary Revoke consent arrangement
         * @param {string} arrangementId The ID of the consent arrangement to revoke
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeConsentArrangement(arrangementId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
            return ConsentApiFp(configuration).revokeConsentArrangement(arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(fetch, basePath);
        },
        /**
         * Update the status of a consent arrangement (e.g., suspend, resume). Based on: - UK Open Banking Account Access Consents API - Australia CDR Update Consent API 
         * @summary Update consent arrangement status
         * @param {ConsentStatusUpdate} body 
         * @param {string} arrangementId The ID of the consent arrangement
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConsentStatus(body: ConsentStatusUpdate, arrangementId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
            return ConsentApiFp(configuration).updateConsentStatus(body, arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(fetch, basePath);
        },
    };
};

/**
 * ConsentApi - object-oriented interface
 * @export
 * @class ConsentApi
 * @extends {BaseAPI}
 */
export class ConsentApi extends BaseAPI {
    /**
     * Update multiple consent arrangements for a specific customer in a single request. Based on: - Australia CDR Bulk Consumer Update - Korea MyData Consent Management 
     * @summary Bulk update customer's consent arrangements
     * @param {ArrangementsBulkupdateBody} body 
     * @param {string} customerId The customer&#x27;s unique identifier
     * @param {string} participantId Field referencing the unique identifier of the requesting participant.
     * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
     * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
     * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
     * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
     * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
     * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public bulkUpdateCustomerConsents(body: ArrangementsBulkupdateBody, customerId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
        return ConsentApiFp(this.configuration).bulkUpdateCustomerConsents(body, customerId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(this.fetch, this.basePath);
    }

    /**
     * Create multiple consent arrangements in a single request. Based on: - Korea MyData Bulk Consent API - Singapore SGFinDex Multi-Institution Consent 
     * @summary Create bulk consent arrangements
     * @param {BulkConsentRequest} body 
     * @param {string} participantId Field referencing the unique identifier of the requesting participant.
     * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
     * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
     * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
     * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
     * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
     * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public createBulkConsent(body: BulkConsentRequest, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
        return ConsentApiFp(this.configuration).createBulkConsent(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(this.fetch, this.basePath);
    }

    /**
     * Create a new consent arrangement between a data holder and data recipient. Based on: - UK Open Banking Consent API v3.1.10 - Australia CDR Consent Management Standards v1.14.0 - Singapore SGFinDex Consent Framework 
     * @summary Create a consent arrangement
     * @param {ConsentArrangementRequest} body 
     * @param {string} participantId Field referencing the unique identifier of the requesting participant.
     * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
     * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
     * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
     * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
     * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
     * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public createConsentArrangement(body: ConsentArrangementRequest, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
        return ConsentApiFp(this.configuration).createConsentArrangement(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(this.fetch, this.basePath);
    }

    /**
     * Extend the duration of an existing consent arrangement. Based on: - Australia CDR Consent Amendment - UK Open Banking Re-authentication 
     * @summary Extend consent arrangement duration
     * @param {ConsentExtensionRequest} body 
     * @param {string} arrangementId The ID of the consent arrangement
     * @param {string} participantId Field referencing the unique identifier of the requesting participant.
     * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
     * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
     * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
     * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
     * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
     * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public extendConsentDuration(body: ConsentExtensionRequest, arrangementId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
        return ConsentApiFp(this.configuration).extendConsentDuration(body, arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(this.fetch, this.basePath);
    }

    /**
     * Retrieve details of a specific consent arrangement. Based on: - UK Open Banking Account Access Consents API - Australia CDR Get Consent API 
     * @summary Get consent arrangement details
     * @param {string} arrangementId The ID of the consent arrangement
     * @param {string} participantId Field referencing the unique identifier of the requesting participant.
     * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
     * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
     * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
     * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
     * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
     * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public getConsentArrangement(arrangementId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
        return ConsentApiFp(this.configuration).getConsentArrangement(arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(this.fetch, this.basePath);
    }

    /**
     * Retrieve the full history of changes to a consent arrangement. Based on: - Australia CDR Consent History API - UK Open Banking Consent Audit Requirements 
     * @summary Get consent arrangement history
     * @param {string} arrangementId The ID of the consent arrangement
     * @param {string} participantId Field referencing the unique identifier of the requesting participant.
     * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
     * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
     * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
     * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
     * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
     * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public getConsentHistory(arrangementId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
        return ConsentApiFp(this.configuration).getConsentHistory(arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(this.fetch, this.basePath);
    }

    /**
     * Retrieve a comprehensive view of customer's consent arrangements and data sharing. Based on: - Australia CDR Consumer Dashboard - UK Open Banking Consent Dashboard - Singapore SGFinDex Customer Portal 
     * @summary Get customer's consent dashboard
     * @param {string} customerId The customer&#x27;s unique identifier
     * @param {string} participantId Field referencing the unique identifier of the requesting participant.
     * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
     * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
     * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
     * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
     * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
     * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public getCustomerConsentDashboard(customerId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
        return ConsentApiFp(this.configuration).getCustomerConsentDashboard(customerId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(this.fetch, this.basePath);
    }

    /**
     * Retrieve all consent arrangements for a specific customer. Based on: - UK Open Banking Customer Consent Management - Australia CDR Consumer Dashboard APIs - Singapore SGFinDex Customer Consent View 
     * @summary Get customer's consent arrangements
     * @param {string} customerId The customer&#x27;s unique identifier
     * @param {string} participantId Field referencing the unique identifier of the requesting participant.
     * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
     * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
     * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
     * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
     * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
     * @param {string} [status] Filter consents by status
     * @param {string} [dataHolderId] Filter by specific data holder/institution
     * @param {string} [purpose] Filter by consent purpose
     * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public getCustomerConsents(customerId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, status?: string, dataHolderId?: string, purpose?: string, xFapiInteractionId?: string, options?: any) {
        return ConsentApiFp(this.configuration).getCustomerConsents(customerId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, status, dataHolderId, purpose, xFapiInteractionId, options)(this.fetch, this.basePath);
    }

    /**
     * Retrieve a list of active consent arrangements for the authenticated user. Based on: - UK Open Banking Account Access Consents API - Australia CDR Get Consent API 
     * @summary List consent arrangements
     * @param {string} participantId Field referencing the unique identifier of the requesting participant.
     * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
     * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
     * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
     * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
     * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
     * @param {string} [status] Filter consents by status
     * @param {Date} [fromDate] Filter consents created after this date
     * @param {Date} [toDate] Filter consents created before this date
     * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public listConsentArrangements(participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, status?: string, fromDate?: Date, toDate?: Date, xFapiInteractionId?: string, options?: any) {
        return ConsentApiFp(this.configuration).listConsentArrangements(participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, status, fromDate, toDate, xFapiInteractionId, options)(this.fetch, this.basePath);
    }

    /**
     * Retrieve available consent templates that can be used to create new arrangements. Based on: - Australia CDR Consent Taxonomy - UK Open Banking Standard Permissions 
     * @summary List available consent templates
     * @param {string} participantId Field referencing the unique identifier of the requesting participant.
     * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
     * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
     * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
     * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
     * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
     * @param {string} [category] Filter templates by category
     * @param {string} [purpose] Filter templates by purpose
     * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public listConsentTemplates(participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, category?: string, purpose?: string, xFapiInteractionId?: string, options?: any) {
        return ConsentApiFp(this.configuration).listConsentTemplates(participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, category, purpose, xFapiInteractionId, options)(this.fetch, this.basePath);
    }

    /**
     * Revoke an existing consent arrangement. Based on: - UK Open Banking Account Access Consents API - Australia CDR Revoke Consent API - Korea MyData Consent Revocation API 
     * @summary Revoke consent arrangement
     * @param {string} arrangementId The ID of the consent arrangement to revoke
     * @param {string} participantId Field referencing the unique identifier of the requesting participant.
     * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
     * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
     * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
     * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
     * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
     * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public revokeConsentArrangement(arrangementId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
        return ConsentApiFp(this.configuration).revokeConsentArrangement(arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(this.fetch, this.basePath);
    }

    /**
     * Update the status of a consent arrangement (e.g., suspend, resume). Based on: - UK Open Banking Account Access Consents API - Australia CDR Update Consent API 
     * @summary Update consent arrangement status
     * @param {ConsentStatusUpdate} body 
     * @param {string} arrangementId The ID of the consent arrangement
     * @param {string} participantId Field referencing the unique identifier of the requesting participant.
     * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
     * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
     * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
     * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
     * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
     * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public updateConsentStatus(body: ConsentStatusUpdate, arrangementId: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
        return ConsentApiFp(this.configuration).updateConsentStatus(body, arrangementId, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(this.fetch, this.basePath);
    }

}
/**
 * DiscoveryApi - fetch parameter creator
 * @export
 */
export const DiscoveryApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete Client Registration (configurable endpoint)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientRegistration(options: any = {}): FetchArgs {
            const localVarPath = `/.well-known/openid-registration`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SignedJWT required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Client Registration (configurable endpoint)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientRegistration(options: any = {}): FetchArgs {
            const localVarPath = `/.well-known/openid-registration`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RegistrationAccessToken required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the public keys used to verify JWT signatures
         * @summary [PHASE 1] Retrieve JSON Web Key Set (JWKS) containing public keys for JWT signature verification (configurable endpoint)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJwks(options: any = {}): FetchArgs {
            const localVarPath = `/.well-known/jwks.json`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SignedJWT required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve OpenID Connect configuration information
         * @summary Optional - OpenID Connect Discovery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenIdConfiguration(options: any = {}): FetchArgs {
            const localVarPath = `/.well-known/openid-configuration`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SignedJWT required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register a new OFxPERA Participant as an OAuth client following FAPI Dynamic Client Registration requirements.
         * @summary [PHASE 2] Dynamic Client Registration (configurable endpoint)
         * @param {ClientRegistration} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerClient(body: ClientRegistration, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling registerClient.');
            }
            const localVarPath = `/.well-known/openid-registration`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SignedJWT required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ClientRegistration" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary [PHASE 2] Update Client Registration (configurable endpoint)
         * @param {ClientRegistration} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientRegistration(body: ClientRegistration, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateClientRegistration.');
            }
            const localVarPath = `/.well-known/openid-registration`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RegistrationAccessToken required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ClientRegistration" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DiscoveryApi - functional programming interface
 * @export
 */
export const DiscoveryApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete Client Registration (configurable endpoint)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientRegistration(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DiscoveryApiFetchParamCreator(configuration).deleteClientRegistration(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get Client Registration (configurable endpoint)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientRegistration(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ClientRegistration> {
            const localVarFetchArgs = DiscoveryApiFetchParamCreator(configuration).getClientRegistration(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the public keys used to verify JWT signatures
         * @summary [PHASE 1] Retrieve JSON Web Key Set (JWKS) containing public keys for JWT signature verification (configurable endpoint)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJwks(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<JWKSet> {
            const localVarFetchArgs = DiscoveryApiFetchParamCreator(configuration).getJwks(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve OpenID Connect configuration information
         * @summary Optional - OpenID Connect Discovery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenIdConfiguration(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2002> {
            const localVarFetchArgs = DiscoveryApiFetchParamCreator(configuration).getOpenIdConfiguration(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Register a new OFxPERA Participant as an OAuth client following FAPI Dynamic Client Registration requirements.
         * @summary [PHASE 2] Dynamic Client Registration (configurable endpoint)
         * @param {ClientRegistration} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerClient(body: ClientRegistration, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ClientRegistrationResponse> {
            const localVarFetchArgs = DiscoveryApiFetchParamCreator(configuration).registerClient(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary [PHASE 2] Update Client Registration (configurable endpoint)
         * @param {ClientRegistration} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientRegistration(body: ClientRegistration, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ClientRegistration> {
            const localVarFetchArgs = DiscoveryApiFetchParamCreator(configuration).updateClientRegistration(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DiscoveryApi - factory interface
 * @export
 */
export const DiscoveryApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Delete Client Registration (configurable endpoint)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientRegistration(options?: any) {
            return DiscoveryApiFp(configuration).deleteClientRegistration(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get Client Registration (configurable endpoint)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientRegistration(options?: any) {
            return DiscoveryApiFp(configuration).getClientRegistration(options)(fetch, basePath);
        },
        /**
         * Returns the public keys used to verify JWT signatures
         * @summary [PHASE 1] Retrieve JSON Web Key Set (JWKS) containing public keys for JWT signature verification (configurable endpoint)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJwks(options?: any) {
            return DiscoveryApiFp(configuration).getJwks(options)(fetch, basePath);
        },
        /**
         * Retrieve OpenID Connect configuration information
         * @summary Optional - OpenID Connect Discovery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenIdConfiguration(options?: any) {
            return DiscoveryApiFp(configuration).getOpenIdConfiguration(options)(fetch, basePath);
        },
        /**
         * Register a new OFxPERA Participant as an OAuth client following FAPI Dynamic Client Registration requirements.
         * @summary [PHASE 2] Dynamic Client Registration (configurable endpoint)
         * @param {ClientRegistration} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerClient(body: ClientRegistration, options?: any) {
            return DiscoveryApiFp(configuration).registerClient(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary [PHASE 2] Update Client Registration (configurable endpoint)
         * @param {ClientRegistration} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientRegistration(body: ClientRegistration, options?: any) {
            return DiscoveryApiFp(configuration).updateClientRegistration(body, options)(fetch, basePath);
        },
    };
};

/**
 * DiscoveryApi - object-oriented interface
 * @export
 * @class DiscoveryApi
 * @extends {BaseAPI}
 */
export class DiscoveryApi extends BaseAPI {
    /**
     * 
     * @summary Delete Client Registration (configurable endpoint)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscoveryApi
     */
    public deleteClientRegistration(options?: any) {
        return DiscoveryApiFp(this.configuration).deleteClientRegistration(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get Client Registration (configurable endpoint)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscoveryApi
     */
    public getClientRegistration(options?: any) {
        return DiscoveryApiFp(this.configuration).getClientRegistration(options)(this.fetch, this.basePath);
    }

    /**
     * Returns the public keys used to verify JWT signatures
     * @summary [PHASE 1] Retrieve JSON Web Key Set (JWKS) containing public keys for JWT signature verification (configurable endpoint)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscoveryApi
     */
    public getJwks(options?: any) {
        return DiscoveryApiFp(this.configuration).getJwks(options)(this.fetch, this.basePath);
    }

    /**
     * Retrieve OpenID Connect configuration information
     * @summary Optional - OpenID Connect Discovery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscoveryApi
     */
    public getOpenIdConfiguration(options?: any) {
        return DiscoveryApiFp(this.configuration).getOpenIdConfiguration(options)(this.fetch, this.basePath);
    }

    /**
     * Register a new OFxPERA Participant as an OAuth client following FAPI Dynamic Client Registration requirements.
     * @summary [PHASE 2] Dynamic Client Registration (configurable endpoint)
     * @param {ClientRegistration} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscoveryApi
     */
    public registerClient(body: ClientRegistration, options?: any) {
        return DiscoveryApiFp(this.configuration).registerClient(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary [PHASE 2] Update Client Registration (configurable endpoint)
     * @param {ClientRegistration} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscoveryApi
     */
    public updateClientRegistration(body: ClientRegistration, options?: any) {
        return DiscoveryApiFp(this.configuration).updateClientRegistration(body, options)(this.fetch, this.basePath);
    }

}
/**
 * OAuthApi - fetch parameter creator
 * @export
 */
export const OAuthApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * OpenID Connect authorization endpoint that initiates the authorization flow
         * @summary [PHASE 1] Authorization endpoint for Admin-initiated onboarding
         * @param {string} clientId Client identifier issued to the client during registration
         * @param {string} responseType Must be set to \&quot;code\&quot; for authorization code flow
         * @param {Array<string>} scope Space-separated list of requested scope values, OFxPERA requires openid to be included to maintain compatibility with OIDC.
         * @param {string} redirectUri URI to return the user to after authorization is complete
         * @param {string} state Opaque value to maintain state between request and callback
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [codeChallenge] Code challenge for PKCE
         * @param {string} [codeChallengeMethod] Code challenge method for PKCE
         * @param {string} [prompt] Prompt for the authorization request
         * @param {string} [nonce] Random value used to prevent replay attacks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeOAuth(clientId: string, responseType: string, scope: Array<string>, redirectUri: string, state: string, xIdempotencyKey: string, xFapiAuthDate: Date, xFapiCustomerLastLoggedTime: Date, codeChallenge?: string, codeChallengeMethod?: string, prompt?: string, nonce?: string, options: any = {}): FetchArgs {
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new RequiredError('clientId','Required parameter clientId was null or undefined when calling authorizeOAuth.');
            }
            // verify required parameter 'responseType' is not null or undefined
            if (responseType === null || responseType === undefined) {
                throw new RequiredError('responseType','Required parameter responseType was null or undefined when calling authorizeOAuth.');
            }
            // verify required parameter 'scope' is not null or undefined
            if (scope === null || scope === undefined) {
                throw new RequiredError('scope','Required parameter scope was null or undefined when calling authorizeOAuth.');
            }
            // verify required parameter 'redirectUri' is not null or undefined
            if (redirectUri === null || redirectUri === undefined) {
                throw new RequiredError('redirectUri','Required parameter redirectUri was null or undefined when calling authorizeOAuth.');
            }
            // verify required parameter 'state' is not null or undefined
            if (state === null || state === undefined) {
                throw new RequiredError('state','Required parameter state was null or undefined when calling authorizeOAuth.');
            }
            // verify required parameter 'xIdempotencyKey' is not null or undefined
            if (xIdempotencyKey === null || xIdempotencyKey === undefined) {
                throw new RequiredError('xIdempotencyKey','Required parameter xIdempotencyKey was null or undefined when calling authorizeOAuth.');
            }
            // verify required parameter 'xFapiAuthDate' is not null or undefined
            if (xFapiAuthDate === null || xFapiAuthDate === undefined) {
                throw new RequiredError('xFapiAuthDate','Required parameter xFapiAuthDate was null or undefined when calling authorizeOAuth.');
            }
            // verify required parameter 'xFapiCustomerLastLoggedTime' is not null or undefined
            if (xFapiCustomerLastLoggedTime === null || xFapiCustomerLastLoggedTime === undefined) {
                throw new RequiredError('xFapiCustomerLastLoggedTime','Required parameter xFapiCustomerLastLoggedTime was null or undefined when calling authorizeOAuth.');
            }
            const localVarPath = `/oauth/auth`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SignedJWT required

            if (clientId !== undefined) {
                localVarQueryParameter['client_id'] = clientId;
            }

            if (responseType !== undefined) {
                localVarQueryParameter['response_type'] = responseType;
            }

            if (scope) {
                localVarQueryParameter['scope'] = scope;
            }

            if (redirectUri !== undefined) {
                localVarQueryParameter['redirect_uri'] = redirectUri;
            }

            if (codeChallenge !== undefined) {
                localVarQueryParameter['code_challenge'] = codeChallenge;
            }

            if (codeChallengeMethod !== undefined) {
                localVarQueryParameter['code_challenge_method'] = codeChallengeMethod;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (prompt !== undefined) {
                localVarQueryParameter['prompt'] = prompt;
            }

            if (nonce !== undefined) {
                localVarQueryParameter['nonce'] = nonce;
            }

            if (xIdempotencyKey !== undefined && xIdempotencyKey !== null) {
                localVarHeaderParameter['x-idempotency-key'] = String(xIdempotencyKey);
            }

            if (xFapiAuthDate !== undefined && xFapiAuthDate !== null) {
                localVarHeaderParameter['x-fapi-auth-date'] = String(xFapiAuthDate);
            }

            if (xFapiCustomerLastLoggedTime !== undefined && xFapiCustomerLastLoggedTime !== null) {
                localVarHeaderParameter['x-fapi-customer-last-logged-time'] = String(xFapiCustomerLastLoggedTime);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * OAuth 2.0 token endpoint for obtaining access tokens
         * @summary [PHASE 1] Token endpoint
         * @param {string} grantType 
         * @param {string} code 
         * @param {string} redirectUri 
         * @param {string} clientId 
         * @param {string} refreshToken 
         * @param {string} clientAssertionType 
         * @param {string} clientAssertion 
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOAuthToken(grantType: string, code: string, redirectUri: string, clientId: string, refreshToken: string, clientAssertionType: string, clientAssertion: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'grantType' is not null or undefined
            if (grantType === null || grantType === undefined) {
                throw new RequiredError('grantType','Required parameter grantType was null or undefined when calling getOAuthToken.');
            }
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling getOAuthToken.');
            }
            // verify required parameter 'redirectUri' is not null or undefined
            if (redirectUri === null || redirectUri === undefined) {
                throw new RequiredError('redirectUri','Required parameter redirectUri was null or undefined when calling getOAuthToken.');
            }
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new RequiredError('clientId','Required parameter clientId was null or undefined when calling getOAuthToken.');
            }
            // verify required parameter 'refreshToken' is not null or undefined
            if (refreshToken === null || refreshToken === undefined) {
                throw new RequiredError('refreshToken','Required parameter refreshToken was null or undefined when calling getOAuthToken.');
            }
            // verify required parameter 'clientAssertionType' is not null or undefined
            if (clientAssertionType === null || clientAssertionType === undefined) {
                throw new RequiredError('clientAssertionType','Required parameter clientAssertionType was null or undefined when calling getOAuthToken.');
            }
            // verify required parameter 'clientAssertion' is not null or undefined
            if (clientAssertion === null || clientAssertion === undefined) {
                throw new RequiredError('clientAssertion','Required parameter clientAssertion was null or undefined when calling getOAuthToken.');
            }
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling getOAuthToken.');
            }
            // verify required parameter 'xV' is not null or undefined
            if (xV === null || xV === undefined) {
                throw new RequiredError('xV','Required parameter xV was null or undefined when calling getOAuthToken.');
            }
            // verify required parameter 'xFapiAuthDate' is not null or undefined
            if (xFapiAuthDate === null || xFapiAuthDate === undefined) {
                throw new RequiredError('xFapiAuthDate','Required parameter xFapiAuthDate was null or undefined when calling getOAuthToken.');
            }
            // verify required parameter 'xFapiCustomerIpAddress' is not null or undefined
            if (xFapiCustomerIpAddress === null || xFapiCustomerIpAddress === undefined) {
                throw new RequiredError('xFapiCustomerIpAddress','Required parameter xFapiCustomerIpAddress was null or undefined when calling getOAuthToken.');
            }
            // verify required parameter 'xClientHeaders' is not null or undefined
            if (xClientHeaders === null || xClientHeaders === undefined) {
                throw new RequiredError('xClientHeaders','Required parameter xClientHeaders was null or undefined when calling getOAuthToken.');
            }
            // verify required parameter 'xClientUserAgent' is not null or undefined
            if (xClientUserAgent === null || xClientUserAgent === undefined) {
                throw new RequiredError('xClientUserAgent','Required parameter xClientUserAgent was null or undefined when calling getOAuthToken.');
            }
            // verify required parameter 'xIdempotencyKey' is not null or undefined
            if (xIdempotencyKey === null || xIdempotencyKey === undefined) {
                throw new RequiredError('xIdempotencyKey','Required parameter xIdempotencyKey was null or undefined when calling getOAuthToken.');
            }
            // verify required parameter 'xFapiCustomerLastLoggedTime' is not null or undefined
            if (xFapiCustomerLastLoggedTime === null || xFapiCustomerLastLoggedTime === undefined) {
                throw new RequiredError('xFapiCustomerLastLoggedTime','Required parameter xFapiCustomerLastLoggedTime was null or undefined when calling getOAuthToken.');
            }
            const localVarPath = `/oauth/token`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication SignedJWT required

            if (participantId !== undefined && participantId !== null) {
                localVarHeaderParameter['participant-id'] = String(participantId);
            }

            if (xV !== undefined && xV !== null) {
                localVarHeaderParameter['x-v'] = String(xV);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xFapiAuthDate !== undefined && xFapiAuthDate !== null) {
                localVarHeaderParameter['x-fapi-auth-date'] = String(xFapiAuthDate);
            }

            if (xFapiCustomerIpAddress !== undefined && xFapiCustomerIpAddress !== null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xClientHeaders !== undefined && xClientHeaders !== null) {
                localVarHeaderParameter['x-client-headers'] = String(xClientHeaders);
            }

            if (xClientUserAgent !== undefined && xClientUserAgent !== null) {
                localVarHeaderParameter['x-client-user-agent'] = String(xClientUserAgent);
            }

            if (xIdempotencyKey !== undefined && xIdempotencyKey !== null) {
                localVarHeaderParameter['x-idempotency-key'] = String(xIdempotencyKey);
            }

            if (xFapiCustomerLastLoggedTime !== undefined && xFapiCustomerLastLoggedTime !== null) {
                localVarHeaderParameter['x-fapi-customer-last-logged-time'] = String(xFapiCustomerLastLoggedTime);
            }

            if (grantType !== undefined) {
                localVarFormParams.set('grant_type', grantType as any);
            }

            if (code !== undefined) {
                localVarFormParams.set('code', code as any);
            }

            if (redirectUri !== undefined) {
                localVarFormParams.set('redirect_uri', redirectUri as any);
            }

            if (clientId !== undefined) {
                localVarFormParams.set('client_id', clientId as any);
            }

            if (refreshToken !== undefined) {
                localVarFormParams.set('refresh_token', refreshToken as any);
            }

            if (clientAssertionType !== undefined) {
                localVarFormParams.set('client_assertion_type', clientAssertionType as any);
            }

            if (clientAssertion !== undefined) {
                localVarFormParams.set('client_assertion', clientAssertion as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * OpenID Connect UserInfo Endpoint that returns information about the authenticated user. 
         * @summary Optional OpenID Connect UserInfo Endpoint
         * @param {string} authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;token&gt;&#x27;
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo(authorization: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getUserInfo.');
            }
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling getUserInfo.');
            }
            // verify required parameter 'xV' is not null or undefined
            if (xV === null || xV === undefined) {
                throw new RequiredError('xV','Required parameter xV was null or undefined when calling getUserInfo.');
            }
            // verify required parameter 'xFapiAuthDate' is not null or undefined
            if (xFapiAuthDate === null || xFapiAuthDate === undefined) {
                throw new RequiredError('xFapiAuthDate','Required parameter xFapiAuthDate was null or undefined when calling getUserInfo.');
            }
            // verify required parameter 'xFapiCustomerIpAddress' is not null or undefined
            if (xFapiCustomerIpAddress === null || xFapiCustomerIpAddress === undefined) {
                throw new RequiredError('xFapiCustomerIpAddress','Required parameter xFapiCustomerIpAddress was null or undefined when calling getUserInfo.');
            }
            // verify required parameter 'xClientHeaders' is not null or undefined
            if (xClientHeaders === null || xClientHeaders === undefined) {
                throw new RequiredError('xClientHeaders','Required parameter xClientHeaders was null or undefined when calling getUserInfo.');
            }
            // verify required parameter 'xClientUserAgent' is not null or undefined
            if (xClientUserAgent === null || xClientUserAgent === undefined) {
                throw new RequiredError('xClientUserAgent','Required parameter xClientUserAgent was null or undefined when calling getUserInfo.');
            }
            // verify required parameter 'xIdempotencyKey' is not null or undefined
            if (xIdempotencyKey === null || xIdempotencyKey === undefined) {
                throw new RequiredError('xIdempotencyKey','Required parameter xIdempotencyKey was null or undefined when calling getUserInfo.');
            }
            // verify required parameter 'xFapiCustomerLastLoggedTime' is not null or undefined
            if (xFapiCustomerLastLoggedTime === null || xFapiCustomerLastLoggedTime === undefined) {
                throw new RequiredError('xFapiCustomerLastLoggedTime','Required parameter xFapiCustomerLastLoggedTime was null or undefined when calling getUserInfo.');
            }
            const localVarPath = `/oauth/userinfo`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("OAuth2", ["read", "write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (participantId !== undefined && participantId !== null) {
                localVarHeaderParameter['participant-id'] = String(participantId);
            }

            if (xV !== undefined && xV !== null) {
                localVarHeaderParameter['x-v'] = String(xV);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xFapiAuthDate !== undefined && xFapiAuthDate !== null) {
                localVarHeaderParameter['x-fapi-auth-date'] = String(xFapiAuthDate);
            }

            if (xFapiCustomerIpAddress !== undefined && xFapiCustomerIpAddress !== null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xClientHeaders !== undefined && xClientHeaders !== null) {
                localVarHeaderParameter['x-client-headers'] = String(xClientHeaders);
            }

            if (xClientUserAgent !== undefined && xClientUserAgent !== null) {
                localVarHeaderParameter['x-client-user-agent'] = String(xClientUserAgent);
            }

            if (xIdempotencyKey !== undefined && xIdempotencyKey !== null) {
                localVarHeaderParameter['x-idempotency-key'] = String(xIdempotencyKey);
            }

            if (xFapiCustomerLastLoggedTime !== undefined && xFapiCustomerLastLoggedTime !== null) {
                localVarHeaderParameter['x-fapi-customer-last-logged-time'] = String(xFapiCustomerLastLoggedTime);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint for validating and retrieving metadata about an access token. Returns information about whether the token is active, its associated client, user, scopes, and expiration details. This endpoint allows resource servers to verify tokens before granting access to protected resources. 
         * @summary Optional token introspection
         * @param {string} token 
         * @param {string} authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;token&gt;&#x27;
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        introspectToken(token: string, authorization: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling introspectToken.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling introspectToken.');
            }
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling introspectToken.');
            }
            // verify required parameter 'xV' is not null or undefined
            if (xV === null || xV === undefined) {
                throw new RequiredError('xV','Required parameter xV was null or undefined when calling introspectToken.');
            }
            // verify required parameter 'xFapiAuthDate' is not null or undefined
            if (xFapiAuthDate === null || xFapiAuthDate === undefined) {
                throw new RequiredError('xFapiAuthDate','Required parameter xFapiAuthDate was null or undefined when calling introspectToken.');
            }
            // verify required parameter 'xFapiCustomerIpAddress' is not null or undefined
            if (xFapiCustomerIpAddress === null || xFapiCustomerIpAddress === undefined) {
                throw new RequiredError('xFapiCustomerIpAddress','Required parameter xFapiCustomerIpAddress was null or undefined when calling introspectToken.');
            }
            // verify required parameter 'xClientHeaders' is not null or undefined
            if (xClientHeaders === null || xClientHeaders === undefined) {
                throw new RequiredError('xClientHeaders','Required parameter xClientHeaders was null or undefined when calling introspectToken.');
            }
            // verify required parameter 'xClientUserAgent' is not null or undefined
            if (xClientUserAgent === null || xClientUserAgent === undefined) {
                throw new RequiredError('xClientUserAgent','Required parameter xClientUserAgent was null or undefined when calling introspectToken.');
            }
            // verify required parameter 'xIdempotencyKey' is not null or undefined
            if (xIdempotencyKey === null || xIdempotencyKey === undefined) {
                throw new RequiredError('xIdempotencyKey','Required parameter xIdempotencyKey was null or undefined when calling introspectToken.');
            }
            // verify required parameter 'xFapiCustomerLastLoggedTime' is not null or undefined
            if (xFapiCustomerLastLoggedTime === null || xFapiCustomerLastLoggedTime === undefined) {
                throw new RequiredError('xFapiCustomerLastLoggedTime','Required parameter xFapiCustomerLastLoggedTime was null or undefined when calling introspectToken.');
            }
            const localVarPath = `/oauth/introspect`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SignedJWT required

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (participantId !== undefined && participantId !== null) {
                localVarHeaderParameter['participant-id'] = String(participantId);
            }

            if (xV !== undefined && xV !== null) {
                localVarHeaderParameter['x-v'] = String(xV);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xFapiAuthDate !== undefined && xFapiAuthDate !== null) {
                localVarHeaderParameter['x-fapi-auth-date'] = String(xFapiAuthDate);
            }

            if (xFapiCustomerIpAddress !== undefined && xFapiCustomerIpAddress !== null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xClientHeaders !== undefined && xClientHeaders !== null) {
                localVarHeaderParameter['x-client-headers'] = String(xClientHeaders);
            }

            if (xClientUserAgent !== undefined && xClientUserAgent !== null) {
                localVarHeaderParameter['x-client-user-agent'] = String(xClientUserAgent);
            }

            if (xIdempotencyKey !== undefined && xIdempotencyKey !== null) {
                localVarHeaderParameter['x-idempotency-key'] = String(xIdempotencyKey);
            }

            if (xFapiCustomerLastLoggedTime !== undefined && xFapiCustomerLastLoggedTime !== null) {
                localVarHeaderParameter['x-fapi-customer-last-logged-time'] = String(xFapiCustomerLastLoggedTime);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * POST version of the authorization API that initiates the authorization flow
         * @summary [PHASE 1] PAR-based Authorization API for FI-initiated onboarding
         * @param {OauthAuthBody} body 
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oAuthPAR(body: OauthAuthBody, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oAuthPAR.');
            }
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling oAuthPAR.');
            }
            // verify required parameter 'xV' is not null or undefined
            if (xV === null || xV === undefined) {
                throw new RequiredError('xV','Required parameter xV was null or undefined when calling oAuthPAR.');
            }
            // verify required parameter 'xFapiAuthDate' is not null or undefined
            if (xFapiAuthDate === null || xFapiAuthDate === undefined) {
                throw new RequiredError('xFapiAuthDate','Required parameter xFapiAuthDate was null or undefined when calling oAuthPAR.');
            }
            // verify required parameter 'xFapiCustomerIpAddress' is not null or undefined
            if (xFapiCustomerIpAddress === null || xFapiCustomerIpAddress === undefined) {
                throw new RequiredError('xFapiCustomerIpAddress','Required parameter xFapiCustomerIpAddress was null or undefined when calling oAuthPAR.');
            }
            // verify required parameter 'xClientHeaders' is not null or undefined
            if (xClientHeaders === null || xClientHeaders === undefined) {
                throw new RequiredError('xClientHeaders','Required parameter xClientHeaders was null or undefined when calling oAuthPAR.');
            }
            // verify required parameter 'xClientUserAgent' is not null or undefined
            if (xClientUserAgent === null || xClientUserAgent === undefined) {
                throw new RequiredError('xClientUserAgent','Required parameter xClientUserAgent was null or undefined when calling oAuthPAR.');
            }
            // verify required parameter 'xIdempotencyKey' is not null or undefined
            if (xIdempotencyKey === null || xIdempotencyKey === undefined) {
                throw new RequiredError('xIdempotencyKey','Required parameter xIdempotencyKey was null or undefined when calling oAuthPAR.');
            }
            // verify required parameter 'xFapiCustomerLastLoggedTime' is not null or undefined
            if (xFapiCustomerLastLoggedTime === null || xFapiCustomerLastLoggedTime === undefined) {
                throw new RequiredError('xFapiCustomerLastLoggedTime','Required parameter xFapiCustomerLastLoggedTime was null or undefined when calling oAuthPAR.');
            }
            const localVarPath = `/oauth/auth`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SignedJWT required

            if (participantId !== undefined && participantId !== null) {
                localVarHeaderParameter['participant-id'] = String(participantId);
            }

            if (xV !== undefined && xV !== null) {
                localVarHeaderParameter['x-v'] = String(xV);
            }

            if (xFapiInteractionId !== undefined && xFapiInteractionId !== null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xFapiAuthDate !== undefined && xFapiAuthDate !== null) {
                localVarHeaderParameter['x-fapi-auth-date'] = String(xFapiAuthDate);
            }

            if (xFapiCustomerIpAddress !== undefined && xFapiCustomerIpAddress !== null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xClientHeaders !== undefined && xClientHeaders !== null) {
                localVarHeaderParameter['x-client-headers'] = String(xClientHeaders);
            }

            if (xClientUserAgent !== undefined && xClientUserAgent !== null) {
                localVarHeaderParameter['x-client-user-agent'] = String(xClientUserAgent);
            }

            if (xIdempotencyKey !== undefined && xIdempotencyKey !== null) {
                localVarHeaderParameter['x-idempotency-key'] = String(xIdempotencyKey);
            }

            if (xFapiCustomerLastLoggedTime !== undefined && xFapiCustomerLastLoggedTime !== null) {
                localVarHeaderParameter['x-fapi-customer-last-logged-time'] = String(xFapiCustomerLastLoggedTime);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"OauthAuthBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OAuthApi - functional programming interface
 * @export
 */
export const OAuthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * OpenID Connect authorization endpoint that initiates the authorization flow
         * @summary [PHASE 1] Authorization endpoint for Admin-initiated onboarding
         * @param {string} clientId Client identifier issued to the client during registration
         * @param {string} responseType Must be set to \&quot;code\&quot; for authorization code flow
         * @param {Array<string>} scope Space-separated list of requested scope values, OFxPERA requires openid to be included to maintain compatibility with OIDC.
         * @param {string} redirectUri URI to return the user to after authorization is complete
         * @param {string} state Opaque value to maintain state between request and callback
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [codeChallenge] Code challenge for PKCE
         * @param {string} [codeChallengeMethod] Code challenge method for PKCE
         * @param {string} [prompt] Prompt for the authorization request
         * @param {string} [nonce] Random value used to prevent replay attacks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeOAuth(clientId: string, responseType: string, scope: Array<string>, redirectUri: string, state: string, xIdempotencyKey: string, xFapiAuthDate: Date, xFapiCustomerLastLoggedTime: Date, codeChallenge?: string, codeChallengeMethod?: string, prompt?: string, nonce?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = OAuthApiFetchParamCreator(configuration).authorizeOAuth(clientId, responseType, scope, redirectUri, state, xIdempotencyKey, xFapiAuthDate, xFapiCustomerLastLoggedTime, codeChallenge, codeChallengeMethod, prompt, nonce, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * OAuth 2.0 token endpoint for obtaining access tokens
         * @summary [PHASE 1] Token endpoint
         * @param {string} grantType 
         * @param {string} code 
         * @param {string} redirectUri 
         * @param {string} clientId 
         * @param {string} refreshToken 
         * @param {string} clientAssertionType 
         * @param {string} clientAssertion 
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOAuthToken(grantType: string, code: string, redirectUri: string, clientId: string, refreshToken: string, clientAssertionType: string, clientAssertion: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TokenResponse> {
            const localVarFetchArgs = OAuthApiFetchParamCreator(configuration).getOAuthToken(grantType, code, redirectUri, clientId, refreshToken, clientAssertionType, clientAssertion, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * OpenID Connect UserInfo Endpoint that returns information about the authenticated user. 
         * @summary Optional OpenID Connect UserInfo Endpoint
         * @param {string} authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;token&gt;&#x27;
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo(authorization: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2001> {
            const localVarFetchArgs = OAuthApiFetchParamCreator(configuration).getUserInfo(authorization, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Endpoint for validating and retrieving metadata about an access token. Returns information about whether the token is active, its associated client, user, scopes, and expiration details. This endpoint allows resource servers to verify tokens before granting access to protected resources. 
         * @summary Optional token introspection
         * @param {string} token 
         * @param {string} authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;token&gt;&#x27;
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        introspectToken(token: string, authorization: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse200> {
            const localVarFetchArgs = OAuthApiFetchParamCreator(configuration).introspectToken(token, authorization, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * POST version of the authorization API that initiates the authorization flow
         * @summary [PHASE 1] PAR-based Authorization API for FI-initiated onboarding
         * @param {OauthAuthBody} body 
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oAuthPAR(body: OauthAuthBody, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = OAuthApiFetchParamCreator(configuration).oAuthPAR(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * OAuthApi - factory interface
 * @export
 */
export const OAuthApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * OpenID Connect authorization endpoint that initiates the authorization flow
         * @summary [PHASE 1] Authorization endpoint for Admin-initiated onboarding
         * @param {string} clientId Client identifier issued to the client during registration
         * @param {string} responseType Must be set to \&quot;code\&quot; for authorization code flow
         * @param {Array<string>} scope Space-separated list of requested scope values, OFxPERA requires openid to be included to maintain compatibility with OIDC.
         * @param {string} redirectUri URI to return the user to after authorization is complete
         * @param {string} state Opaque value to maintain state between request and callback
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [codeChallenge] Code challenge for PKCE
         * @param {string} [codeChallengeMethod] Code challenge method for PKCE
         * @param {string} [prompt] Prompt for the authorization request
         * @param {string} [nonce] Random value used to prevent replay attacks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeOAuth(clientId: string, responseType: string, scope: Array<string>, redirectUri: string, state: string, xIdempotencyKey: string, xFapiAuthDate: Date, xFapiCustomerLastLoggedTime: Date, codeChallenge?: string, codeChallengeMethod?: string, prompt?: string, nonce?: string, options?: any) {
            return OAuthApiFp(configuration).authorizeOAuth(clientId, responseType, scope, redirectUri, state, xIdempotencyKey, xFapiAuthDate, xFapiCustomerLastLoggedTime, codeChallenge, codeChallengeMethod, prompt, nonce, options)(fetch, basePath);
        },
        /**
         * OAuth 2.0 token endpoint for obtaining access tokens
         * @summary [PHASE 1] Token endpoint
         * @param {string} grantType 
         * @param {string} code 
         * @param {string} redirectUri 
         * @param {string} clientId 
         * @param {string} refreshToken 
         * @param {string} clientAssertionType 
         * @param {string} clientAssertion 
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOAuthToken(grantType: string, code: string, redirectUri: string, clientId: string, refreshToken: string, clientAssertionType: string, clientAssertion: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
            return OAuthApiFp(configuration).getOAuthToken(grantType, code, redirectUri, clientId, refreshToken, clientAssertionType, clientAssertion, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(fetch, basePath);
        },
        /**
         * OpenID Connect UserInfo Endpoint that returns information about the authenticated user. 
         * @summary Optional OpenID Connect UserInfo Endpoint
         * @param {string} authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;token&gt;&#x27;
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo(authorization: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
            return OAuthApiFp(configuration).getUserInfo(authorization, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(fetch, basePath);
        },
        /**
         * Endpoint for validating and retrieving metadata about an access token. Returns information about whether the token is active, its associated client, user, scopes, and expiration details. This endpoint allows resource servers to verify tokens before granting access to protected resources. 
         * @summary Optional token introspection
         * @param {string} token 
         * @param {string} authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;token&gt;&#x27;
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        introspectToken(token: string, authorization: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
            return OAuthApiFp(configuration).introspectToken(token, authorization, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(fetch, basePath);
        },
        /**
         * POST version of the authorization API that initiates the authorization flow
         * @summary [PHASE 1] PAR-based Authorization API for FI-initiated onboarding
         * @param {OauthAuthBody} body 
         * @param {string} participantId Field referencing the unique identifier of the requesting participant.
         * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
         * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
         * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
         * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
         * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
         * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
         * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oAuthPAR(body: OauthAuthBody, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
            return OAuthApiFp(configuration).oAuthPAR(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(fetch, basePath);
        },
    };
};

/**
 * OAuthApi - object-oriented interface
 * @export
 * @class OAuthApi
 * @extends {BaseAPI}
 */
export class OAuthApi extends BaseAPI {
    /**
     * OpenID Connect authorization endpoint that initiates the authorization flow
     * @summary [PHASE 1] Authorization endpoint for Admin-initiated onboarding
     * @param {string} clientId Client identifier issued to the client during registration
     * @param {string} responseType Must be set to \&quot;code\&quot; for authorization code flow
     * @param {Array<string>} scope Space-separated list of requested scope values, OFxPERA requires openid to be included to maintain compatibility with OIDC.
     * @param {string} redirectUri URI to return the user to after authorization is complete
     * @param {string} state Opaque value to maintain state between request and callback
     * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
     * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
     * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
     * @param {string} [codeChallenge] Code challenge for PKCE
     * @param {string} [codeChallengeMethod] Code challenge method for PKCE
     * @param {string} [prompt] Prompt for the authorization request
     * @param {string} [nonce] Random value used to prevent replay attacks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApi
     */
    public authorizeOAuth(clientId: string, responseType: string, scope: Array<string>, redirectUri: string, state: string, xIdempotencyKey: string, xFapiAuthDate: Date, xFapiCustomerLastLoggedTime: Date, codeChallenge?: string, codeChallengeMethod?: string, prompt?: string, nonce?: string, options?: any) {
        return OAuthApiFp(this.configuration).authorizeOAuth(clientId, responseType, scope, redirectUri, state, xIdempotencyKey, xFapiAuthDate, xFapiCustomerLastLoggedTime, codeChallenge, codeChallengeMethod, prompt, nonce, options)(this.fetch, this.basePath);
    }

    /**
     * OAuth 2.0 token endpoint for obtaining access tokens
     * @summary [PHASE 1] Token endpoint
     * @param {string} grantType 
     * @param {string} code 
     * @param {string} redirectUri 
     * @param {string} clientId 
     * @param {string} refreshToken 
     * @param {string} clientAssertionType 
     * @param {string} clientAssertion 
     * @param {string} participantId Field referencing the unique identifier of the requesting participant.
     * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
     * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
     * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
     * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
     * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
     * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApi
     */
    public getOAuthToken(grantType: string, code: string, redirectUri: string, clientId: string, refreshToken: string, clientAssertionType: string, clientAssertion: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
        return OAuthApiFp(this.configuration).getOAuthToken(grantType, code, redirectUri, clientId, refreshToken, clientAssertionType, clientAssertion, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(this.fetch, this.basePath);
    }

    /**
     * OpenID Connect UserInfo Endpoint that returns information about the authenticated user. 
     * @summary Optional OpenID Connect UserInfo Endpoint
     * @param {string} authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;token&gt;&#x27;
     * @param {string} participantId Field referencing the unique identifier of the requesting participant.
     * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
     * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
     * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
     * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
     * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
     * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApi
     */
    public getUserInfo(authorization: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
        return OAuthApiFp(this.configuration).getUserInfo(authorization, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(this.fetch, this.basePath);
    }

    /**
     * Endpoint for validating and retrieving metadata about an access token. Returns information about whether the token is active, its associated client, user, scopes, and expiration details. This endpoint allows resource servers to verify tokens before granting access to protected resources. 
     * @summary Optional token introspection
     * @param {string} token 
     * @param {string} authorization Bearer token for authentication. Must be in the format &#x27;Bearer &lt;token&gt;&#x27;
     * @param {string} participantId Field referencing the unique identifier of the requesting participant.
     * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
     * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
     * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
     * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
     * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
     * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApi
     */
    public introspectToken(token: string, authorization: string, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
        return OAuthApiFp(this.configuration).introspectToken(token, authorization, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(this.fetch, this.basePath);
    }

    /**
     * POST version of the authorization API that initiates the authorization flow
     * @summary [PHASE 1] PAR-based Authorization API for FI-initiated onboarding
     * @param {OauthAuthBody} body 
     * @param {string} participantId Field referencing the unique identifier of the requesting participant.
     * @param {number} xV Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
     * @param {Date} xFapiAuthDate The time when the customer last logged in to the Data Recipient Software Product as described in [FAPI-1.0-Baseline]. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
     * @param {string} xFapiCustomerIpAddress The customer&#x27;s original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.
     * @param {string} xClientHeaders The customer&#x27;s original standard http headers Base64 encoded, including the original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xClientUserAgent The customer&#x27;s original User-Agent header Base64 encoded, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
     * @param {string} xIdempotencyKey Unique idempotency key for the request as per FAPI Advanced requirements
     * @param {Date} xFapiCustomerLastLoggedTime The time when the PSU last logged in to the client software as per FAPI Advanced requirements
     * @param {string} [xFapiInteractionId] An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApi
     */
    public oAuthPAR(body: OauthAuthBody, participantId: string, xV: number, xFapiAuthDate: Date, xFapiCustomerIpAddress: string, xClientHeaders: string, xClientUserAgent: string, xIdempotencyKey: string, xFapiCustomerLastLoggedTime: Date, xFapiInteractionId?: string, options?: any) {
        return OAuthApiFp(this.configuration).oAuthPAR(body, participantId, xV, xFapiAuthDate, xFapiCustomerIpAddress, xClientHeaders, xClientUserAgent, xIdempotencyKey, xFapiCustomerLastLoggedTime, xFapiInteractionId, options)(this.fetch, this.basePath);
    }

}
