openapi: 3.0.3
info:
  title: OFxPERA API
  description: Philippines Open Finance API Implementation for PERA
  version: 1.0.1
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  x-copyright: Copyright 2024 OFxPERA Contributors
  x-terms-of-service: |
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/maya-ph/OFxPERA-API/1.0.0
  - url: https://api.ofxpera.ph/v1
    description: OFxPERA API server

tags:
  - name: Bootstrap
    description: Core bootstrapping endpoints for OFxPERA Participant registration and management
  - name: OAuth
    description: OpenID Connect authentication, authorization and consent management
  - name: Common
    description: Common APIs used across different use cases
  - name: PERA
    description: APIs specific to PERA operations (Philippine Equity and Retirement Account)
  #- name: Consent
  #  description: Consent management endpoints
  - name: Discovery
    description: Optional discovery endpoints for OpenID/OAuth configuration and key management

paths:
  /ofxpera/arrangements:
    post:
      operationId: peraArrangementRegistration
      tags:
        - PERA
      summary: "[PHASE 1] Registers the result of a PERA account opening"
      description: API that allows PERA Admins to register the result of an FI-initiated PERA account opening
      security:
        - SignedJWT: []
      parameters:
        - $ref: '#/components/parameters/ApiVersion'
        - $ref: '#/components/parameters/FapiInteractionId'
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/jwt:
            schema:
              $ref: "#/components/schemas/PeraArrangement"
      responses:
        "201":
          description: Successfully registered the status of a PERA onboarding process.
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    type: string
                    description: The unique identifier of the PERA arrangement that was registered.
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"

  #/ofxpera/arrangements/{arrangement_id}:
  #  get:
  #    operationId: getArrangementStatus
  #    tags:
  #      - PERA
  #    summary: "[PHASE 2] Get the status of a PERA arrangement"
  #    description: API that allows FIs to retrieve the status of one or more PERA Arrangements
  #    security:
  #      - SignedJWT: []
  #    parameters:
  #      - name: arrangement_id
  #        in: path
  #        required: true
  #        description: The ID of the PERA Arrangement
  #        schema:
  #          type: string
  #      - $ref: '#/components/parameters/ApiVersion'
  #      - $ref: '#/components/parameters/FapiInteractionId'
  #    responses:
  #      "200":
  #        description: Successfully retrieved the status of the PERA Arrangement
  #        content:
  #          application/json:
  #            schema:
  #              $ref: "#/components/schemas/PeraArrangement"
  #      "400":
  #        $ref: "#/components/responses/BadRequest"
  #      "401":
  #        $ref: "#/components/responses/Unauthorized"
  #      "403":
  #        $ref: "#/components/responses/Forbidden"
  #      "404":
  #        $ref: "#/components/responses/NotFound"
  #      "429":
  #        $ref: "#/components/responses/TooManyRequests"
  #      "500":
  #        $ref: "#/components/responses/InternalServerError"
  
     
  /ofxpera/participants:
    #post:
    #  operationId: registerParticipant
    #  tags:
    #    - Bootstrap
    #  summary: "[PHASE 2] Register an OFxPERA Participant"
    #  description: API for registering an OFxPERA Participant following FAPI Dynamic Client Registration requirements
    #  parameters:
    #    - $ref: '#/components/parameters/ApiVersion'
    #    - $ref: '#/components/parameters/FapiInteractionId'
    #    - $ref: '#/components/parameters/IdempotencyKey'
    #  requestBody:
    #    required: true
    #    content:
    #      application/json:
    #        schema:
    #          $ref: "#/components/schemas/ParticipantConfig"
    #  responses:
    #    "201":
    #      description: Participant successfully registered
    #      content:
    #        application/json:
    #          schema:
    #            $ref: "#/components/schemas/ClientRegistrationResponse"
    #    "400":
    #      $ref: "#/components/responses/BadRequest"
    #    "401":
    #      $ref: "#/components/responses/Unauthorized"
    #    "403":
    #      $ref: "#/components/responses/Forbidden"
    #    "404":
    #      $ref: "#/components/responses/NotFound"
    #    "429":
    #      $ref: "#/components/responses/TooManyRequests"
    #    "500":
    #      $ref: "#/components/responses/InternalServerError"

    #put:
    #  operationId: updateParticipant
    #  tags:
    #    - Bootstrap
    #  summary: "[PHASE 2] Update an OFxPERA Participant"
    #  description: API for updating the URIs and status of an OFxPERA Participant
    #  parameters:
    #    - $ref: '#/components/parameters/ApiVersion'
    #    - $ref: '#/components/parameters/FapiInteractionId'
    #    - $ref: '#/components/parameters/IdempotencyKey'
    #  requestBody:
    #    required: true
    #    content:
    #      application/json:
    #        schema:
    #          $ref: "#/components/schemas/ParticipantConfig"
    #  responses:
    #    "201":
    #      description: Participant successfully updated
    #      content:
    #        application/json:
    #          schema:
    #            $ref: "#/components/schemas/ClientRegistrationResponse"
    #    "400":
    #      $ref: "#/components/responses/BadRequest"
    #    "401":
    #      $ref: "#/components/responses/Unauthorized"
    #    "403":
    #      $ref: "#/components/responses/Forbidden"
    #    "404":
    #      $ref: "#/components/responses/NotFound"
    #    "429":
    #      $ref: "#/components/responses/TooManyRequests"
    #    "500":
    #      $ref: "#/components/responses/InternalServerError"
    
    get:
      operationId: listParticipants
      tags:
        - Bootstrap
      summary: "[PHASE 1] Get a list of registered OFxPERA Participants"
      description: API for retrieving all registered OFxPERA Participants
      security:
        - OAuth2: []
      parameters:
        - $ref: '#/components/parameters/ApiVersion'
        - $ref: '#/components/parameters/FapiInteractionId'
        
      responses:
        "200":
          description: Successfully retrieved OFxPERA Participants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ParticipantConfig"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"

  #/ofxpera/participants/{participant_id}:
  #  get:
  #    operationId: getParticipant
  #    tags:
  #      - Bootstrap
  #    summary: "[PHASE 2] Get an OFxPERA Participant's registration information"
  #    description: API for retrieving registration information for a specific OFxPERA Participant
  #    parameters:
  #      - name: participant_id
  #        in: path
  #        required: true
  #        description: Participant identifier issued during participant registration
  #        schema:
  #          type: string
  #      - $ref: '#/components/parameters/ApiVersion'
  #      - $ref: '#/components/parameters/FapiInteractionId'
  #    responses:
  #      "200":
  #        description: Successfully retrieved participant information
  #        content:
  #          application/json:
  #            schema:
  #              $ref: "#/components/schemas/ParticipantConfig"
  #      "400":
  #        $ref: "#/components/responses/BadRequest"
  #      "401":
  #        $ref: "#/components/responses/Unauthorized"
  #      "403":
  #        $ref: "#/components/responses/Forbidden"
  #      "404":
  #        $ref: "#/components/responses/NotFound"
  #      "429":
  #        $ref: "#/components/responses/TooManyRequests"
  #      "500":
  #        $ref: "#/components/responses/InternalServerError"
 
  #/ofxpera/products:
  # post:
  #    operationId: registerProduct
  #    tags:
  #      - Bootstrap
  #    summary: "[PHASE 2] Register a PERA Admin Product"
  #    description: API that allows PERA Admin to register a PERA product. 
  #    parameters:
  #      - $ref: '#/components/parameters/ApiVersion'
  #      - $ref: '#/components/parameters/FapiInteractionId'
  #      - $ref: '#/components/parameters/IdempotencyKey'
  #    responses:
  #      "200":
  #        description: Product successfully registered
  #        content:
  #          application/json:
  #            schema:
  #              $ref: "#/components/schemas/PeraProduct"
  #      "400":
  #        $ref: "#/components/responses/BadRequest"
  #      "401":
  #        $ref: "#/components/responses/Unauthorized"
  #      "403":
  #        $ref: "#/components/responses/Forbidden"
  #      "404":
  #        $ref: "#/components/responses/NotFound"
  #      "429":
  #        $ref: "#/components/responses/TooManyRequests"
  #      "500":
  #        $ref: "#/components/responses/InternalServerError"
  
  #/ofxpera/products/{product_id}:
  # put:
  #    operationId: updateProduct
  #    tags:
  #      - Bootstrap
  #    summary: "[PHASE 2] Update a PERA Admin Product"
  #    description: API that allows PERA Admin to update their product. 
  #    parameters:
  #      - name: product_id
  #        in: path
  #        required: true
  #        description: Product identifier issued during product registration
  #        schema:
  #          type: string
  #      - $ref: '#/components/parameters/ApiVersion'
  #      - $ref: '#/components/parameters/FapiInteractionId'
  #      - $ref: '#/components/parameters/IdempotencyKey'
  #    responses:
  #      "200":
  #        description: Product successfully updated
  #        content:
  #          application/json:
  #            schema:
  #              $ref: "#/components/schemas/PeraProduct"
  #      "400":
  #        $ref: "#/components/responses/BadRequest"
  #      "401":
  #        $ref: "#/components/responses/Unauthorized"
  #      "403":
  #        $ref: "#/components/responses/Forbidden"
  #      "404":
  #        $ref: "#/components/responses/NotFound"
  #      "429":
  #        $ref: "#/components/responses/TooManyRequests"
  #      "500":
  #        $ref: "#/components/responses/InternalServerError"

  /ofxpera/products/{participant_id}:
   get:
      operationId: listProductByParticipant
      tags:
        - Bootstrap
      summary: "[PHASE 1] Get a list of PERA products associated with PERA Admin"
      description: API for retrieving all registered products associated with the PERA Admin. 
      security:
        - OAuth2: []
      parameters:
        - name: participant_id
          in: path
          required: true
          description: Participant identifier issued during Participant registration
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersion'
        - $ref: '#/components/parameters/FapiInteractionId'
      responses:
        "200":
          description: Successfully retrieved the list of registered products associated with the PERA Admin.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PeraProduct"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /oauth/auth:
    post:
      operationId: OAuthPAR
      tags:
        - OAuth
      summary: "[PHASE 1] PAR-based Authorization API for FI-initiated onboarding"
      description: POST version of the authorization API that initiates the authorization flow
      parameters:
        - $ref: '#/components/parameters/ApiVersion'
        - $ref: '#/components/parameters/FapiInteractionId'
        - $ref: '#/components/parameters/FapiAuthDate'
        - $ref: '#/components/parameters/FapiCustomerIpAddress'
        - $ref: '#/components/parameters/CustomerUserAgent'
        - $ref: '#/components/parameters/IdempotencyKey'
        - $ref: '#/components/parameters/Digest'
        - $ref: '#/components/parameters/FapiCustomerLastLoggedTime'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - participant_id
                - response_type
                - client_id
                - redirect_uri
              properties:
                participant_id:
                  type: string
                  description: Participant identifier of the FI issued during registration
                authorization_code:
                  type: string
                  description: Authorization code
                response_type:
                  type: string
                  enum: [code, endorsement]
                  description: Must be set to "code" for authorization code flow
                scope:
                  type: array
                  items:
                    type: string
                    enum: [openid, profile, email, address, phone]
                  description: Space-separated list of requested scope values, OFxPERA requires openid to be included to maintain compatibility with OIDC.
                token_endpoint:
                  type: string
                  format: uri
                  description: URI of the token endpoint for retrieving access tokens
                code_challenge:
                  type: string
                  description: Code challenge for PKCE
                code_challenge_method:
                  type: string
                  enum: [S256]
                  description: Code challenge method for PKCE
                state:
                  type: string
                  description: Opaque value to maintain state between request and callback
                prompt:
                  type: string
                  description: Prompt for the authorization request
                nonce:
                  type: string
                  description: Random value used to prevent replay attacks
      responses:
        "302":
          description: Redirect to authorization page
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: URI to redirect the user to for authorization
        "400":
          description: OAuth error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthError"
        "401":
          description: Client authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthError"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"
    get:
      operationId: authorizeOAuth
      tags:
        - OAuth
      summary: "[PHASE 1] Authorization endpoint for Admin-initiated onboarding"
      description: OpenID Connect authorization endpoint that initiates the authorization flow
      parameters:
        - name: client_id
          in: query
          required: true
          description: Client identifier issued to the client during registration
          schema:
            type: string
        - name: response_type
          in: query
          required: true
          description: Must be set to "code" for authorization code flow
          schema:
            type: string
            enum: [code]
        - name: scope
          in: query
          required: true
          description: Space-separated list of requested scope values, OFxPERA requires openid to be included to maintain compatibility with OIDC.
          schema:
            type: array
            items:
              type: string
              enum: [openid, profile, email, address, phone]
        - name: redirect_uri
          in: query
          required: true
          description: URI to return the user to after authorization is complete
          schema:
            type: string
            format: uri
        - name: code_challenge
          in: query
          required: false
          description: Code challenge for PKCE
          schema:
            type: string
        - name: code_challenge_method
          in: query
          required: false
          description: Code challenge method for PKCE
          schema:
            type: string
            enum: [S256]
        - name: state
          in: query
          required: true
          description: Opaque value to maintain state between request and callback
          schema:
            type: string
        - name: prompt
          in: query
          required: false
          description: Prompt for the authorization request
          schema:
            type: string
        - name: nonce
          in: query
          required: false
          description: Random value used to prevent replay attacks
          schema:
            type: string
        - $ref: '#/components/parameters/ApiVersion'
        - $ref: '#/components/parameters/FapiAuthDate'
      responses:
        "302":
          description: Redirect to client with authorization code
          content:
            Location:
              schema:
                type: string
                format: uri
                description: URI to redirect the user to, including the authorization code as a query parameter and JARM response
              example: "https://client.example.org/cb?response=SplxlOBeZQQYbYS6WxSbIA&response=eyJhbGciOiJSUzI1NiIsImtpZCI6ImsyYmRjIn0.ew0KICJpc3MiOiAiczZCaGRSa3F0MyIsDQogImF1ZCI6ICJodHRwczovL2NsaWVudC5leGFtcGxlLm9yZyIsDQogImV4cCI6IDE1OTExMDUxODAsDQogIm5iZiI6IDE1OTExMDQ4ODAsDQogImlhdCI6IDE1OTExMDQ4ODAsDQogImp0aSI6ICJuLWp3dF9odE1qMm5vU3NnayIsDQogInJlc3BvbnNlX3R5cGUiOiAiY29kZSIsDQogImNvZGUiOiAiU3BseGxPQmVaUVFZYllTNld4U2JJQSIsDQogInN0YXRlIjogImVjb3VjaFpSZlRLUEY0NnYzakRMaTlsb3cySE03NlN1ejJZaTNwS1VudzQiDQp9.ER9HDBVZbR1Jtpoe_ow75mQhR6KkKhPz_0jE9ECY8nM4wCjbouMCOGnMkPHIZSWPu2zHja_WMpH30ILRxtJ8Ll8G_ocYYJzJYoAR-sEVmPfyR-NZLiWTDkgYoS7M3EvYMqmLIXlnXbHf-xNsGU_IG-r-1S51_9RDTjh8Y3JUvDQ"
          
        "400":
          description: OAuth error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthError"
        "401":
          description: Client authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthError"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /oauth/token:
    post:
      operationId: getOAuthToken
      tags:
        - OAuth
      summary: "[PHASE 1] Token endpoint"
      description: OAuth 2.0 token endpoint for obtaining access tokens
      parameters:
        - $ref: '#/components/parameters/ApiVersion'
        - $ref: '#/components/parameters/FapiInteractionId'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - grant_type
                - code
                - redirect_uri
                - client_id
                - client_assertion
                - client_assertion_type
              properties:
                grant_type:
                  type: string
                  enum: [authorization_code, refresh_token]
                code:
                  type: string
                  description: Authorization code received from the authorization server.
                redirect_uri:
                  type: string
                  format: uri
                  description: Redirect URI used in the authorization request.
                client_id:
                  type: string
                  description: Client identifier for the token request.
                refresh_token:
                  type: string
                  description: Refresh token used to obtain a new access token.
                client_assertion_type:
                  type: string
                  description: value must be "urn:ietf:params:oauth:assertion-type:jwt-bearer"
                client_assertion:
                  type: string
                  description: JWT assertion containing client credentials.
      responses:
        "200":
          description: Token successfully issued
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /oauth/introspect:
    get:
      operationId: introspectToken
      tags:
        - OAuth
      summary: '[OPTIONAL] token introspection'
      description: |
        Endpoint for validating and retrieving metadata about an access token. Returns information about whether the token is active, its associated client, user, scopes, and expiration details. This endpoint allows resource servers to verify tokens before granting access to protected resources.
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/ApiVersion'
        - $ref: '#/components/parameters/FapiInteractionId'
      responses:
        "200":
          description: Token information retrieved
          content:
            application/json:
              schema:
                type: object
                required:
                  - active
                properties:
                  active:
                    type: boolean
                    description: Indicates whether the token is currently active.
                  client_id:
                    type: string
                    description: Client identifier for the token.
                  username:
                    type: string
                    description: Username associated with the token.
                  scope:
                    type: string
                    description: Scope of the token.
                  exp:
                    type: integer
                    description: Expiration timestamp of the token in seconds since epoch.
                  iat:
                    type: integer
                    description: Issued at timestamp of the token in seconds since epoch.
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /oauth/userinfo:
    get:
      operationId: getUserInfo
      tags:
        - OAuth
      summary: '[OPTIONAL] OpenID Connect UserInfo Endpoint'
      description: |
        OpenID Connect UserInfo Endpoint that returns information about the authenticated user.
      security:
        - OAuth2: []
      parameters:
        - $ref: '#/components/parameters/ApiVersion'
        - $ref: '#/components/parameters/FapiInteractionId'
      responses:
        "200":
          description: User information retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  sub:
                    type: string
                    description: Unique identifier for the user from the authentication provider's perspective.
                  name:
                    type: string
                    description: Full name of the user.
                  given_name:
                    type: string
                    description: Given name of the user.
                  family_name:
                    type: string
                    description: Family name of the user.
                  email:
                    type: string
                    format: email
                    description: Email address of the user.
                  email_verified:
                    type: boolean
                    description: Indicates whether the user's email address has been verified.
                  phone_number:
                    type: string
                    description: Phone number of the user.
                  phone_number_verified:
                    type: boolean
                    description: Indicates whether the user's phone number has been verified.
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"

  #/common/customers/endorse:
  #  get:
  #    operationId: forwardCustomerEndorsement
  #    tags:
  #      - Common
  #    summary: "[DEPRECATED] Forward customer endorsement"
  #    security:
  #      - OAuth2: []
  #    parameters:
  #      - name: endorsement
  #        in: query
  #        description: Encrypted endorsement payload in JWS/JWE format
  #        required: true
  #        schema:
  #          type: string
  #      - $ref: '#/components/parameters/ApiVersion'
  #      - $ref: '#/components/parameters/FapiAuthDate'
  #      - $ref: '#/components/parameters/FapiCustomerIpAddress'
  #      - $ref: '#/components/parameters/FapiInteractionId'
  #      - $ref: '#/components/parameters/CustomerUserAgent'
  #      - $ref: '#/components/parameters/IdempotencyKey'
  #      - $ref: '#/components/parameters/Digest'
  #      - $ref: '#/components/parameters/FapiCustomerLastLoggedTime'
  #    responses:
  #      "200":
  #        description: Successfully forwarded customer endorsement
  #        content:
  #          application/json:
  #            schema:
  #              $ref: "#/components/schemas/EndorsementResponse"
  #      "400":
  #        $ref: "#/components/responses/BadRequest"
  #      "401":
  #        $ref: "#/components/responses/Unauthorized"
  #      "403":
  #        $ref: "#/components/responses/Forbidden"
  #      "404":
  #        $ref: "#/components/responses/NotFound"
  #      "429":
  #        $ref: "#/components/responses/TooManyRequests"
  #      "500":
  #        $ref: "#/components/responses/InternalServerError"

  /common/customers/{customer_id}/detail:
    get:
      operationId: getCustomerDetail
      tags:
        - Common
      summary: "[PHASE 1] Get detailed customer information"
      security:
        - OAuth2: []
      parameters:
        - name: customer_id
          in: path
          description: Customer ID, this should map to the sub field returned from the OIDC token endpoint or the sub field returned from the /oauth/userinfo endpoint
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/ApiVersion'
        - $ref: '#/components/parameters/FapiAuthDate'
        - $ref: '#/components/parameters/FapiCustomerIpAddress'
        - $ref: '#/components/parameters/FapiInteractionId'
        - $ref: '#/components/parameters/CustomerUserAgent'
        - $ref: '#/components/parameters/Digest'
      responses:
        "200":
          description: Customer's Personal Information retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerInformation"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"

  #/.well-known/openid-configuration:
  #  get:
  #    operationId: getOpenIdConfiguration
  #    tags:
  #      - Discovery
  #    summary: Optional - OpenID Connect Discovery
  #    description: Retrieve OpenID Connect configuration information
  #    responses:
  #      "200":
  #        description: OpenID Connect configuration retrieved
  #        content:
  #          application/json:
  #            schema:
  #              type: object
  #              required:
  #                - issuer
  #                - authorization_endpoint
  #                - token_endpoint
  #                - jwks_uri
  #                - registration_endpoint
  #              properties:
  #                issuer:
  #                  type: string
  #                  format: uri
  #                  description: Base URL that uniquely identifies the authorization server
  #                authorization_endpoint:
  #                  type: string
  #                  format: uri
  #                  description: Authorization endpoint URL for initiating the OAuth 2.0 flow
  #                token_endpoint:
  #                  type: string
  #                  format: uri
  #                  description: Token endpoint URL for obtaining access tokens
  #                userinfo_endpoint:
  #                  type: string
  #                  format: uri
  #                  description: UserInfo endpoint URL for retrieving authenticated user information
  #                jwks_uri:
  #                  type: string
  #                  format: uri
  #                  description: URL for retrieving the JSON Web Key Set used to validate JWTs
  #                registration_endpoint:
  #                  type: string
  #                  format: uri
  #                  description: Dynamic Client Registration endpoint URL
  #                scopes_supported:
  #                  type: array
  #                  items:
  #                    type: string
  #                response_types_supported:
  #                  type: array
  #                  items:
  #                    type: string
  #                grant_types_supported:
  #                  type: array
  #                  items:
  #                    type: string
  #                subject_types_supported:
  #                  type: array
  #                  items:
  #                    type: string
  #                id_token_signing_alg_values_supported:
  #                  type: array
  #                  items:
  #                    type: string
  #                token_endpoint_auth_methods_supported:
  #                  type: array
  #                  items:
  #                    type: string
  #                claims_supported:
  #                  type: array
  #                  items:
  #                    type: string
  #      "400":
  #        $ref: "#/components/responses/BadRequest"
  #      "401":
  #        $ref: "#/components/responses/Unauthorized"
  #      "403":
  #        $ref: "#/components/responses/Forbidden"
  #      "404":
  #        $ref: "#/components/responses/NotFound"
  #      "429":
  #        $ref: "#/components/responses/TooManyRequests"
  #      "500":
  #        $ref: "#/components/responses/InternalServerError"

  #/.well-known/openid-registration:
  #  post:
  #    operationId: registerClient
  #    tags:
  #      - Discovery
  #    summary: "[PHASE 2] Dynamic Client Registration (configurable endpoint)"
  #    description: Register a new OFxPERA Participant as an OAuth client following FAPI Dynamic Client Registration requirements.
  #    parameters:
  #      - $ref: '#/components/parameters/IdempotencyKey'
  #    requestBody:
  #      required: true
  #      content:
  #        application/json:
  #          schema:
  #            $ref: "#/components/schemas/ClientRegistration"
  #    responses:
  #      "201":
  #        description: Client registration successful
  #        headers:
  #          Registration-Access-Token:
  #            schema:
  #              type: string
  #            description: Token for managing the registration
  #        content:
  #          application/json:
  #            schema:
  #              $ref: "#/components/schemas/ClientRegistrationResponse"
  #      "400":
  #        $ref: "#/components/responses/BadRequest"
  #      "401":
  #        $ref: "#/components/responses/Unauthorized"
  #      "403":
  #        $ref: "#/components/responses/Forbidden"
  #      "404":
  #        $ref: "#/components/responses/NotFound"
  #      "429":
  #        $ref: "#/components/responses/TooManyRequests"
  #      "500":
  #        $ref: "#/components/responses/InternalServerError"
  #  get:
  #    operationId: getClientRegistration
  #    tags:
  #      - Discovery
  #    summary: Get Client Registration (configurable endpoint)
  #    security:
  #      - RegistrationAccessToken: []
  #    responses:
  #      "200":
  #        description: Current client configuration
  #        content:
  #          application/json:
  #            schema:
  #              $ref: "#/components/schemas/ClientRegistration"
  #      "400":
  #        $ref: "#/components/responses/BadRequest"
  #      "401":
  #        $ref: "#/components/responses/Unauthorized"
  #      "403":
  #        $ref: "#/components/responses/Forbidden"
  #      "404":
  #        $ref: "#/components/responses/NotFound"
  #      "429":
  #        $ref: "#/components/responses/TooManyRequests"
  #      "500":
  #        $ref: "#/components/responses/InternalServerError"
  #  put:
  #    operationId: updateClientRegistration
  #    tags:
  #      - Discovery
  #    summary: "[PHASE 2] Update Client Registration (configurable endpoint)"
  #    security:
  #      - RegistrationAccessToken: []
  #    parameters:
  #      - $ref: '#/components/parameters/IdempotencyKey'
  #    requestBody:
  #      required: true
  #      content:
  #        application/json:
  #          schema:
  #            $ref: "#/components/schemas/ClientRegistration"
  #    responses:
  #      "200":
  #        description: Client configuration updated
  #        content:
  #          application/json:
  #            schema:
  #              $ref: "#/components/schemas/ClientRegistration"
  #      "400":
  #        $ref: "#/components/responses/BadRequest"
  #      "401":
  #        $ref: "#/components/responses/Unauthorized"
  #      "403":
  #        $ref: "#/components/responses/Forbidden"
  #      "404":
  #        $ref: "#/components/responses/NotFound"
  #      "429":
  #        $ref: "#/components/responses/TooManyRequests"
  #      "500":
  #        $ref: "#/components/responses/InternalServerError"
  #  delete:
  #    operationId: deleteClientRegistration
  #    tags:
  #      - Discovery
  #    summary: Delete Client Registration (configurable endpoint)
  #    parameters:
  #      - $ref: '#/components/parameters/IdempotencyKey'
  #    responses:
  #      "204":
  #        description: Client registration deleted
  #      "400":
  #        $ref: "#/components/responses/BadRequest"
  #      "401":
  #        $ref: "#/components/responses/Unauthorized"
  #      "403":
  #        $ref: "#/components/responses/Forbidden"
  #      "404":
  #        $ref: "#/components/responses/NotFound"
  #      "429":
  #        $ref: "#/components/responses/TooManyRequests"
  #      "500":
  #        $ref: "#/components/responses/InternalServerError"

  /.well-known/jwks.json:
    get:
      tags:
        - Discovery
      summary: "[PHASE 1] Retrieve JSON Web Key Set (JWKS) containing public keys for JWT signature verification (configurable endpoint)"
      description: Returns the public keys used to verify JWT signatures
      operationId: getJwks
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWKSet'
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"

  #/consent/arrangements:
  #  post:
  #    operationId: createConsentArrangement
  #    tags:
  #      - Consent
  #    summary: Create a consent arrangement
  #    description: |
  #      Create a new consent arrangement between a data holder and data recipient.
  #      Based on:
  #      - UK Open Banking Consent API v3.1.10
  #      - Australia CDR Consent Management Standards v1.14.0
  #      - Singapore SGFinDex Consent Framework
  #    parameters:
  #      - $ref: '#/components/parameters/ApiVersion'
  #      - $ref: '#/components/parameters/FapiInteractionId'
  #      - $ref: '#/components/parameters/FapiAuthDate'
  #      - $ref: '#/components/parameters/FapiCustomerIpAddress'
  #      - $ref: '#/components/parameters/CustomerUserAgent'
  #      - $ref: '#/components/parameters/IdempotencyKey'
  #      - $ref: '#/components/parameters/Digest'
  #      - $ref: '#/components/parameters/FapiCustomerLastLoggedTime'
  #    requestBody:
  #      required: true
  #      content:
  #        application/json:
  #          schema:
  #            $ref: '#/components/schemas/ConsentArrangementRequest'
  #    responses:
  #      '201':
  #        description: Consent arrangement created successfully
  #        content:
  #          application/json:
  #            schema:
  #              $ref: '#/components/schemas/ConsentArrangementResponse'
  #      '400':
  #        $ref: '#/components/responses/BadRequest'
  #      '401':
  #        $ref: '#/components/responses/Unauthorized'
  #      '403':
  #        $ref: '#/components/responses/Forbidden'
  #      '429':
  #        $ref: '#/components/responses/TooManyRequests'
  #      '500':
  #        $ref: '#/components/responses/InternalServerError'

  #  get:
  #    operationId: listConsentArrangements
  #    tags:
  #      - Consent
  #    summary: List consent arrangements
  #    description: |
  #      Retrieve a list of active consent arrangements for the authenticated user.
  #      Based on:
  #      - UK Open Banking Account Access Consents API
  #      - Australia CDR Get Consent API
  #    parameters:
  #      - name: status
  #        in: query
  #        description: Filter consents by status
  #        schema:
  #          type: string
  #          enum: [active, expired, revoked, suspended]
  #      - name: from_date
  #        in: query
  #        description: Filter consents created after this date
  #        schema:
  #          type: string
  #          format: date-time
  #      - name: to_date
  #        in: query
  #        description: Filter consents created before this date
  #        schema:
  #          type: string
  #          format: date-time
  #      - $ref: '#/components/parameters/ApiVersion'
  #      - $ref: '#/components/parameters/FapiInteractionId'
  #      - $ref: '#/components/parameters/FapiAuthDate'
  #      - $ref: '#/components/parameters/FapiCustomerIpAddress'
  #      - $ref: '#/components/parameters/CustomerUserAgent'
  #      - $ref: '#/components/parameters/Digest'
  #      - $ref: '#/components/parameters/FapiCustomerLastLoggedTime'
  #    responses:
  #      '200':
  #        description: List of consent arrangements
  #        content:
  #          application/json:
  #            schema:
  #              type: array
  #              items:
  #                $ref: '#/components/schemas/ConsentArrangementResponse'
  #     '400':
  #        $ref: '#/components/responses/BadRequest'
  #      '401':
  #        $ref: '#/components/responses/Unauthorized'
  #      '403':
  #        $ref: '#/components/responses/Forbidden'
  #      '429':
  #        $ref: '#/components/responses/TooManyRequests'
  #      '500':
  #        $ref: '#/components/responses/InternalServerError'

  #/consent/arrangements/{arrangement_id}:
  #  get:
  #    operationId: getConsentArrangement
  #    tags:
  #      - Consent
  #    summary: Get consent arrangement details
  #    description: |
  #      Retrieve details of a specific consent arrangement.
  #      Based on:
  #      - UK Open Banking Account Access Consents API
  #      - Australia CDR Get Consent API
  #    parameters:
  #      - name: arrangement_id
  #        in: path
  #        required: true
  #        description: The ID of the consent arrangement
  #        schema:
  #          type: string
  #      - $ref: '#/components/parameters/ApiVersion'
  #      - $ref: '#/components/parameters/FapiInteractionId'
  #      - $ref: '#/components/parameters/FapiAuthDate'
  #      - $ref: '#/components/parameters/FapiCustomerIpAddress'
  #      - $ref: '#/components/parameters/CustomerUserAgent'
  #      - $ref: '#/components/parameters/Digest'
  #      - $ref: '#/components/parameters/FapiCustomerLastLoggedTime'
  #    responses:
  #      '200':
  #        description: Consent arrangement details
  #        content:
  #          application/json:
  #            schema:
  #              $ref: '#/components/schemas/ConsentArrangementResponse'
  #      '400':
  #        $ref: '#/components/responses/BadRequest'
  #      '401':
  #        $ref: '#/components/responses/Unauthorized'
  #      '403':
  #        $ref: '#/components/responses/Forbidden'
  #      '404':
  #        $ref: '#/components/responses/NotFound'
  #      '429':
  #        $ref: '#/components/responses/TooManyRequests'
  #      '500':
  #        $ref: '#/components/responses/InternalServerError'

  #  delete:
  #    operationId: revokeConsentArrangement
  #    tags:
  #      - Consent
  #    summary: Revoke consent arrangement
  #    description: |
  #      Revoke an existing consent arrangement.
  #      Based on:
  #      - UK Open Banking Account Access Consents API
  #      - Australia CDR Revoke Consent API
  #      - Korea MyData Consent Revocation API
  #    parameters:
  #      - name: arrangement_id
  #        in: path
  #        required: true
  #        description: The ID of the consent arrangement to revoke
  #        schema:
  #          type: string
  #      - $ref: '#/components/parameters/ApiVersion'
  #      - $ref: '#/components/parameters/FapiInteractionId'
  #      - $ref: '#/components/parameters/FapiAuthDate'
  #      - $ref: '#/components/parameters/FapiCustomerIpAddress'
  #      - $ref: '#/components/parameters/CustomerUserAgent'
  #      - $ref: '#/components/parameters/IdempotencyKey'
  #      - $ref: '#/components/parameters/Digest'
  #      - $ref: '#/components/parameters/FapiCustomerLastLoggedTime'
  #    responses:
  #      '204':
  #        description: Consent arrangement successfully revoked
  #      '400':
  #        $ref: '#/components/responses/BadRequest'
  #      '401':
  #        $ref: '#/components/responses/Unauthorized'
  #      '403':
  #        $ref: '#/components/responses/Forbidden'
  #      '404':
  #        $ref: '#/components/responses/NotFound'
  #      '429':
  #        $ref: '#/components/responses/TooManyRequests'
  #      '500':
  #        $ref: '#/components/responses/InternalServerError'

  #  put:
  #    operationId: updateConsentStatus
  #    tags:
  #      - Consent
  #    summary: Update consent arrangement status
  #    description: |
  #      Update the status of a consent arrangement (e.g., suspend, resume).
  #      Based on:
  #      - UK Open Banking Account Access Consents API
  #      - Australia CDR Update Consent API
  #    parameters:
  #      - name: arrangement_id
  #        in: path
  #        required: true
  #        description: The ID of the consent arrangement
  #        schema:
  #          type: string
  #      - $ref: '#/components/parameters/ApiVersion'
  #      - $ref: '#/components/parameters/FapiInteractionId'
  #      - $ref: '#/components/parameters/FapiAuthDate'
  #      - $ref: '#/components/parameters/FapiCustomerIpAddress'
  #      - $ref: '#/components/parameters/CustomerUserAgent'
  #      - $ref: '#/components/parameters/IdempotencyKey'
  #      - $ref: '#/components/parameters/Digest'
  #      - $ref: '#/components/parameters/FapiCustomerLastLoggedTime'
  #    requestBody:
  #      required: true
  #      content:
  #        application/json:
  #          schema:
  #            $ref: '#/components/schemas/ConsentStatusUpdate'
  #    responses:
  #      '200':
  #        description: Consent status updated successfully
  #        content:
  #          application/json:
  #            schema:
  #              $ref: '#/components/schemas/ConsentArrangementResponse'
  #      '400':
  #        $ref: '#/components/responses/BadRequest'
  #      '401':
  #        $ref: '#/components/responses/Unauthorized'
  #      '403':
  #        $ref: '#/components/responses/Forbidden'
  #      '404':
  #        $ref: '#/components/responses/NotFound'
  #      '429':
  #        $ref: '#/components/responses/TooManyRequests'
  #      '500':
  #        $ref: '#/components/responses/InternalServerError'

  #/consent/arrangements/{arrangement_id}/history:
  #  get:
  #    operationId: getConsentHistory
  #    tags:
  #      - Consent
  #    summary: Get consent arrangement history
  #    description: |
  #      Retrieve the full history of changes to a consent arrangement.
  #      Based on:
  #      - Australia CDR Consent History API
  #      - UK Open Banking Consent Audit Requirements
  #    parameters:
  #      - name: arrangement_id
  #        in: path
  #        required: true
  #        description: The ID of the consent arrangement
  #        schema:
  #          type: string
  #      - $ref: '#/components/parameters/ApiVersion'
  #      - $ref: '#/components/parameters/FapiInteractionId'
  #      - $ref: '#/components/parameters/FapiAuthDate'
  #      - $ref: '#/components/parameters/FapiCustomerIpAddress'
  #      - $ref: '#/components/parameters/CustomerUserAgent'
  #      - $ref: '#/components/parameters/IdempotencyKey'
  #      - $ref: '#/components/parameters/Digest'
  #      - $ref: '#/components/parameters/FapiCustomerLastLoggedTime'
  #    responses:
  #      '200':
  #        description: Consent arrangement history
  #        content:
  #          application/json:
  #            schema:
  #              $ref: '#/components/schemas/ConsentHistory'
  #      '400':
  #        $ref: '#/components/responses/BadRequest'
  #      '401':
  #        $ref: '#/components/responses/Unauthorized'
  #      '403':
  #        $ref: '#/components/responses/Forbidden'
  #      '404':
  #        $ref: '#/components/responses/NotFound'
  #      '429':
  #        $ref: '#/components/responses/TooManyRequests'
  #      '500':
  #        $ref: '#/components/responses/InternalServerError'

  #/consent/bulk:
  #  post:
  #    operationId: createBulkConsent
  #    tags:
  #      - Consent
  #    summary: Create bulk consent arrangements
  #    description: |
  #      Create multiple consent arrangements in a single request.
  #      Based on:
  #      - Korea MyData Bulk Consent API
  #      - Singapore SGFinDex Multi-Institution Consent
  #    parameters:
  #      - $ref: '#/components/parameters/ApiVersion'
  #      - $ref: '#/components/parameters/FapiInteractionId'
  #      - $ref: '#/components/parameters/FapiAuthDate'
  #      - $ref: '#/components/parameters/FapiCustomerIpAddress'
  #      - $ref: '#/components/parameters/CustomerUserAgent'
  #      - $ref: '#/components/parameters/IdempotencyKey'
  #      - $ref: '#/components/parameters/Digest'
  #      - $ref: '#/components/parameters/FapiCustomerLastLoggedTime'
  #    requestBody:
  #      required: true
  #      content:
  #        application/json:
  #          schema:
  #            $ref: '#/components/schemas/BulkConsentRequest'
  #    responses:
  #      '201':
  #        description: Bulk consent arrangements created successfully
  #        content:
  #          application/json:
  #            schema:
  #              $ref: '#/components/schemas/BulkConsentResponse'
  #      '400':
  #        $ref: '#/components/responses/BadRequest'
  #      '401':
  #        $ref: '#/components/responses/Unauthorized'
  #      '403':
  #        $ref: '#/components/responses/Forbidden'
  #      '429':
  #        $ref: '#/components/responses/TooManyRequests'
  #      '500':
  #        $ref: '#/components/responses/InternalServerError'

  #/consent/templates:
  #  get:
  #    operationId: listConsentTemplates
  #    tags:
  #      - Consent
  #    summary: List available consent templates
  #    description: |
  #      Retrieve available consent templates that can be used to create new arrangements.
  #      Based on:
  #      - Australia CDR Consent Taxonomy
  #      - UK Open Banking Standard Permissions
  #    parameters:
  #      - name: category
  #        in: query
  #        description: Filter templates by category
  #        schema:
  #          type: string
  #      - name: purpose
  #        in: query
  #        description: Filter templates by purpose
  #        schema:
  #          type: string
  #      - $ref: '#/components/parameters/ApiVersion'
  #      - $ref: '#/components/parameters/FapiInteractionId'
  #      - $ref: '#/components/parameters/FapiAuthDate'
  #      - $ref: '#/components/parameters/FapiCustomerIpAddress'
  #      - $ref: '#/components/parameters/CustomerUserAgent'
  #      - $ref: '#/components/parameters/IdempotencyKey'
  #      - $ref: '#/components/parameters/Digest'
  #      - $ref: '#/components/parameters/FapiCustomerLastLoggedTime'
  #    responses:
  #      '200':
  #        description: List of consent templates
  #        content:
  #          application/json:
  #            schema:
  #              type: array
  #              items:
  #                $ref: '#/components/schemas/ConsentTemplate'
  #      '400':
  #        $ref: '#/components/responses/BadRequest'
  #      '401':
  #        $ref: '#/components/responses/Unauthorized'
  #      '403':
  #        $ref: '#/components/responses/Forbidden'
  #      '429':
  #        $ref: '#/components/responses/TooManyRequests'
  #      '500':
  #        $ref: '#/components/responses/InternalServerError'

  #/consent/arrangements/{arrangement_id}/extend:
  #  post:
  #    operationId: extendConsentDuration
  #    tags:
  #      - Consent
  #    summary: Extend consent arrangement duration
  #    description: |
  #      Extend the duration of an existing consent arrangement.
  #      Based on:
  #      - Australia CDR Consent Amendment
  #      - UK Open Banking Re-authentication
  #    security:
  #      - OAuth2: []
  #    parameters:
  #      - name: arrangement_id
  #        in: path
  #        required: true
  #        description: The ID of the consent arrangement
  #        schema:
  #          type: string
  #      - $ref: '#/components/parameters/ApiVersion'
  #      - $ref: '#/components/parameters/FapiInteractionId'
  #      - $ref: '#/components/parameters/FapiAuthDate'
  #      - $ref: '#/components/parameters/FapiCustomerIpAddress'
  #      - $ref: '#/components/parameters/CustomerUserAgent'
  #      - $ref: '#/components/parameters/IdempotencyKey'
  #      - $ref: '#/components/parameters/Digest'
  #     - $ref: '#/components/parameters/FapiCustomerLastLoggedTime'
  #   requestBody:
  #     required: true
  #     content:
  #       application/json:
  #         schema:
  #           $ref: '#/components/schemas/ConsentExtensionRequest'
  #   responses:
  #    '200':
  #       description: Consent duration extended successfully
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/ConsentArrangementResponse'
  #     '400':
  #       $ref: '#/components/responses/BadRequest'
  #     '401':
  #       $ref: '#/components/responses/Unauthorized'
  #     '403':
  #       $ref: '#/components/responses/Forbidden'
  #     '404':
  #       $ref: '#/components/responses/NotFound'
  #     '429':
  #       $ref: '#/components/responses/TooManyRequests'
  #     '500':
  #       $ref: '#/components/responses/InternalServerError'

  #consent/customers/{customer_id}/arrangements:
  # get:
  #   operationId: getCustomerConsents
  #   tags:
  #     - Consent
  #   summary: Get customer's consent arrangements
  #   description: |
  #     Retrieve all consent arrangements for a specific customer.
  #     Based on:
  #     - UK Open Banking Customer Consent Management
  #     - Australia CDR Consumer Dashboard APIs
  #     - Singapore SGFinDex Customer Consent View
  #   parameters:
  #     - name: customer_id
  #       in: path
  #       required: true
  #       description: The customer's unique identifier
  #       schema:
  #         type: string
  #     - name: status
  #       in: query
  #       description: Filter consents by status
  #      schema:
  #         type: string
  #         enum: [active, expired, revoked, suspended]
  #     - name: data_holder_id
  #       in: query
  #       description: Filter by specific data holder/institution
  #       schema:
  #         type: string
  #     - name: purpose
  #       in: query
  #       description: Filter by consent purpose
  #       schema:
  #         type: string
  #     - $ref: '#/components/parameters/ApiVersion'
  #     - $ref: '#/components/parameters/FapiInteractionId'
  #     - $ref: '#/components/parameters/FapiAuthDate'
  #     - $ref: '#/components/parameters/FapiCustomerIpAddress'
  #     - $ref: '#/components/parameters/CustomerUserAgent'
  #     - $ref: '#/components/parameters/IdempotencyKey'
  #     - $ref: '#/components/parameters/Digest'
  #     - $ref: '#/components/parameters/FapiCustomerLastLoggedTime'
  #    responses:
  #      '200':
  #        description: Customer's consent arrangements
  #        content:
  #          application/json:
  #            schema:
  #              type: object
  #              required:
  #                - customer_id
  #                - arrangements
  #              properties:
  #                customer_id:
  #                  type: string
  #                total_arrangements:
  #                  type: integer
  #                active_arrangements:
  #                  type: integer
  #                arrangements:
  #                  type: array
  #                 items:
  #                   $ref: '#/components/schemas/ConsentArrangementResponse'
  #      '400':
  #       $ref: '#/components/responses/BadRequest'
  #     '401':
  #       $ref: '#/components/responses/Unauthorized'
  #     '403':
  #       $ref: '#/components/responses/Forbidden'
  #     '404':
  #      $ref: '#/components/responses/NotFound'
  #     '429':
  #       $ref: '#/components/responses/TooManyRequests'
  #     '500':
  #       $ref: '#/components/responses/InternalServerError'

 #/consent/customers/{customer_id}/arrangements/bulk-update:
  #  post:
  #    operationId: bulkUpdateCustomerConsents
  #    tags:
  #      - Consent
  #    summary: Bulk update customer's consent arrangements
  #    description: |
  #      Update multiple consent arrangements for a specific customer in a single request.
  #      Based on:
  #      - Australia CDR Bulk Consumer Update
  #      - Korea MyData Consent Management
  #    parameters:
  #      - name: customer_id
  #        in: path
  #        required: true
  #        description: The customer's unique identifier
  #        schema:
  #          type: string
  #      - $ref: '#/components/parameters/ApiVersion'
  #      - $ref: '#/components/parameters/FapiInteractionId'
  #      - $ref: '#/components/parameters/FapiAuthDate'
  #      - $ref: '#/components/parameters/FapiCustomerIpAddress'
  #      - $ref: '#/components/parameters/CustomerUserAgent'
  #      - $ref: '#/components/parameters/IdempotencyKey'
  #      - $ref: '#/components/parameters/Digest'
  #      - $ref: '#/components/parameters/FapiCustomerLastLoggedTime'
  #    requestBody:
  #      required: true
  #      content:
  #        application/json:
  #          schema:
  #            type: object
  #            required:
  #              - updates
  #            properties:
  #              updates:
  #                type: array
  #                items:
  #                  type: object
  #                  required:
  #                    - id
  #                    - action
  #                  properties:
  #                    id:
  #                     type: string
  #                    action:
  #                      type: string
  #                      enum: [revoke, suspend, resume, extend]
  #                    reason:
  #                      type: string
  #                    extension_details:
  #                      $ref: '#/components/schemas/ConsentExtensionRequest'
  #                minItems: 1
  #                maxItems: 50
  #    responses:
  #      '200':
  #        description: Bulk update results
  #        content:
  #          application/json:
  #            schema:
  #              type: object
  #              required:
  #                - customer_id
  #                - results
  #              properties:
  #                customer_id:
  #                  type: string
  #                results:
  #                  type: array
  #                  items:
  #                    type: object
  #                    required:
  #                      - id
  #                      - status
  #                    properties:
  #                      id:
  #                        type: string
  #                      status:
  #                        type: string
  #                        enum: [success, failed]
  #                      error:
  #                        type: object
  #                        properties:
  #                          code:
  #                            type: string
  #                          message:
  #                            type: string
  #      '400':
  #        $ref: '#/components/responses/BadRequest'
  #      '401':
  #        $ref: '#/components/responses/Unauthorized'
  #      '403':
  #        $ref: '#/components/responses/Forbidden'
  #      '404':
  #        $ref: '#/components/responses/NotFound'
  #      '429':
  #        $ref: '#/components/responses/TooManyRequests'
  #      '500':
  #        $ref: '#/components/responses/InternalServerError'

  #/consent/customers/{customer_id}/dashboard:
  #  get:
  #    operationId: getCustomerConsentDashboard
  #    tags:
  #      - Consent
  #    summary: Get customer's consent dashboard
  #    description: |
  #      Retrieve a comprehensive view of customer's consent arrangements and data sharing.
  #      Based on:
  #      - Australia CDR Consumer Dashboard
  #      - UK Open Banking Consent Dashboard
  #      - Singapore SGFinDex Customer Portal
  #    parameters:
  #      - name: customer_id
  #        in: path
  #        required: true
  #        description: The customer's unique identifier
  #        schema:
  #          type: string
  #      - $ref: '#/components/parameters/ApiVersion'
  #      - $ref: '#/components/parameters/FapiInteractionId'
  #      - $ref: '#/components/parameters/FapiAuthDate'
  #      - $ref: '#/components/parameters/FapiCustomerIpAddress'
  #      - $ref: '#/components/parameters/CustomerUserAgent'
  #      - $ref: '#/components/parameters/IdempotencyKey'
  #      - $ref: '#/components/parameters/Digest'
  #      - $ref: '#/components/parameters/FapiCustomerLastLoggedTime'
  #    responses:
  #      '200':
  #        description: Customer's consent dashboard
  #        content:
  #          application/json:
  #            schema:
  #              $ref: '#/components/schemas/ConsentDashboard'
  #      '400':
  #        $ref: '#/components/responses/BadRequest'
  #      '401':
  #        $ref: '#/components/responses/Unauthorized'
  #      '403':
  #        $ref: '#/components/responses/Forbidden'
  #      '404':
  #        $ref: '#/components/responses/NotFound'
  #      '429':
  #        $ref: '#/components/responses/TooManyRequests'
  #      '500':
  #        $ref: '#/components/responses/InternalServerError'

security:
  - SignedJWT: []

components:
  parameters:
    ApiVersion:
      name: x-v
      in: header
      required: false
      description: Version of the API endpoint requested by the client. Must be set to a positive integer. If the version requested is not supported then the holder must respond with a 406 Not Acceptable.
      schema:
        type: integer
        maximum: 100
        minimum: 1

    FapiInteractionId:
      name: x-fapi-interaction-id
      in: header
      required: true
      description: An [RFC4122] UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.
      schema:
        type: string
        format: uuid
        maxLength: 64

    FapiAuthDate:
      name: x-fapi-auth-date
      in: header
      required: false
      description: The time when the customer last logged in to the Data Recipient Software Product as described in FAPI Advanced. Required for all resource calls (customer present and unattended). Not required for unauthenticated calls.
      schema:
        type: string
        format: date-time

    FapiCustomerIpAddress:
      name: x-fapi-customer-ip-address
      in: header
      required: false
      description: The customer's original IP address if the customer is currently logged in to the Data Recipient Software Product. The presence of this header indicates that the API is being called in a customer present context. Required for customer-triggered endpoints, not required for administrative endpoints or unauthenticated calls.
      schema:
        type: string
        format: ipv4

    CustomerUserAgent:
      name: x-customer-user-agent
      in: header
      required: false
      description: The customer's original User-Agent header, if the customer is currently logged in to the Data Recipient Software Product. Mandatory for customer present calls. Not required for unattended or unauthenticated calls.
      schema:
        type: string

    Authorization:
      name: Authorization
      in: header
      required: true
      description: Bearer token for authentication. Must be in the format 'Bearer <token>'
      schema:
        type: string
        pattern: '^Bearer [A-Za-z0-9-._~+/]+=*$'
        example: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'

    IdempotencyKey:
      name: x-idempotency-key
      in: header
      required: true
      description: Unique idempotency key for the request as per FAPI Advanced requirements
      schema:
        type: string
        format: uuid
        
    Digest:
      name: Digest
      in: header
      required: false
      description: HTTP Digest header as defined in RFC3230 and RFC5843. Contains a hash of the request body, used in conjunction with the x-jws-signature header for request integrity verification.
      schema:
        type: string
        pattern: '^(SHA-256|SHA-512)=[A-Za-z0-9+/]+=*$'
        example: 'SHA-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE='

    FapiCustomerLastLoggedTime:
      name: x-fapi-customer-last-logged-time
      in: header
      required: false
      description: The time when the PSU last logged in to the client software as per FAPI Advanced requirements
      schema:
        type: string
        format: date-time

  schemas:
    Address:
      type: object
      required:
        - addressFormat
        - cityMunicipality
        - streetAddress
        - country
        - postalCode
      properties:
        addressFormat:
          type: string
          enum: ["PSGC"]
          maxLength: 4
          description: Format of address values
        cityMunicipality:
          type: string
          maxLength: 10
          description: PSGC Code for City
          example: "0405812000"
        barangay:
          type: string
          maxLength: 10
          description: PSGC Code for Barangay
          example: "0405812016"
        streetAddress:
          $ref: "#/components/schemas/StreetAddress"
        buildingUnitNumber:
          $ref: "#/components/schemas/BuildingUnitNumber"
        country:
          $ref: "#/components/schemas/CountryCode"
        postalCode:
          $ref: "#/components/schemas/PostalCode"

    AddressString:
      type: object
      required:
        - address_format
        - region
        - province
        - street_address
        - city_municipality
        - country
        - postal_code
      properties:
        address_format:
          type: string
          enum: ["TEXT"]
          maxLength: 4
          description: Format of address values
        region:
          type: string
          maxLength: 140
          description: Region
          example: "Region IV-A (CALABARZON)"
        province:
          type: string
          maxLength: 140
          description: Province
          example: "Rizal"
        city_municipality:
          type: string
          maxLength: 140
          description: City
          example: "Tanay"
        barangay:
          type: string
          maxLength: 140
          description: Barangay
          example: "Santo Niño"
        street_address:
          $ref: "#/components/schemas/StreetAddress"
        building_unit_number:
          $ref: "#/components/schemas/BuildingUnitNumber"
        country:
          $ref: "#/components/schemas/CountryCode"
        postal_code:
          $ref: "#/components/schemas/PostalCode"

    StreetAddress:
      type: string
      maxLength: 200
      description: Street Address
      example: "Yakal Street cor Lawaan Street"

    BuildingUnitNumber:
      type: string
      maxLength: 200
      description: Building and/or Unit Number
      example: "#357 Barbie's Townhouse"

    PostalCode:
      type: string
      maxLength: 10
      description: Postal Code
      example: "1635"

    CountryCode:
      type: string
      maxLength: 3
      description: ISO 3166 Code
      example: "PHL"
      pattern: "^[A-Z]{3}$"

    IdType:
      type: object
      required:
        - idNumber
        - idType
      properties:
        idNumber:
          type: string
          maxLength: 50
        idExpiryDate:
          type: string
          maxLength: 10
          format: date
          description: Format is YYYY-MM-DD
        idType:
          type: string
          maxLength: 100
          description: ID Type (e.g., "Drivers License", "Passport", etc.)

    PersonalInformation:
      type: object
      required:
        - sub
        - givenName
        - lastName
        - mobileNumber
        - email
        - birthdate
        - nationality
        - residentialAddress
      properties:
        sub:
          type: string
          maxLength: 50
          description: Subject – FI's unique identifier for the End-User
        title:
          type: string
          maxLength: 50
        givenName:
          type: string
          maxLength: 50
        middleName:
          type: string
          maxLength: 50
        lastName:
          type: string
          maxLength: 50
        suffix:
          type: string
          maxLength: 10
        phoneNumber:
          type: string
          maxLength: 15
          pattern: "^[0-9]{11}$"
          example: "63287654321"
        mobileNumber:
          type: string
          maxLength: 15
          pattern: "^[0-9]{12}$"
          example: "639171234567"
        email:
          type: string
          maxLength: 50
          format: email
        birthdate:
          type: string
          maxLength: 10
          format: date
          description: Format YYYY-MM-DD
        nationality:
          type: string
          maxLength: 3
          description: ISO 3166 Code
        residentialAddress:
          oneOf:
            - $ref: "#/components/schemas/Address"
            - $ref: "#/components/schemas/AddressString"
        tin:
          type: string
          maxLength: 15
          pattern: "^[0-9]{3}-[0-9]{3}-[0-9]{3}-[0-9]{3}$"
          description: Format NNN-NNN-NNN-000

    CustomerInformation:
      type: object
      required:
        - sub
        - arrangementId
        - personalInformation
        - presentedIds
        - peraAdmin
      properties:
        sub:
          type: string
          maxLength: 50
          description: Subject – FI's unique identifier for the End-User
        arrangementId:
          type: string
          description: The unique identifier for the Consent Arrangement
        personalInformation:
          $ref: "#/components/schemas/PersonalInformation"
        presentedIds:
          type: array
          items:
            $ref: "#/components/schemas/IdType"
          description: Array of identification details
        cdd:
          $ref: "#/components/schemas/CustomerDueDiligence"
        peraAdmin:
          type: string
          maxLength: 50
          description: The PERA Admin selected by the Customer

    CustomerDueDiligence:
      type: object
      properties:
        contributorType:
          type: string
          maxLength: 50
          enum: ["Employee", "Self-Employed", "Overseas Filipino"]
          default: "string"
        occupation:
          type: string
          maxLength: 150
        natureOfWork:
          type: string
          maxLength: 10
          description: PSIC Code
        employerName:
          type: string
          maxLength: 255
        employerAddress:
          oneOf:
            - $ref: "#/components/schemas/Address"
            - $ref: "#/components/schemas/AddressString"
        pepIndicator:
          type: boolean
          default: false
          description: Politically Exposed Person 1 - True; 0 - False
        fundSource:
          type: string
          maxLength: 100
          description: Source of Funds
        cddIndicator:
          type: string
          maxLength: 6
          enum: ["Low", "Normal", "High"]
          default: "Normal"
          description: Customer Due Diligence Risk Level

    Participant:
      type: object
      title: Participant
      required:
        - participant_name
        - participant_type
        - jwks
      properties:
        participantId:
          type: string
          description: Unique identifier for the participant
        participantName:
          type: string
          description: Trading name of the participant
        participantType:
          type: string
          enum: ["oauth_client", "auth_server"]
          description: Types of roles this participant can perform
        participantDescription:
          type: string
          description: Short Description of the participant (Required for PERA Admin)
        participantLogoUri:
          type: string
          description: logo uri of the participant
        status:
          type: string
          enum: ["active", "inactive", "suspended"]
          default: "active"
        jwks:
          $ref: "#/components/schemas/JWKSet"
        contact:
          type: object
          required:
            - phone
            - email
          properties:
            phone:
              type: string
              description: Contact phone number
            email:
              type: string
              format: email
              description: Contact email address
        address:
          $ref: "#/components/schemas/Address"
    
    OAuthClient:
      type: object
      required:
        - participant
        - clientConfig
      properties:
        participant:
          $ref: "#/components/schemas/Participant"
        clientConfig:
          type: array
          items:
            $ref: "#/components/schemas/ClientRegistration"
          minItems: 1
          description: Array of OAuth client configurations for this participant

    ClientRegistrationResponse:
      type: object
      required:
        - clientId
        - registrationAccessToken
        - clientIdIssuedAt
      properties:
        clientId:
          type: string
          description: Issued client identifier
        registrationAccessToken:
          type: string
          description: Registration access token for subsequent operations
        registrationClientUri:
          type: string
          format: uri
          description: URI for managing the client registration
        clientIdIssuedAt:
          type: integer
          description: Time at which the client identifier was issued, in seconds since Unix epoch (1970-01-01T00:00:00Z UTC)

    ParticipantConfig:
      oneOf:
        - $ref: "#/components/schemas/AuthServer"
        - $ref: "#/components/schemas/OAuthClient"

    AuthServer:
      type: object
      required:
        - participant
        - authserverConfig
      properties:
        participant:
          $ref: "#/components/schemas/Participant"
        authserverConfig:
          $ref: "#/components/schemas/AuthServerURIs"

    jwksConfiguration:
      anyOf:
        - $ref: "#/components/schemas/JWKSet"
        - type: string
          title: JWKSetURI
          format: uri
          description: URI for JSON Web Key Set containing public keys

    AuthServerURIs:
      title: AuthorizationServer
      description: Endpoints of the OFxPERA Participant as an Authorization Server
      required:
        - issuer
        - authorizationEndpoint
        - tokenEndpoint
        - customerKycEndpoint
        - peraArrangementEndpoint
      properties:
        issuer:
          type: string
          format: uri
          description: URL using the https scheme with no query or fragment component that the OP asserts as its Issuer Identifier
        authorizationEndpoint:
          type: string
          format: uri
          description: URL of the OP's OAuth 2.0 Authorization Endpoint
        tokenEndpoint:
          type: string
          format: uri
          description: URL of the OP's OAuth 2.0 Token Endpoint
        userInfoEndpoint:
          type: string
          format: uri
          description: URL of the OP's UserInfo Endpoint
        endSessionEndpoint:
          type: string
          format: uri
          description: URL at the OP to which an RP can perform a redirect to
        customerKycEndpoint:
          type: string
          format: uri
          description: URL of the Customer KYC Endpoint
        peraArrangementEndpoint:
          type: string
          format: uri
          description: URL of the PERA Arrangement Endpoint
        registrationEndpoint:
          type: string
          format: uri
          description: URL of the OP's Dynamic Client Registration Endpoint
        
    OAuthClientURIs:
      title: OAuthClient
      description: API Endpoints of the OFxPERA Participant as an OAuth client
      required:
        - redirect_uris
      properties:
        redirect_uris:
          type: array
          items:
            type: string
            format: uri
          minItems: 1
          description: Array of redirect URIs to be used in OAuth 2.0 flows

    EndpointURIs:
      oneOf:
        - $ref: "#/components/schemas/OAuthClientURIs"
        - $ref: "#/components/schemas/AuthServerURIs"

    ClientRegistration:
      type: object
      required:
        - applicationType
        - clientName
        - redirectUris
        - tokenEndpointAuthMethod
        - grantTypes
        - responseTypes
      properties:
        applicationType:
          type: string
          enum: ["web", "native", "hybrid"]
          description: Type of application
        clientId:
          type: string
          description: Client identifier
        clientName:
          type: string
          description: Name of the client
        redirectUris:
          type: array
          items:
            type: string
            format: uri
          description: Array of redirect URIs for use in OAuth flows
        tokenEndpointAuthMethod:
          type: string
          enum: ["private_key_jwt"]
          description: Authentication method for token endpoint, OFxPERA Phase 1 requires private_key_jwt
        grantTypes:
          type: array
          items:
            type: string
            enum: ["authorization_code", "refresh_token"]
        responseTypes:
          type: array
          items:
            type: string
            enum: ["code"]
          description: Allowed OAuth response types, OFxPERA requires code.
          example: ["code"]
          minItems: 1
          maxItems: 1
        scope:
          type: string
          description: Space-separated list of requested scopes (e.g. openid profile email address phone)
        softwareStatement:
          type: string
          description: JWT containing software statement from trusted authority
        jwks:
          $ref: "#/components/schemas/JWKSet"
        jwksUri:
          type: string
          format: uri
          description: URI for JSON Web Key Set containing public keys
        organizationName:
          type: string
          description: Legal name of the PERA Participant organization
        contacts:
          type: array
          items:
            type: string
            format: email
          description: Administrative contact emails
      anyOf:
        - required: ["jwks"]
        - required: ["jwks_uri"]
    
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message describing the error
        details:
          type: array
          items:
            type: string
          description: Additional details about the error

    JWKSet:
      type: object
      title: JWKSet
      required:
        - keys
      properties:
        keys:
          type: array
          description: Array of JWK values representing public keys for verifying JWTs
          items:
            type: object
            required:
              - kty
            properties:
              kty:
                type: string
                description: Key type
                enum: ["RSA", "EC"]
              kid:
                type: string
                description: Key ID
                example: "1234567890"
              use:
                type: string
                description: Key usage (e.g., "sig" for signing)
                example: "sig"
              alg:
                type: string
                description: Algorithm (e.g., "RS256")
                example: "RS256"
              n:
                type: string
                description: RSA modulus for RSA keys
                example: "0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMstn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FDW2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n91CbOpbISD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINHaQ-G_xBniIqbw0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw"
              e:
                type: string
                description: RSA public exponent for RSA keys
                example: "AQAB"
              x:
                type: string
                description: X coordinate for EC keys
                example: "gI0GAILBdu7T53akrFmMyGcsF3n5dO7MmwNBHKW5SV0"
              y: 
                type: string
                description: Y coordinate for EC keys
                example: "SLW_xSffzlPWrHEVI30DHM_4egVwt3NQqeUD7nMFpps"
              crv:
                type: string
                description: Curve type for EC keys
                enum: ["P-256", "P-384", "P-521"]
                example: "P-256"
              x5c:
                type: array
                description: X.509 certificate chain
                items:
                  type: string
                example: ["MIIDQjCCAiqgAwIBAgIGATz/FuLiMA0GCSqGSIb3DQEBBQUAMGIxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDTzEPMA0GA1UEBxMGRGVudmVyMRwwGgYDVQQKExNQaW5nIElkZW50aXR5IENvcnAuMRcwFQYDVQQDEw5CcmlhbiBDYW1wYmVsbDAeFw0xMzAyMjEyMzI5MTVaFw0xODA4MTQyMjI5MTVaMGIxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDTzEPMA0GA1UEBxMGRGVudmVyMRwwGgYDVQQKExNQaW5nIElkZW50aXR5IENvcnAuMRcwFQYDVQQDEw5CcmlhbiBDYW1wYmVsbDAeFw0xMzAyMjEyMzI5MTVaFw0xODA4MTQyMjI5MTVaMGIxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDTzEPMA0GA1UEBxMGRGVudmVyMRwwGgYDVQQKExNQaW5nIElkZW50aXR5IENvcnAuMRcwFQYDVQQDEw5CcmlhbiBDYW1wYmVsbDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAL64zn8/QnHYMeZ0LncoXaEde1fiLm1jHjmQsF/449IYALM9if6amFtPDy2yvz3YlRij66s5gyLCyO7ANuVRJx1NbgizcAblIgjtdf/u3WG7K+IiZhtELto/A7Fck9Ws6SQvzRvOE8uSirYbgmj6He4iO8NCyvaK0jIQRMMGQwsU1quGmFgHIXPLfnpnfajr1rVTAwtgV5LEZ4Iel+W1GC8ugMhyr4/p1MtcIM42EA8BzE6ZQqC7VPqPvEjZ2dbZkaBhPbiZAS3YeYBRDWm1p1OZtWamT3cEvqqPpnjL1XyW+oyVVkaZdklLQp2Btgt9qr21m42f4wTw+Xrp6rCKNb0CAwEAATANBgkqhkiG9w0BAQUFAAOCAQEAh8zGlfSlcI0o3rYDPBB07aXNswb4ECNIKG0CETTUxmXl9KUL+9gGlqCz5iWLOgWsnrcKcY0vXPG9J1r9AqBNTqNgHq2G03X09266X5CpOe1zFo+Owb1zxtp3PehFdfQJ610CDLEaS9V9Rqp17hCyybEpOGVwe8fnk+fbEL2Bo3UPGrpsHzUoaGpDftmWssZkhpBJKVMJyf/RuP2SmmaIzmnw9JiSlYhzo4tpzd5rFXhjRbg4zW9C+2qok+2+qDM1iJ684gPHMIY8aLWrdgQTxkumGmTqgawR+N5MDtdPTEQ0XfIBc2cJEUyMTY5MPvACWpkA6SdS4xSvdXK3IVfOWA=="]
              x5t:
                type: string
                description: X.509 certificate SHA-1 thumbprint
                example: "dGhpcyBpcyBub3QgYSByZWFsIHRodW1icHJpbnQ"

    EndorsementResponse:
      type: object
      properties:
        status:
          type: string
          enum: [SUCCESS, FAILED]
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        endorsement_details:
          $ref: '#/components/schemas/EndorsementDetails'
      required:
        - status
        - timestamp

    EndorsementDetails:
      type: object
      properties:
        endorser_id:
          type: string
          description: Endorser's unique identifier
        sub:
          type: string
          description: Subject – FI's unique identifier for the End-User
        endorsement_date:
          type: string
          format: date-time
          description: Date and time the endorsement was created
        reference_id:
          type: string
          description: Reference ID from the PERA Admin
      required:
        - endorser_id
        - endorsement_date

    ConsentArrangementRequest:
      type: object
      required:
        - data_holder_id
        - permissions
        - sharing_duration
        - purpose
      properties:
        data_holder_id:
          type: string
          description: Identifier of the data holder (financial institution)
        permissions:
          type: array
          items:
            type: string
            enum:
              - PERA_BASIC_INFO
              - PERA_BALANCE
              - PERA_TRANSACTIONS
              - PERA_INVESTMENT_DETAILS
              - PERA_STATEMENTS
          minItems: 1
          description: Permissions being requested for data access
        sharing_duration:
          type: object
          required:
            - start_date
            - end_date
          properties:
            start_date:
              type: string
              format: date-time
              description: When the consent arrangement should start
            end_date:
              type: string
              format: date-time
              description: When the consent arrangement should end
        purpose:
          type: string
          description: Purpose for which the data will be used
        additional_terms:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
              value:
                type: string
          description: Additional terms and conditions specific to this arrangement

    ConsentArrangementResponse:
      type: object
      required:
        - id
        - status
        - created_at
        - data_holder_id
        - permissions
        - sharing_duration
        - purpose
      properties:
        id:
          type: string
          description: Unique identifier for the consent arrangement
        status:
          type: string
          enum:
            - active
            - expired
            - revoked
            - suspended
          description: Current status of the consent arrangement
        created_at:
          type: string
          format: date-time
          description: When the consent arrangement was created
        last_updated_at:
          type: string
          format: date-time
          description: When the consent arrangement was last updated
        data_holder_id:
          type: string
          description: Identifier of the data holder
        permissions:
          type: array
          items:
            type: string
          description: Granted permissions for data access
        sharing_duration:
          type: object
          properties:
            start_date:
              type: string
              format: date-time
            end_date:
              type: string
              format: date-time
        purpose:
          type: string
          description: Purpose for which the data will be used
        additional_terms:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
              value:
                type: string
        revocation_info:
          type: object
          properties:
            revoked_at:
              type: string
              format: date-time
            reason:
              type: string
          description: Information about consent revocation if applicable

    ConsentStatusUpdate:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - active
            - suspended
          description: New status for the consent arrangement
        reason:
          type: string
          description: Reason for the status update

    ConsentHistory:
      type: object
      required:
        - id
        - events
      properties:
        id:
          type: string
          description: The ID of the consent arrangement
        events:
          type: array
          items:
            type: object
            required:
              - event_type
              - timestamp
              - actor
            properties:
              event_type:
                type: string
                enum:
                  - created
                  - updated
                  - suspended
                  - resumed
                  - revoked
                  - expired
                  - extended
              timestamp:
                type: string
                format: date-time
              actor:
                type: string
                description: The entity that performed the action (e.g., user_id, system)
              details:
                type: object
                description: Additional event-specific details
              previous_state:
                type: object
                description: State before the change
              new_state:
                type: object
                description: State after the change

    BulkConsentRequest:
      type: object
      required:
        - arrangements
      properties:
        arrangements:
          type: array
          items:
            $ref: '#/components/schemas/ConsentArrangementRequest'
          minItems: 1
          maxItems: 50
        batch_id:
          type: string
          description: Optional identifier for the bulk operation

    BulkConsentResponse:
      type: object
      required:
        - results
      properties:
        batch_id:
          type: string
        results:
          type: array
          items:
            type: object
            required:
              - status
              - arrangement
            properties:
              status:
                type: string
                enum: [success, failed]
              arrangement:
                $ref: '#/components/schemas/ConsentArrangementResponse'
              error:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string

    ConsentTemplate:
      type: object
      required:
        - template_id
        - name
        - permissions
        - purpose
      properties:
        template_id:
          type: string
        name:
          type: string
        description:
          type: string
        category:
          type: string
        permissions:
          type: array
          items:
            type: string
        purpose:
          type: string
        default_duration:
          type: object
          properties:
            value:
              type: integer
            unit:
              type: string
              enum: [days, months, years]
        terms_and_conditions:
          type: string
        data_usage_policy:
          type: string
        version:
          type: string

    ConsentExtensionRequest:
      type: object
      required:
        - new_end_date
      properties:
        new_end_date:
          type: string
          format: date-time
          description: New end date for the consent arrangement
        reason:
          type: string
          description: Reason for extending the consent
        additional_terms:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
              value:
                type: string

    ConsentDashboard:
      type: object
      required:
        - customer_id
        - summary
      properties:
        customer_id:
          type: string
        summary:
          type: object
          required:
            - total_arrangements
            - active_arrangements
          properties:
            total_arrangements:
              type: integer
            active_arrangements:
              type: integer
            arrangements_by_status:
              type: object
              properties:
                active:
                  type: integer
                expired:
                  type: integer
                revoked:
                  type: integer
                suspended:
                  type: integer
            arrangements_by_purpose:
              type: array
              items:
                type: object
                properties:
                  purpose:
                    type: string
                  count:
                    type: integer
            data_holders:
              type: array
              items:
                type: object
                properties:
                  data_holder_id:
                    type: string
                  name:
                    type: string
                  active_arrangements:
                    type: integer
            recent_activity:
              type: array
              items:
                $ref: '#/components/schemas/ConsentHistory'
            expiring_soon:
              type: array
              items:
                $ref: '#/components/schemas/ConsentArrangementResponse'
              description: Arrangements expiring in the next 30 days

    PeraAccount:
      type: object
      required:
        - id
        - account_id
        - creation_date
      properties:
        id:
          type: string
          description: Generated by the PERA admin, this is the unique identifier of the customer's PERA account
        account_id:
          type: string
          description: PERA Administrator's unique identifier for the customer's PERA account
        creation_date:
          type: string
          format: date-time
          description: Date and time when the PERA account was created
        product:
          $ref: '#/components/schemas/PeraProduct'
        balance:
          type: object
          properties:
            current_value:
              type: number
              format: double
              description: Current value of the PERA arrangement
            currency:
              type: string
              default: PHP
              description: Currency of the balance amounts
            as_of:
              type: string
              format: date-time
              description: Timestamp of when the balance was last updated

    PeraArrangement:
      type: object
      required:
        - id
        - adminId
        - customerId
        - sub
        - consentId
        - status
        - creationDate
      properties:
        id:
          type: string
          description: Generated by the PERA admin, this is the unique identifier for the PERA arrangement
        adminId:
          type: string
          description: Participant Identifier of the PERA Administrator managing this arrangement
        customerId:
          type: string
          description: PERA Administrator's unique identifier of the customer who owns the PERA arrangement
        sub:
          type: string
          maxLength: 50
          description: Subject – FI's unique identifier for the End-User
        consentId:
          type: string
          description: Unique identifier of the consent provided by the Customer to the FI
        status:
          type: string
          enum: [active, declined, closed]
          description: Current status of the PERA arrangement
        reason:
          type: string
          enum: [invalid_tin,existing_account,incomplete_info,failed_dd,failed_cc, others]
          default: null
          description: Reason for the resulting status of the arrangement, mostly used for DECLINED status.
        LastUpdateDate:
          type: string
          format: date-time
          description: Date and time when the PERA arrangement was updated
          
    PeraProduct:
        type: object
        properties:
          productId:
            type: string
            description: Unique Identifier for the product
          productName:
            type: string
            description: The name of the product
          productDescription:
            type: string
            description: A detailed description of the product
          productRiskRating:
            type: string
            description: The risk rating of the product
            enum:
              - conservative
              - moderate
              - aggressive
          productKiidUri:
            type: string
            description: URI to the KIID (Key Investor Information Document) for the product
        required:
          - product_name
          - product_description
          - product_risk_rating
          - product_kiid_uri

    TokenResponse:
      type: object
      required:
        - access_token
        - token_type
        - expires_in
        - id_token
      properties:
        access_token:
          type: string
          description: The access token string as issued by the authorization server
        token_type:
          type: string
          enum: [Bearer]
          description: Type of access token, fixed to Bearer
        expires_in:
          type: integer
          description: Lifetime in seconds of the access token
        refresh_token:
          type: string
          description: Refresh token used to obtain a new access token.
        id_token:
          type: string
          description: ID Token value associated with the authenticated session
        scope:
          type: string
          description: Space-separated list of scopes granted

    OAuthError:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          enum:
            - invalid_request
            - invalid_client
            - invalid_grant
            - unauthorized_client
            - unsupported_grant_type
            - invalid_scope
          description: Error code as defined in RFC 6749
        error_description:
          type: string
          description: Human-readable error description
        error_uri:
          type: string
          format: uri
          description: URI to error documentation

  responses:
    NotFound:
      description: Not Found - The requested resource could not be found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: Unauthorized - Authentication is required and has failed or not been provided
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Forbidden:
      description: Forbidden - The server understood the request but refuses to authorize it
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    BadRequest:
      description: Bad Request - The server cannot process the request due to a client error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    TooManyRequests:
      description: Too Many Requests - The client has sent too many requests in a given amount of time
      headers:
        Retry-After:
          description: Field indicating the time (in seconds) that the client should wait before retrying an operation. The response should include this header along with responses with the HTTP status code of 429 Too many requests.
          schema:
            type: integer
            minimum: 2
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    InternalServerError:
      description: Internal Server Error - The server encountered an unexpected condition
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://yourserver.com/oauth/authorize
          tokenUrl: https://yourserver.com/oauth/token
          scopes: 
            read: Read access
            write: Write access
    SignedJWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >
        An encrypted JWT (JWE) that must conform to RFC 7516.
        The token is encrypted using RSA-OAEP for key management and AES-GCM for content encryption.
    RegistrationAccessToken:
      type: http
      scheme: bearer
      description: Registration Access Token for managing client registration
