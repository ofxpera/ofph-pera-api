package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;
import org.springframework.validation.annotation.Validated;
import org.openapitools.jackson.nullable.JsonNullable;
import io.swagger.configuration.NotUndefined;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import javax.validation.Valid;
import javax.validation.constraints.*;

/**
 * PeraArrangement
 */
@Validated
@NotUndefined
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-03-24T23:14:39.487511291Z[GMT]")


public class PeraArrangement   {
  @JsonProperty("id")

  private String id = null;

  @JsonProperty("adminId")

  private String adminId = null;

  @JsonProperty("customerId")

  private String customerId = null;

  @JsonProperty("sub")

  private String sub = null;

  @JsonProperty("consentId")

  private String consentId = null;

  /**
   * Current status of the PERA arrangement
   */
  public enum StatusEnum {
    ACTIVE("active"),
    
    DECLINED("declined"),
    
    CLOSED("closed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }
  @JsonProperty("status")

  private StatusEnum status = null;

  /**
   * Reason for the resulting status of the arrangement, mostly used for DECLINED status.
   */
  public enum ReasonEnum {
    INVALID_TIN("invalid_tin"),
    
    EXISTING_ACCOUNT("existing_account"),
    
    INCOMPLETE_INFO("incomplete_info"),
    
    FAILED_DD("failed_dd"),
    
    FAILED_CC("failed_cc"),
    
    OTHERS("others");

    private String value;

    ReasonEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ReasonEnum fromValue(String text) {
      for (ReasonEnum b : ReasonEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }
  @JsonProperty("reason")

  @JsonInclude(JsonInclude.Include.NON_ABSENT)  // Exclude from JSON if absent
  @JsonSetter(nulls = Nulls.FAIL)    // FAIL setting if the value is null
  private ReasonEnum reason = null;

  @JsonProperty("creationDate")

  private OffsetDateTime creationDate = null;


  public PeraArrangement id(String id) { 

    this.id = id;
    return this;
  }

  /**
   * Generated by the PERA admin, this is the unique identifier for the PERA arrangement
   * @return id
   **/
  
  @Schema(required = true, description = "Generated by the PERA admin, this is the unique identifier for the PERA arrangement")
  
  @NotNull
  public String getId() {  
    return id;
  }



  public void setId(String id) { 

    this.id = id;
  }

  public PeraArrangement adminId(String adminId) { 

    this.adminId = adminId;
    return this;
  }

  /**
   * Participant Identifier of the PERA Administrator managing this arrangement
   * @return adminId
   **/
  
  @Schema(required = true, description = "Participant Identifier of the PERA Administrator managing this arrangement")
  
  @NotNull
  public String getAdminId() {  
    return adminId;
  }



  public void setAdminId(String adminId) { 

    this.adminId = adminId;
  }

  public PeraArrangement customerId(String customerId) { 

    this.customerId = customerId;
    return this;
  }

  /**
   * PERA Administrator's unique identifier of the customer who owns the PERA arrangement
   * @return customerId
   **/
  
  @Schema(required = true, description = "PERA Administrator's unique identifier of the customer who owns the PERA arrangement")
  
  @NotNull
  public String getCustomerId() {  
    return customerId;
  }



  public void setCustomerId(String customerId) { 

    this.customerId = customerId;
  }

  public PeraArrangement sub(String sub) { 

    this.sub = sub;
    return this;
  }

  /**
   * Subject – FI's unique identifier for the End-User
   * @return sub
   **/
  
  @Schema(required = true, description = "Subject – FI's unique identifier for the End-User")
  
  @NotNull
@Size(max=50)   public String getSub() {  
    return sub;
  }



  public void setSub(String sub) { 

    this.sub = sub;
  }

  public PeraArrangement consentId(String consentId) { 

    this.consentId = consentId;
    return this;
  }

  /**
   * Unique identifier of the consent provided by the Customer to the FI
   * @return consentId
   **/
  
  @Schema(required = true, description = "Unique identifier of the consent provided by the Customer to the FI")
  
  @NotNull
  public String getConsentId() {  
    return consentId;
  }



  public void setConsentId(String consentId) { 

    this.consentId = consentId;
  }

  public PeraArrangement status(StatusEnum status) { 

    this.status = status;
    return this;
  }

  /**
   * Current status of the PERA arrangement
   * @return status
   **/
  
  @Schema(required = true, description = "Current status of the PERA arrangement")
  
  @NotNull
  public StatusEnum getStatus() {  
    return status;
  }



  public void setStatus(StatusEnum status) { 

    this.status = status;
  }

  public PeraArrangement reason(ReasonEnum reason) { 

    this.reason = reason;
    return this;
  }

  /**
   * Reason for the resulting status of the arrangement, mostly used for DECLINED status.
   * @return reason
   **/
  
  @Schema(description = "Reason for the resulting status of the arrangement, mostly used for DECLINED status.")
  
  public ReasonEnum getReason() {  
    return reason;
  }



  public void setReason(ReasonEnum reason) { 
    this.reason = reason;
  }

  public PeraArrangement creationDate(OffsetDateTime creationDate) { 

    this.creationDate = creationDate;
    return this;
  }

  /**
   * Date and time when the PERA arrangement was created
   * @return creationDate
   **/
  
  @Schema(required = true, description = "Date and time when the PERA arrangement was created")
  
@Valid
  @NotNull
  public OffsetDateTime getCreationDate() {  
    return creationDate;
  }



  public void setCreationDate(OffsetDateTime creationDate) { 

    this.creationDate = creationDate;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PeraArrangement peraArrangement = (PeraArrangement) o;
    return Objects.equals(this.id, peraArrangement.id) &&
        Objects.equals(this.adminId, peraArrangement.adminId) &&
        Objects.equals(this.customerId, peraArrangement.customerId) &&
        Objects.equals(this.sub, peraArrangement.sub) &&
        Objects.equals(this.consentId, peraArrangement.consentId) &&
        Objects.equals(this.status, peraArrangement.status) &&
        Objects.equals(this.reason, peraArrangement.reason) &&
        Objects.equals(this.creationDate, peraArrangement.creationDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, adminId, customerId, sub, consentId, status, reason, creationDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PeraArrangement {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    adminId: ").append(toIndentedString(adminId)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    sub: ").append(toIndentedString(sub)).append("\n");
    sb.append("    consentId: ").append(toIndentedString(consentId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
