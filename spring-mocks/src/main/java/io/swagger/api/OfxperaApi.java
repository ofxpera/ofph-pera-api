/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.66).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ClientRegistrationResponse;
import io.swagger.model.Error;
import io.swagger.model.ParticipantConfig;
import io.swagger.model.PeraArrangement;
import io.swagger.model.PeraProduct;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-03-03T23:29:47.351872174Z[GMT]")
@Validated
public interface OfxperaApi {

    @Operation(summary = "Get the status of a PERA arrangement", description = "API that allows FIs to retrieve the status of one or more PERA Arrangements", tags={ "PERA" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully retrieved the status of the PERA Arrangement", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PeraArrangement.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request - The server cannot process the request due to a client error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized - Authentication is required and has failed or not been provided", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden - The server understood the request but refuses to authorize it", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found - The requested resource could not be found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests - The client has sent too many requests in a given amount of time", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error - The server encountered an unexpected condition", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/ofxpera/arrangements/{arrangement_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PeraArrangement> getArrangementStatus(@Parameter(in = ParameterIn.PATH, description = "The ID of the PERA Arrangement", required=true, schema=@Schema()) @PathVariable("arrangement_id") String arrangementId
);


    @Operation(summary = "Get an OFxPERA Participant's registration information", description = "API for retrieving registration information for a specific OFxPERA Participant", security = {
        @SecurityRequirement(name = "RegistrationAccessToken")    }, tags={ "Bootstrap" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully retrieved participant information", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ParticipantConfig.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request - The server cannot process the request due to a client error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized - Authentication is required and has failed or not been provided", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden - The server understood the request but refuses to authorize it", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found - The requested resource could not be found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests - The client has sent too many requests in a given amount of time", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error - The server encountered an unexpected condition", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/ofxpera/participants/{participant_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ParticipantConfig> getParticipant(@Parameter(in = ParameterIn.PATH, description = "Participant identifier issued during participant registration", required=true, schema=@Schema()) @PathVariable("participant_id") String participantId
);


    @Operation(summary = "Get a list of registered OFxPERA Participants", description = "API for retrieving all registered OFxPERA Participants", security = {
        @SecurityRequirement(name = "RegistrationAccessToken")    }, tags={ "Bootstrap" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully retrieved OFxPERA Participants", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ParticipantConfig.class)))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request - The server cannot process the request due to a client error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized - Authentication is required and has failed or not been provided", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden - The server understood the request but refuses to authorize it", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found - The requested resource could not be found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests - The client has sent too many requests in a given amount of time", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error - The server encountered an unexpected condition", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/ofxpera/participants",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ParticipantConfig>> listParticipants();


    @Operation(summary = "Get a list of PERA products associated with PERA Admin", description = "API for retrieving all registered products associated with the PERA Admin.", security = {
        @SecurityRequirement(name = "RegistrationAccessToken")    }, tags={ "Bootstrap" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully retrieved the list of registered products associated with the PERA Admin.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PeraProduct.class)))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request - The server cannot process the request due to a client error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized - Authentication is required and has failed or not been provided", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden - The server understood the request but refuses to authorize it", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found - The requested resource could not be found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests - The client has sent too many requests in a given amount of time", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error - The server encountered an unexpected condition", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/ofxpera/product/{participant_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<PeraProduct>> listProductByParticipant(@Parameter(in = ParameterIn.PATH, description = "Participant identifier issued during Participant registration", required=true, schema=@Schema()) @PathVariable("participant_id") String participantId
);


    @Operation(summary = "Registers a new PERA arrangement", description = "API that allows PERA Admins to register the successful creation of one or more new PERA Arrangements", tags={ "PERA" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully created a new PERA Account", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PeraArrangement.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request - The server cannot process the request due to a client error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden - The server understood the request but refuses to authorize it", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found - The requested resource could not be found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests - The client has sent too many requests in a given amount of time", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error - The server encountered an unexpected condition", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/ofxpera/arrangements",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<PeraArrangement> peraArrangementRegistration();


    @Operation(summary = "Register an OFxPERA Participant", description = "API for registering an OFxPERA Participant following FAPI Dynamic Client Registration requirements", security = {
        @SecurityRequirement(name = "SignedJWT")    }, tags={ "Bootstrap" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Participant successfully registered", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ClientRegistrationResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request - The server cannot process the request due to a client error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized - Authentication is required and has failed or not been provided", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden - The server understood the request but refuses to authorize it", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found - The requested resource could not be found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests - The client has sent too many requests in a given amount of time", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error - The server encountered an unexpected condition", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/ofxpera/participants",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ClientRegistrationResponse> registerParticipant(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ParticipantConfig body
);


    @Operation(summary = "Register a PERA Admin Product", description = "API that allows PERA Admin to register a PERA product.", security = {
        @SecurityRequirement(name = "RegistrationAccessToken")    }, tags={ "Bootstrap" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Product successfully registered", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PeraProduct.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request - The server cannot process the request due to a client error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized - Authentication is required and has failed or not been provided", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden - The server understood the request but refuses to authorize it", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found - The requested resource could not be found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests - The client has sent too many requests in a given amount of time", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error - The server encountered an unexpected condition", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/ofxpera/product",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<PeraProduct> registerProduct();


    @Operation(summary = "Update an OFxPERA Participant", description = "API for updating the URIs and status of an OFxPERA Participant", security = {
        @SecurityRequirement(name = "RegistrationAccessToken")    }, tags={ "Bootstrap" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Participant successfully updated", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ClientRegistrationResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request - The server cannot process the request due to a client error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized - Authentication is required and has failed or not been provided", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden - The server understood the request but refuses to authorize it", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found - The requested resource could not be found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests - The client has sent too many requests in a given amount of time", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error - The server encountered an unexpected condition", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/ofxpera/participants",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<ClientRegistrationResponse> updateParticipant(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ParticipantConfig body
);


    @Operation(summary = "Update a PERA Admin Product", description = "API that allows PERA Admin to update their product.", security = {
        @SecurityRequirement(name = "RegistrationAccessToken")    }, tags={ "Bootstrap" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Product successfully updated", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PeraProduct.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request - The server cannot process the request due to a client error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized - Authentication is required and has failed or not been provided", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden - The server understood the request but refuses to authorize it", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found - The requested resource could not be found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests - The client has sent too many requests in a given amount of time", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error - The server encountered an unexpected condition", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/ofxpera/product/{product_id}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<PeraProduct> updateProduct(@Parameter(in = ParameterIn.PATH, description = "Product identifier issued during product registration", required=true, schema=@Schema()) @PathVariable("product_id") String productId
);

}

